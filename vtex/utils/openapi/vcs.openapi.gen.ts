
// deno-fmt-ignore-file
// deno-lint-ignore-file no-explicit-any ban-types ban-unused-ignore
//
// DO NOT EDIT. This file is generated by deco.
// This file SHOULD be checked into source version control.
// To generate this file: deno task start
//        


export type SkuComplement = {
/**
 * SKU Complement’s unique numerical identifier.
 */
Id?: number
/**
 * ID of the SKU which will be inserted as a Complement in the Parent SKU.
 */
SkuId?: number
/**
 * ID of the Parent SKU, where the Complement will be inserted.
 */
ParentSkuId?: number
/**
 * Complement Type ID. This represents the type of the complement. The possible values are: `1` for Accessory; `2` for Suggestion; `3` for Similar Product; `5` for Show Together.
 */
ComplementTypeId?: number
}[]
/**
 * Array of objects.
 */
export type CategorySpecification = {
/**
 * Specification name.  Limited to 100 characters.
 */
Name?: string
/**
 * Category ID.
 */
CategoryId?: number
/**
 * Specification field ID.
 */
FieldId?: number
/**
 * Defines if the specification is active.
 */
IsActive?: boolean
/**
 * Defines if it is an SKU specification.
 */
IsStockKeepingUnit?: boolean
}[]
/**
 * ID of the `orderForm` corresponding to the cart from which to place the order. This is the same as the `orderFormId` parameter.
 */
export type ReferenceId = string
/**
 * `true` if the shopper's data provided during checkout should be saved for future reference.
 */
export type SavePersonalData = boolean
/**
 * True if the shopper opted to receive the newsletter.
 */
export type OptinNewsLetter = boolean

export interface OpenAPI {
/**
 * Retrieves the IDs of products and SKUs. 
 * > 📘 Onboarding guide 
 * >
 * > Check the new [Catalog onboarding guide](https://developers.vtex.com/vtex-rest-api/docs/catalog-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Catalog and is organized by focusing on the developer's journey.
 */
"GET /api/catalog_system/pvt/products/GetProductAndSkuIds": {
searchParams: {
/**
 * ID of the category from which you need to retrieve Products and SKUs.
 */
categoryId?: number
/**
 * Insert the ID that will start the request result.
 */
_from?: number
/**
 * Insert the ID that will end the request result.
 */
_to?: number
}
response: {
/**
 * Object composed by Product IDs and SKU IDs, where the parent ID is from Products and the SKU IDs are the Child IDs.
 */
data?: {
/**
 * Array with SKU IDs of a certain product.
 */
"Product ID"?: number[]
}
/**
 * Object with information about the product and SKUs list.
 */
range?: {
/**
 * Total quantity of SKUs.
 */
total?: number
/**
 * Initial product ID.
 */
from?: number
/**
 * Final product ID.
 */
to?: number
}
}
}
/**
 * Create a new document
 */
"POST /api/dataentities/:acronym/documents": {
body: {
anyProperty?: string
}
response: {
Id?: string
Href?: string
DocumentId?: string
}
}
/**
 * Retrieves a specific Product by its ID. This information is exactly what is needed to create a new Product. 
 * > 📘 Onboarding guide 
 * >
 * > Check the new [Catalog onboarding guide](https://developers.vtex.com/vtex-rest-api/docs/catalog-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Catalog and is organized by focusing on the developer's journey.
 */
"GET /api/catalog/pvt/product/:productId": {
response: {
/**
 * Product’s unique numerical identifier.
 */
Id?: number
/**
 * Product's name. Limited to 150 characters.
 */
Name?: string
/**
 * Department ID according to the product's category.
 */
DepartmentId?: number
/**
 * Category ID associated with this product.
 */
CategoryId?: number
/**
 * Brand ID associated with this product.
 */
BrandId?: number
/**
 * Slug that will be used to build the product page URL. If it not informed, it will be generated according to the product's name replacing spaces and special characters by hyphens (`-`).
 */
LinkId?: string
/**
 * Product Reference Code.
 */
RefId?: string
/**
 * Shows (`true`) or hides (`false`) the product in search result and product pages, but the product can still be added to the shopping cart. Usually applicable for gifts.
 */
IsVisible?: boolean
/**
 * Product description.
 */
Description?: string
/**
 * Short product description. This information can be displayed on both the product page and the shelf, using the following controls:
 *  Store Framework:  `$product.DescriptionShort`.
 *  Legacy CMS Portal: `<vtex.cmc:productDescriptionShort/>`.
 * 
 */
DescriptionShort?: string
/**
 * Used to assist in the ordering of the search result of the site. Using the `O=OrderByReleaseDateDESC` query string, you can pull this value and show the display order by release date. This attribute is also used as a condition for dynamic collections.
 */
ReleaseDate?: string
/**
 * Store Framework: Deprecated. 
 * Legacy CMS Portal: Keywords or synonyms related to the product, separated by comma (`,`). "Television", for example, can have a substitute word like "TV". This field is important to make your searches more comprehensive.
 * 
 */
KeyWords?: string
/**
 * Product's Title tag. Limited to 150 characters. It is presented in the browser tab and corresponds to the title of the product page. This field is important for SEO.
 */
Title?: string
/**
 * Activate (`true`) or inactivate (`false`) product.
 */
IsActive?: boolean
/**
 * Product tax code, used for tax calculation.
 */
TaxCode?: string
/**
 * Brief description of the product for SEO. It is recommended not to exceed 150 characters.
 */
MetaTagDescription?: string
/**
 * @deprecated
 */
SupplierId?: (null | number)
/**
 * If `true`, activates the [Notify Me](https://help.vtex.com/en/tutorial/setting-up-the-notify-me-option--2VqVifQuf6Co2KG048Yu6e) option when the product is out of stock.
 */
ShowWithoutStock?: boolean
/**
 * @deprecated
 * This is a legacy field. Do not take this information into consideration.
 */
AdWordsRemarketingCode?: string
/**
 * @deprecated
 * This is a legacy field. Do not take this information into consideration.
 */
LomadeeCampaignCode?: string
/**
 * Value used to set the priority on the search result page.
 */
Score?: number
}
}
/**
 * Updates an existing Product.
 */
"PUT /api/catalog/pvt/product/:productId": {
body: {
/**
 * Product's name. Limited to 150 characters.
 */
Name: string
/**
 * Department ID according to the product's category.
 */
DepartmentId?: number
/**
 * Category ID associated with this product.
 */
CategoryId: number
/**
 * Brand ID associated with this product.
 */
BrandId: number
/**
 * Slug that will be used to build the product page URL. If it not informed, it will be generated according to the product's name replacing spaces and special characters by hyphens (`-`).
 */
LinkId?: string
/**
 * Product Reference Code.
 */
RefId?: string
/**
 * Shows (`true`) or hides (`false`) the product in search result and product pages, but the product can still be added to the shopping cart. Usually applicable for gifts.
 */
IsVisible?: boolean
/**
 * Product description.
 */
Description?: string
/**
 * Short product description. This information can be displayed on both the product page and the shelf, using the following controls:
 *  Store Framework:  `$product.DescriptionShort`.
 *  Legacy CMS Portal: `<vtex.cmc:productDescriptionShort/>`.
 * 
 */
DescriptionShort?: string
/**
 * Used to assist in the ordering of the search result of the site. Using the `O=OrderByReleaseDateDESC` query string, you can pull this value and show the display order by release date. This attribute is also used as a condition for dynamic collections.
 */
ReleaseDate?: string
/**
 * Store Framework: Deprecated. 
 * Legacy CMS Portal: Keywords or synonyms related to the product, separated by comma (`,`). "Television", for example, can have a substitute word like "TV". This field is important to make your searches more comprehensive.
 * 
 */
KeyWords?: string
/**
 * Product's Title tag. Limited to 150 characters. It is presented in the browser tab and corresponds to the title of the product page. This field is important for SEO.
 */
Title?: string
/**
 * Activate (`true`) or inactivate (`false`) product.
 */
IsActive?: boolean
/**
 * Product tax code, used for tax calculation.
 */
TaxCode?: string
/**
 * Brief description of the product for SEO. It is recommended not to exceed 150 characters.
 */
MetaTagDescription?: string
/**
 * @deprecated
 */
SupplierId?: (null | number)
/**
 * If `true`, activates the [Notify Me](https://help.vtex.com/en/tutorial/setting-up-the-notify-me-option--2VqVifQuf6Co2KG048Yu6e) option when the product is out of stock.
 */
ShowWithoutStock?: boolean
/**
 * @deprecated
 * This is a legacy field. Do not take this information into consideration.
 */
AdWordsRemarketingCode?: string
/**
 * @deprecated
 * This is a legacy field. Do not take this information into consideration.
 */
LomadeeCampaignCode?: string
/**
 * Value used to set the priority on the search result page.
 */
Score?: number
}
response: {
/**
 * Product’s unique numerical identifier.
 */
Id?: number
/**
 * Product's name. Limited to 150 characters.
 */
Name?: string
/**
 * Department ID according to the product's category.
 */
DepartmentId?: number
/**
 * Category ID associated with this product.
 */
CategoryId?: number
/**
 * Brand ID associated with this product.
 */
BrandId?: number
/**
 * Slug that will be used to build the product page URL. If it not informed, it will be generated according to the product's name replacing spaces and special characters by hyphens (`-`).
 */
LinkId?: string
/**
 * Product Reference Code.
 */
RefId?: string
/**
 * Shows (`true`) or hides (`false`) the product in search result and product pages, but the product can still be added to the shopping cart. Usually applicable for gifts.
 */
IsVisible?: boolean
/**
 * Product description.
 */
Description?: string
/**
 * Short product description. This information can be displayed on both the product page and the shelf, using the following controls:
 *  Store Framework:  `$product.DescriptionShort`.
 *  Legacy CMS Portal: `<vtex.cmc:productDescriptionShort/>`.
 * 
 */
DescriptionShort?: string
/**
 * Used to assist in the ordering of the search result of the site. Using the `O=OrderByReleaseDateDESC` query string, you can pull this value and show the display order by release date. This attribute is also used as a condition for dynamic collections.
 */
ReleaseDate?: string
/**
 * Store Framework: Deprecated. 
 * Legacy CMS Portal:  Keywords or synonyms related to the product, separated by comma (`,`). "Television", for example, can have a substitute word like "TV". This field is important to make your searches more comprehensive.
 * 
 */
KeyWords?: string
/**
 * Product's Title tag. Limited to 150 characters. It is presented in the browser tab and corresponds to the title of the product page. This field is important for SEO.
 */
Title?: string
/**
 * Activate (`true`) or inactivate (`false`) product.
 */
IsActive?: boolean
/**
 * Product tax  code, used for tax calculation.
 */
TaxCode?: string
/**
 * Brief description of the product for SEO. It's recommended that you don't exceed 150 characters.
 */
MetaTagDescription?: string
/**
 * @deprecated
 */
SupplierId?: (null | number)
/**
 * If `true`, activates the [Notify Me](https://help.vtex.com/en/tutorial/setting-up-the-notify-me-option--2VqVifQuf6Co2KG048Yu6e) option when the product is out of stock.
 */
ShowWithoutStock?: boolean
/**
 * @deprecated
 * This is a legacy field. Do not take this information into consideration.
 */
AdWordsRemarketingCode?: string
/**
 * @deprecated
 * This is a legacy field. Do not take this information into consideration.
 */
LomadeeCampaignCode?: string
/**
 * Value used to set the priority on the search result page.
 */
Score?: number
}
}
/**
 * Retrieves a specific product's general information as name, description and the trade policies that it is included.
 */
"GET /api/catalog_system/pvt/products/productget/:productId": {
response: {
/**
 * Product ID.
 */
Id?: number
/**
 * Product's name. Limited to 150 characters.
 */
Name?: string
/**
 * Product department ID.
 */
DepartmentId?: number
/**
 * Product category ID.
 */
CategoryId?: number
/**
 * Product brand ID.
 */
BrandId?: number
/**
 * Product text link.
 */
LinkId?: string
/**
 * Product referecial code.
 */
RefId?: string
/**
 * If the Product is visible on the store.
 */
IsVisible?: boolean
/**
 * Product description.
 */
Description?: string
/**
 * Product complement name.
 */
DescriptionShort?: string
/**
 * Product release date.
 */
ReleaseDate?: string
/**
 * Substitutes words for the product.
 */
KeyWords?: string
/**
 * Product's Title tag. Limited to 150 characters. It is presented in the browser tab and corresponds to the title of the product page. This field is important for SEO.
 */
Title?: string
/**
 * If the product is active (`true`) or not (`false`) at the store.
 */
IsActive?: boolean
/**
 * Product fiscal code.
 */
TaxCode?: string
/**
 * Product meta tag description.
 */
MetaTagDescription?: string
/**
 * Product supplier ID.
 */
SupplierId?: number
/**
 * Defines if the Product will remain being shown in the store even if it’s out of stock.
 */
ShowWithoutStock?: boolean
/**
 * List with the Trade Policies IDs that the product is included.
 */
ListStoreId?: number[]
/**
 * @deprecated
 * This is a legacy field. Do not take this information into consideration.
 */
AdWordsRemarketingCode?: string
/**
 * @deprecated
 * This is a legacy field. Do not take this information into consideration.
 */
LomadeeCampaignCode?: string
}
}
/**
 * Retrieves a specific product by its Reference ID.
 */
"GET /api/catalog_system/pvt/products/productgetbyrefid/:refId": {
response: {
/**
 * ID of the Product.
 */
Id?: number
/**
 * Name of the Product.
 */
Name?: string
/**
 * ID of product department.
 */
DepartmentId?: number
/**
 * ID of product Category.
 */
CategoryId?: number
/**
 * ID of the product Brand.
 */
BrandId?: number
/**
 * Category URL.
 */
LinkId?: string
/**
 * Product Reference ID.
 */
RefId?: string
/**
 * If the product are visible in search and list pages.
 */
IsVisible?: boolean
/**
 * Product Description, HTML is allowed.
 */
Description?: string
/**
 * Product Short Description.
 */
DescriptionShort?: string
/**
 * Product Release Date, for list ordering and product cluster highlight.
 */
ReleaseDate?: string
/**
 * Alternatives Keywords to improve the product findability.
 */
KeyWords?: string
/**
 * Product's Title tag. Limited to 150 characters. It is presented in the browser tab and corresponds to the title of the product page. This field is important for SEO.
 */
Title?: string
/**
 * If the product is Active.
 */
IsActive?: boolean
/**
 * SKU Tax Code.
 */
TaxCode?: string
/**
 * Meta Description for the Product page.
 */
MetaTagDescription?: string
/**
 * Product Supplier ID.
 */
SupplierId?: number
/**
 * If the product can be visible without stock.
 */
ShowWithoutStock?: boolean
/**
 * Array with the ID of all the trade policies that are related to the product.
 */
ListStoreId?: number[]
/**
 * @deprecated
 * This is a legacy field. Do not take this information into consideration.
 */
AdWordsRemarketingCode?: string
/**
 * @deprecated
 * This is a legacy field. Do not take this information into consideration.
 */
LomadeeCampaignCode?: string
}
}
/**
 * Retrieves data about the product and all SKUs related to it by the product's ID.
 * ## Response body example
 * 
 * ```json
 * {
 *     "productId": 9,
 *     "name": "Camisa Masculina",
 *     "salesChannel": "2",
 *     "available": true,
 *     "displayMode": "lista",
 *     "dimensions": [
 *         "Cores",
 *         "Tamanho",
 *         "País de origem",
 *         "Gênero"
 *     ],
 *     "dimensionsInputType": {
 *         "Cores": "Combo",
 *         "Tamanho": "Combo",
 *         "País de origem": "Combo",
 *         "Gênero": "Combo"
 *     },
 *     "dimensionsMap": {
 *         "Cores": [
 *             "Amarelo",
 *             "Azul",
 *             "Vermelho"
 *         ],
 *         "Tamanho": [
 *             "P",
 *             "M",
 *             "G"
 *         ],
 *         "País de origem": [
 *             "Brasil"
 *         ],
 *         "Gênero": [
 *             "Masculino"
 *         ]
 *     },
 *     "skus": [
 *         {
 *             "sku": 310118454,
 *             "skuname": "Amarela - G",
 *             "dimensions": {
 *                 "Cores": "Amarelo",
 *                 "Tamanho": "G",
 *                 "País de origem": "Brasil",
 *                 "Gênero": "Masculino"
 *             },
 *             "available": false,
 *             "availablequantity": 0,
 *             "cacheVersionUsedToCallCheckout": null,
 *             "listPriceFormated": "R$ 0,00",
 *             "listPrice": 0,
 *             "taxFormated": "R$ 0,00",
 *             "taxAsInt": 0,
 *             "bestPriceFormated": "R$ 9.999.876,00",
 *             "bestPrice": 999987600,
 *             "spotPrice": 999987600,
 *             "installments": 0,
 *             "installmentsValue": 0,
 *             "installmentsInsterestRate": null,
 *             "image": "https://lojadobreno.vteximg.com.br/arquivos/ids/155467-292-292/image-5d7ad76ad1954c53adecab4138319034.jpg?v=637321899584500000",
 *             "sellerId": "1",
 *             "seller": "lojadobreno",
 *             "measures": {
 *                 "cubicweight": 1.0000,
 *                 "height": 5.0000,
 *                 "length": 20.0000,
 *                 "weight": 200.0000,
 *                 "width": 20.0000
 *             },
 *             "unitMultiplier": 1.0000,
 *             "rewardValue": 0
 *         },
 *         {
 *             "sku": 310118455,
 *             "skuname": "Vermelha - M",
 *             "dimensions": {
 *                 "Cores": "Vermelho",
 *                 "Tamanho": "M",
 *                 "País de origem": "Brasil",
 *                 "Gênero": "Masculino"
 *             },
 *             "available": true,
 *             "availablequantity": 99999,
 *             "cacheVersionUsedToCallCheckout": "38395F1AEF59DF5CEAEDE472328145CD_",
 *             "listPriceFormated": "R$ 0,00",
 *             "listPrice": 0,
 *             "taxFormated": "R$ 0,00",
 *             "taxAsInt": 0,
 *             "bestPriceFormated": "R$ 20,00",
 *             "bestPrice": 2000,
 *             "spotPrice": 2000,
 *             "installments": 1,
 *             "installmentsValue": 2000,
 *             "installmentsInsterestRate": 0,
 *             "image": "https://lojadobreno.vteximg.com.br/arquivos/ids/155468-292-292/image-601a6099aace48b89d26fc9f22e8e611.jpg?v=637321906602470000",
 *             "sellerId": "pedrostore",
 *             "seller": "pedrostore",
 *             "measures": {
 *                 "cubicweight": 0.4167,
 *                 "height": 5.0000,
 *                 "length": 20.0000,
 *                 "weight": 200.0000,
 *                 "width": 20.0000
 *             },
 *             "unitMultiplier": 1.0000,
 *             "rewardValue": 0
 *         }
 *     ]
 * }
 * ```
 */
"GET /api/catalog_system/pub/products/variations/:productId": {
/**
 * Response body.
 */
response: {
/**
 * Product’s unique numerical identifier.
 */
productId?: number
/**
 * Product name.
 */
name?: string
/**
 * Trade policy ID.
 */
salesChannel?: string
/**
 * Defines if the product is available (`true`) or not (`false`).
 */
available?: boolean
/**
 * Defines the mannner SKUs are displayed.
 */
displayMode?: string
/**
 * Lists SKU specifications.
 */
dimensions?: string[]
/**
 * Lists SKU specifications and their field type, in the following format: `"{specificationName}":"{fieldType}"`.
 */
dimensionsInputType?: {
[k: string]: string
}
/**
 * Lists SKU specifications and their possible values inside arrays.
 */
dimensionsMap?: {
[k: string]: any[]
}
/**
 * Array containing information about the product's SKUs.
 */
skus?: {
/**
 * SKU ID.
 */
sku?: number
/**
 * SKU Name.
 */
skuname?: string
/**
 * Lists SKU specifications and their respective values.
 */
dimensions?: {
[k: string]: string
}
/**
 * Defines if the SKU is available (`true`) or not (`false`).
 */
available?: boolean
/**
 * Available quantity of the SKU in stock.
 */
availablequantity?: number
/**
 * Cache version used to call Checkout.
 */
cacheVersionUsedToCallCheckout?: (null | string)
/**
 * List price formatted according to the valid currency.
 */
listPriceFormated?: string
/**
 * List price.
 */
listPrice?: number
/**
 * Tax value formatted according to the valid currency.
 */
taxFormated?: string
/**
 * Tax value.
 */
taxAsInt?: number
/**
 * Best price formatted according to the valid currency.
 */
bestPriceFormated?: string
/**
 * Best price.
 */
bestPrice?: number
/**
 * Spot price.
 */
spotPrice?: number
/**
 * Number of installments.
 */
installments?: number
/**
 * Value of installments.
 */
installmentsValue?: number
/**
 * Interest rate of installments.
 */
installmentsInsterestRate?: (null | number)
/**
 * SKU image URL.
 */
image?: string
/**
 * Seller ID.
 */
sellerId?: string
/**
 * SKU measures.
 */
measures?: {
/**
 * Cubic weight.
 */
cubicweight?: number
/**
 * Height.
 */
height?: number
/**
 * Length.
 */
length?: number
/**
 * Weight.
 */
weight?: number
/**
 * Width.
 */
width?: number
}
/**
 * SKU Unit Multiplier.
 */
unitMultiplier?: number
/**
 * SKU reward value for rewards program.
 */
rewardValue?: number
}[]
}
}
/**
 * Retrieves the review rate of a product by this product's ID.
 */
"GET /api/addon/pvt/review/GetProductRate/:productId": {
/**
 * Review rate numeber.
 */
response: number
}
/**
 * This endpoint allows two types of request:
 * 
 * **Type 1:** Creating a new Product as well as a new Category path (including subcategories) and a new Brand by using `CategoryPath` and `BrandName` parameters.
 * 
 * **Type 2:** Creating a new Product given an existing `BrandId` and an existing `CategoryId`.
 * 
 * When creating a product, regardless of the type of request, if there is a need to create a new product with a specific custom product ID, specify the `Id` (integer) in the request body. Otherwise, VTEX will generate the ID automatically.
 * 
 *  ## Request body examples
 * 
 *  ### Type 1
 * 
 *  Request to create a product, associating it to a new Category and a new Brand by using `CategoryPath` and `BrandName`:
 * 
 * ```json
 * {
 *     "Name": "Black T-Shirt",
 *     "CategoryPath": "Mens/Clothing/T-Shirts",
 *     "BrandName": "Nike",
 *     "RefId": "31011706925",
 *     "Title": "Black T-Shirt",
 *     "LinkId": "tshirt-black",
 *     "Description": "This is a cool Tshirt",
 *     "ReleaseDate": "2022-01-01T00:00:00",
 *     "IsVisible": true,
 *     "IsActive": true,
 *     "TaxCode": "",
 *     "MetaTagDescription": "tshirt black",
 *     "ShowWithoutStock": true,
 *     "Score": 1
 * }
 * ```
 * 
 *  ### Type 2
 * 
 * Request to create a product, associating it to an existing `CategoryId` and `BrandId`:
 * 
 * ```json
 * {
 *    "Name": "insert product test",
 *    "DepartmentId": 1,
 *    "CategoryId": 2,
 *    "BrandId": 2000000,
 *    "LinkId": "insert-product-test",
 *    "RefId": "310117869",
 *    "IsVisible": true,
 *    "Description": "texto de descrição",
 *    "DescriptionShort": "Utilize o CEP 04548-005 para frete grátis",
 *    "ReleaseDate": "2019-01-01T00:00:00",
 *    "KeyWords": "teste,teste2",
 *    "Title": "product de teste",
 *    "IsActive": true,
 *    "TaxCode": "",
 *    "MetaTagDescription": "tag test",
 *    "SupplierId": 1,
 *    "ShowWithoutStock": true,
 *    "AdWordsRemarketingCode": null,
 *    "LomadeeCampaignCode": null,
 *    "Score": 1
 * }
 * ```
 * 
 *  ## Response body example
 * 
 * ```json
 * {
 *    "Id": 52,
 *    "Name": "insert product test",
 *    "DepartmentId": 1,
 *    "CategoryId": 2,
 *    "BrandId": 2000000,
 *    "LinkId": "insert-product-test",
 *    "RefId": "310117869",
 *    "IsVisible": true,
 *    "Description": "texto de descrição",
 *    "DescriptionShort": "Utilize o CEP 04548-005 para frete grátis",
 *    "ReleaseDate": "2019-01-01T00:00:00",
 *    "KeyWords": "teste,teste2",
 *    "Title": "product de teste",
 *    "IsActive": true,
 *    "TaxCode": "",
 *    "MetaTagDescription": "tag test",
 *    "SupplierId": 1,
 *    "ShowWithoutStock": true,
 *    "AdWordsRemarketingCode": null,
 *    "LomadeeCampaignCode": null,
 *    "Score": 1
 * }
 * ```
 *   
 * > 📘 Onboarding guide 
 * >
 * > Check the new [Catalog onboarding guide](https://developers.vtex.com/vtex-rest-api/docs/catalog-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Catalog and is organized by focusing on the developer's journey.
 */
"POST /api/catalog/pvt/product": {
body: {
/**
 * Product’s unique numerical identifier. If not informed, it will be automatically generated by VTEX.
 */
Id?: number
/**
 * Product's name. Limited to 150 characters.
 */
Name: string
/**
 * Path of categories associated with this product, from the highest level of category to the lowest level, separated by `/`. It is mandatory to use either this field or the `CategoryId` field.
 */
CategoryPath?: string
/**
 * ID of an existing Category that will be associated with this product. It is mandatory to use either this field or the `CategoryPath` field.
 */
CategoryId?: number
/**
 * Name of the brand that will be associated with this product. It is mandatory to use either this field or the `BrandId` field. If you wish to create a new brand, that is, in case the brand does not exist yet, use this field instead of `BrandId`.
 */
BrandName?: string
/**
 * ID of an existing Brand that will be associated with this product. It is mandatory to use either this field or the `BrandName` field.
 */
BrandId?: number
/**
 * Slug that will be used to build the product page URL. If it not informed, it will be generated according to the product's name replacing spaces and special characters by hyphens (`-`).
 */
LinkId?: string
/**
 * Product Reference Code.
 */
RefId?: string
/**
 * Shows (`true`) or hides (`false`) the product in search result and product pages, but the product can still be added to the shopping cart. Usually applicable for gifts.
 */
IsVisible?: boolean
/**
 * Product description.
 */
Description?: string
/**
 * Short product description. This information can be displayed on both the product page and the shelf, using the following controls:
 *  Store Framework:  `$product.DescriptionShort`.
 *  Legacy CMS Portal: `<vtex.cmc:productDescriptionShort/>`.
 * 
 */
DescriptionShort?: string
/**
 * Used to assist in the ordering of the search result of the site. Using the `O=OrderByReleaseDateDESC` query string, you can pull this value and show the display order by release date. This attribute is also used as a condition for dynamic collections.
 */
ReleaseDate?: string
/**
 * Store Framework: Deprecated. 
 * Legacy CMS Portal: Keywords or synonyms related to the product, separated by comma (`,`). "Television", for example, can have a substitute word like "TV". This field is important to make your searches more comprehensive.
 * 
 */
KeyWords?: string
/**
 * Product's Title tag. Limited to 150 characters. It is presented in the browser tab and corresponds to the title of the product page. This field is important for SEO.
 */
Title?: string
/**
 * Activate (`true`) or inactivate (`false`) product.
 */
IsActive?: boolean
/**
 * Product tax code, used for tax calculation.
 */
TaxCode?: string
/**
 * Brief description of the product for SEO. It is recommended not to exceed 150 characters.
 */
MetaTagDescription?: string
/**
 * @deprecated
 */
SupplierId?: (null | number)
/**
 * If `true`, activates the [Notify Me](https://help.vtex.com/en/tutorial/setting-up-the-notify-me-option--2VqVifQuf6Co2KG048Yu6e) option when the product is out of stock.
 */
ShowWithoutStock?: boolean
/**
 * @deprecated
 * This is a legacy field. Do not take this information into consideration.
 */
AdWordsRemarketingCode?: string
/**
 * @deprecated
 * This is a legacy field. Do not take this information into consideration.
 */
LomadeeCampaignCode?: string
/**
 * Value used to set the priority on the search result page.
 */
Score?: number
}
response: {
/**
 * Product’s unique numerical identifier.
 */
Id?: number
/**
 * Product's name. Limited to 150 characters.
 */
Name?: string
/**
 * Department ID according to the product's category.
 */
DepartmentId?: number
/**
 * Category ID associated with this product.
 */
CategoryId?: number
/**
 * Brand ID associated with this product.
 */
BrandId?: number
/**
 * Slug that will be used to build the product page URL. If it not informed, it will be generated according to the product's name replacing spaces and special characters by hyphens (`-`).
 */
LinkId?: string
/**
 * Product Reference Code.
 */
RefId?: string
/**
 * Shows (`true`) or hides (`false`) the product in search result and product pages, but the product can still be added to the shopping cart. Usually applicable for gifts.
 */
IsVisible?: boolean
/**
 * Product description.
 */
Description?: string
/**
 * Short product description. This information can be displayed on both the product page and the shelf, using the following controls:
 *  Store Framework:  `$product.DescriptionShort`.
 *  Legacy CMS Portal: `<vtex.cmc:productDescriptionShort/>`.
 * 
 */
DescriptionShort?: string
/**
 * Used to assist in the ordering of the search result of the site. Using the `O=OrderByReleaseDateDESC` query string, you can pull this value and show the display order by release date. This attribute is also used as a condition for dynamic collections.
 */
ReleaseDate?: string
/**
 * Store Framework: Deprecated. 
 * Legacy CMS Portal:  Keywords or synonyms related to the product, separated by comma (`,`). "Television", for example, can have a substitute word like "TV". This field is important to make your searches more comprehensive.
 * 
 */
KeyWords?: string
/**
 * Product's Title tag. Limited to 150 characters. It is presented in the browser tab and corresponds to the title of the product page. This field is important for SEO.
 */
Title?: string
/**
 * Activate (`true`) or inactivate (`false`) product.
 */
IsActive?: boolean
/**
 * Product tax  code, used for tax calculation.
 */
TaxCode?: string
/**
 * Brief description of the product for SEO. It's recommended that you don't exceed 150 characters.
 */
MetaTagDescription?: string
/**
 * @deprecated
 */
SupplierId?: (null | number)
/**
 * If `true`, activates the [Notify Me](https://help.vtex.com/en/tutorial/setting-up-the-notify-me-option--2VqVifQuf6Co2KG048Yu6e) option when the product is out of stock.
 */
ShowWithoutStock?: boolean
/**
 * @deprecated
 * This is a legacy field. Do not take this information into consideration.
 */
AdWordsRemarketingCode?: string
/**
 * @deprecated
 * This is a legacy field. Do not take this information into consideration.
 */
LomadeeCampaignCode?: string
/**
 * Value used to set the priority on the search result page.
 */
Score?: number
}
}
/**
 * Retrieves all specifications of a product by the product's ID.
 * > 📘 Onboarding guide 
 * >
 * > Check the new [Catalog onboarding guide](https://developers.vtex.com/vtex-rest-api/docs/catalog-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Catalog and is organized by focusing on the developer's journey.
 * 
 * ### Response body example
 * 
 * ```json
 * [
 *     {
 *         "Value": [
 *             "Iron",
 *             "Plastic"
 *         ],
 *         "Id": 30,
 *         "Name": "Material"
 *     }
 * ]
 * ```
 */
"GET /api/catalog_system/pvt/products/:productId/specification": {
response: GetorUpdateProductSpecification[]
}
/**
 * Updates the value of a product specification by the product's ID. The ID or name can be used to identify what product specification will be updated. Specification fields must be previously created in your Catalog.
 * 
 * ### Request body example
 * 
 * ```json
 * [
 *     {
 *         "Value": [
 *             "Iron",
 *             "Plastic"
 *         ],
 *         "Id": 30,
 *         "Name": "Material"
 *     }
 * ]
 * ```
 */
"POST /api/catalog_system/pvt/products/:productId/specification": {
body: GetorUpdateProductSpecification[]
}
/**
 * Retrieves information of all specifications of a product by the product's ID.
 * 
 *  ### Response body example
 * 
 * ```json
 * [
 *     {
 *         "Id": 227,
 *         "ProductId": 1,
 *         "FieldId": 33,
 *         "FieldValueId": 135,
 *         "Text": "ValueA"
 *     },
 *     {
 *         "Id": 228,
 *         "ProductId": 1,
 *         "FieldId": 34,
 *         "FieldValueId": 1,
 *         "Text": "Giant"
 *     }
 * ]
 * ```
 */
"GET /api/catalog/pvt/product/:productId/specification": {
response: {
/**
 * ID of the association of the specification and the product. This ID is used to update or delete the specification.
 */
Id?: number
/**
 * Product ID.
 */
ProductId?: number
/**
 * Specification field ID.
 */
FieldId?: number
/**
 * Current specification value ID.
 */
FieldValueId?: number
/**
 * Current specification value text.
 */
Text?: string
}[]
}
/**
 * Associates a previously defined Specification to a Product.
 * 
 * ### Request body example
 * 
 * ```json
 * {
 *     "FieldId": 19,
 *     "FieldValueId": 1,
 *     "Text": "test"
 * }
 * ```
 * 
 * ### Response body example
 * 
 * ```json
 * {
 *     "Id": 41,
 *     "FieldId": 19,
 *     "FieldValueId": 1,
 *     "Text": "test"
 * }
 * ```
 */
"POST /api/catalog/pvt/product/:productId/specification": {
body: {
/**
 * Specification field ID.
 */
FieldId: number
/**
 * Specification Value ID. Mandatory for `FieldTypeId` `5`, `6` and `7`. Must not be used for any other field types
 */
FieldValueId?: number
/**
 * Value of specification. Only for `FieldTypeId` different from `5`, `6` and `7`.
 */
Text?: string
}
response: {
/**
 * ID of the association of the specification and the product. This ID is used to update or delete the specification.
 */
Id?: number
/**
 * Product ID.
 */
ProductId?: number
/**
 * Specification field ID.
 */
FieldId?: number
/**
 * Specification Value ID. Mandatory for `FieldTypeId` `5`, `6` and `7`. Must not be used for any other field types
 */
FieldValueId?: number
/**
 * Value of specification. Only for `FieldTypeId` different from `5`, `6` and `7`.
 */
Text?: string
}
}
/**
 * Deletes all Product Specifications given a specific Product ID.
 */
"DELETE /api/catalog/pvt/product/:productId/specification": {

}
/**
 * Deletes a specific Product Specification given a Product ID and a Specification ID.
 */
"DELETE /api/catalog/pvt/product/:productId/specification/:specificationId": {

}
/**
 * Associates a specification to a product using specification name and group name. Automatically creates the informed group, specification and values if they had not been created before.
 * 
 *  ## Request body example
 * 
 * ```json
 * {
 *     "FieldName": "Material",
 *     "GroupName": "Additional Information",
 *     "RootLevelSpecification": false,
 *     "FieldValues": [
 *         "Cotton",
 *        "Polyester"
 *         ]
 * }
 * ```
 *  
 *  
 * ## Response body example
 * 
 * ```json
 * [
 *     {
 *         "Id": 53,
 *         "ProductId": 3,
 *         "FieldId": 21,
 *         "FieldValueId": 60,
 *         "Text": "Cotton"
 *     },
 *     {
 *         "Id": 54,
 *         "ProductId": 3,
 *         "FieldId": 21,
 *         "FieldValueId": 61,
 *         "Text": "Polyester"
 *     }
 * ]
 * ```
 * 
 */
"PUT /api/catalog/pvt/product/:productId/specificationvalue": {
body: {
/**
 * Specification name. Limited to 100 characters.
 */
FieldName: string
/**
 * Group name.
 */
GroupName: string
/**
 * Root level specification.
 */
RootLevelSpecification: boolean
/**
 * Array of specification values.
 */
FieldValues: string[]
}
/**
 * Array with information of all product specifications.
 */
response: {
/**
 * ID of the association of the Product and the specification.
 */
Id?: number
/**
 * Product ID.
 */
ProductId?: number
/**
 * Specification field ID.
 */
FieldId?: number
/**
 * Current specification value ID.
 */
FieldValueId?: number
/**
 * Current specification value text.
 */
Text?: string
}[]
}
/**
 * Retrieves the IDs of all SKUs in your store. Presents the results with page size and pagination.
 * > 📘 Onboarding guide 
 * >
 * > Check the new [Catalog onboarding guide](https://developers.vtex.com/vtex-rest-api/docs/catalog-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Catalog and is organized by focusing on the developer's journey.
 * 
 * ### Response body example
 * 
 * ```json
 * [
 *   1,
 *   2,
 *   3,
 *   4,
 *   5,
 *   6,
 *   7,
 *   8,
 *   9,
 *   10
 * ]
 * ```
 */
"GET /api/catalog_system/pvt/sku/stockkeepingunitids": {
searchParams: {
/**
 * Number of the page from where you need to retrieve SKU IDs.
 */
page: number
/**
 * Size of the page from where you need retrieve SKU IDs. The maximum value is `1000`.
 */
pagesize: number
}
/**
 * Array composed by SKU IDs, in the search context.
 */
response: number[]
}
/**
 * Retrieves context of an SKU.
 * > 📘 Onboarding guide 
 * >
 * > Check the new [Catalog onboarding guide](https://developers.vtex.com/vtex-rest-api/docs/catalog-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Catalog and is organized by focusing on the developer's journey.
 * 
 *  ## Response body example
 * 
 * ```json
 * {
 *     "Id": 2001773,
 *     "ProductId": 2001426,
 *     "NameComplete": "Tabela de Basquete",
 *     "ComplementName": "",
 *     "ProductName": "Tabela de Basquete",
 *     "ProductDescription": "Tabela de Basquete",
 *     "SkuName": "Tabela de Basquete",
 *     "ProductRefId": "0987",
 *     "TaxCode": "",
 *     "IsActive": true,
 *     "IsTransported": true,
 *     "IsInventoried": true,
 *     "IsGiftCardRecharge": false,
 *     "ImageUrl": "http://ambienteqa.vteximg.com.br/arquivos/ids/168952-55-55/7508800GG.jpg",
 *     "DetailUrl": "/tabela-de-basquete/p",
 *     "CSCIdentification": null,
 *     "BrandId": "2000018",
 *     "BrandName": "MARCA ARGOLO TESTE",
 *     "IsBrandActive": true,
 *     "Dimension": {
 *         "cubicweight": 81.6833,
 *         "height": 65,
 *         "length": 58,
 *         "weight": 10000,
 *         "width": 130
 *     },
 *     "RealDimension": {
 *         "realCubicWeight": 274.1375,
 *         "realHeight": 241,
 *         "realLength": 65,
 *         "realWeight": 9800,
 *         "realWidth": 105
 *     },
 *     "ManufacturerCode": "",
 *     "IsKit": false,
 *     "KitItems": [],
 *     "Services": [],
 *     "Categories": [],
 *     "CategoriesFullPath": [
 *         "/1/10/",
 *         "/1/",
 *         "/20/"
 *     ],
 *     "Attachments": [
 *         {
 *             "Id": 3,
 *             "Name": "Mensagem",
 *             "Keys": [
 *                 "nome;20",
 *                 "foto;40"
 *             ],
 *             "Fields": [
 *                 {
 *                     "FieldName": "nome",
 *                     "MaxCaracters": "20",
 *                     "DomainValues": "Adalberto,Pedro,João"
 *                 },
 *                 {
 *                     "FieldName": "foto",
 *                     "MaxCaracters": "40",
 *                     "DomainValues": null
 *                 }
 *             ],
 *             "IsActive": true,
 *             "IsRequired": false
 *         }
 *     ],
 *     "Collections": [],
 *     "SkuSellers": [
 *         {
 *             "SellerId": "1",
 *             "StockKeepingUnitId": 2001773,
 *             "SellerStockKeepingUnitId": "2001773",
 *             "IsActive": true,
 *             "FreightCommissionPercentage": 0,
 *             "ProductCommissionPercentage": 0
 *         }
 *     ],
 *     "SalesChannels": [
 *         1,
 *         2,
 *         3,
 *         10
 *     ],
 *     "Images": [
 *         {
 *             "ImageUrl": "http://ambienteqa.vteximg.com.br/arquivos/ids/168952/7508800GG.jpg",
 *             "ImageName": "",
 *             "FileId": 168952
 *         },
 *         {
 *             "ImageUrl": "http://ambienteqa.vteximg.com.br/arquivos/ids/168953/7508800_1GG.jpg",
 *             "ImageName": "",
 *             "FileId": 168953
 *         },
 *         {
 *             "ImageUrl": "http://ambienteqa.vteximg.com.br/arquivos/ids/168954/7508800_2GG.jpg",
 *             "ImageName": "",
 *             "FileId": 168954
 *         }
 *     ],
 *     "Videos": [
 *         "www.google.com"
 *     ],
 *     "SkuSpecifications": [
 *         {
 *             "FieldId": 102,
 *             "FieldName": "Cor",
 *             "FieldValueIds": [
 *                 266
 *             ],
 *             "FieldValues": [
 *                 "Padrão"
 *             ],
 *             "IsFilter": false,
 *             "FieldGroupId": 11,
 *             "FieldGroupName": "Especificações"
 *         }
 *     ],
 *     "ProductSpecifications": [
 *         {
 *             "FieldId": 7,
 *             "FieldName": "Faixa Etária",
 *             "FieldValueIds": [
 *                 58,
 *                 56,
 *                 55,
 *                 52
 *             ],
 *             "FieldValues": [
 *                 "5 a 6 anos",
 *                 "7 a 8 anos",
 *                 "9 a 10 anos",
 *                 "Acima de 10 anos"
 *             ],
 *             "IsFilter": true,
 *             "FieldGroupId": 17,
 *             "FieldGroupName": "NewGroupName 2"
 *         },
 *         {
 *             "FieldId": 23,
 *             "FieldName": "Fabricante",
 *             "FieldValueIds": [],
 *             "FieldValues": [
 *                 "Xalingo"
 *             ],
 *             "IsFilter": false,
 *             "FieldGroupId": 17,
 *             "FieldGroupName": "NewGroupName 2"
 *         }
 *     ],
 *     "ProductClustersIds": "176,187,192,194,211,217,235,242",
 *     "PositionsInClusters": {
 *         "151": 3,
 *         "152": 0,
 *         "158": 1
 *     },
 *     "ProductClusterNames": {
 *         "151": "asdfghj",
 *         "152": "George",
 *         "158": "Coleção halloween"
 *     },
 *     "ProductClusterHighlights": {
 *         "151": "asdfghj",
 *         "152": "George"
 *     },
 *     "ProductCategoryIds": "/59/",
 *     "IsDirectCategoryActive": false,
 *     "ProductGlobalCategoryId": null,
 *     "ProductCategories": {
 *         "59": "Brinquedos"
 *     },
 *     "CommercialConditionId": 1,
 *     "RewardValue": 100.0,
 *     "AlternateIds": {
 *         "Ean": "8781",
 *         "RefId": "878181"
 *     },
 *     "AlternateIdValues": [
 *         "8781",
 *         "878181"
 *     ],
 *     "EstimatedDateArrival": "",
 *     "MeasurementUnit": "un",
 *     "UnitMultiplier": 2.0000,
 *     "InformationSource": "Indexer",
 *     "ModalType": "",
 *     "KeyWords": "basquete, tabela",
 *     "ReleaseDate": "2020-01-06T00:00:00",
 *     "ProductIsVisible": true,
 *     "ShowIfNotAvailable": true,
 *     "IsProductActive": true,
 *     "ProductFinalScore": 0
 * }
 * ```
 */
"GET /api/catalog_system/pvt/sku/stockkeepingunitbyid/:skuId": {
searchParams: {
/**
 * Trade Policy's unique identifier number.
 */
sc?: number
}
response: GetSKUandContext
}
/**
 * Retrieves information about a specific SKU by its `RefId`. 
 * 
 * ### Response body example
 * 
 * ```json
 * {
 *     "Id": 1,
 *     "ProductId": 1,
 *     "IsActive": true,
 *     "Name": "Royal Canin Feline Urinary 500g",
 *     "RefId": "0001",
 *     "PackagedHeight": 6.0000,
 *     "PackagedLength": 24.0000,
 *     "PackagedWidth": 14.0000,
 *     "PackagedWeightKg": 550.0000,
 *     "Height": null,
 *     "Length": null,
 *     "Width": null,
 *     "WeightKg": null,
 *     "CubicWeight": 1.0000,
 *     "IsKit": false,
 *     "CreationDate": "2020-03-12T15:42:00",
 *     "RewardValue": null,
 *     "EstimatedDateArrival": null,
 *     "ManufacturerCode": "",
 *     "CommercialConditionId": 1,
 *     "MeasurementUnit": "un",
 *     "UnitMultiplier": 1.0000,
 *     "ModalType": null,
 *     "KitItensSellApart": false,
 *     "Videos": null
 * }
 * ```
 */
"GET /api/catalog/pvt/stockkeepingunit": {
searchParams: {
/**
 * SKU Reference ID.
 */
refId: string
}
response: {
/**
 * SKU ID.
 */
Id?: number
/**
 * Product ID.
 */
ProductId?: number
/**
 * Defines if the SKU is active (`true`) or not (`false`).
 */
IsActive?: boolean
/**
 * When set to `true`, this attribute will automatically update the SKU as active once associated with an image or an active component.
 */
ActivateIfPossible?: boolean
/**
 * SKU Name.
 */
Name?: string
/**
 * SKU RefId.
 */
RefId?: string
/**
 * Packaged Height.
 */
PackagedHeight?: number
/**
 * Packaged Length.
 */
PackagedLength?: number
/**
 * Packaged Width.
 */
PackagedWidth?: number
/**
 * Packaged Weight, in the measurement [configured in the store](https://help.vtex.com/en/tutorial/filling-in-system-settings--tutorials_269), which by default is in grams.
 */
PackagedWeightKg?: number
/**
 * SKU Height.
 */
Height?: number
/**
 * SKU Length.
 */
Length?: number
/**
 * SKU Width.
 */
Width?: number
/**
 * Weight of the SKU in the measurement [configured in the store](https://help.vtex.com/en/tutorial/filling-in-system-settings--tutorials_269), which by default is in grams.
 */
WeightKg?: number
/**
 * [Cubic Weight](https://help.vtex.com/en/tutorial/understanding-the-cubic-weight-factor--tutorials_128).
 */
CubicWeight?: number
/**
 * Shows if the SKU is a Kit (`true`) or not (`false`).
 */
IsKit?: boolean
/**
 * SKU Creation Date.
 */
CreationDate?: string
/**
 * Defines the value of the reward for clients who purchase the SKU.
 */
RewardValue?: number
/**
 * SKU estimated arrival date in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) format, when the product is on pre-sale. You must take into consideration both the launch date and the freight calculation for the arrival date.
 */
EstimatedDateArrival?: (null | string)
/**
 * Manufacturer Code.
 */
ManufacturerCode?: string
/**
 * Commercial Condition ID.
 */
CommercialConditionId?: number
/**
 * Measurement Unit.
 */
MeasurementUnit?: string
/**
 * This is the multiple number of SKU. If the Multiplier is 5.0000, the product can be added in multiple quantities of 5, 10, 15, 20, onward.
 */
UnitMultiplier?: number
/**
 * Links an unusual type of SKU to a carrier specialized in delivering it. This field should be filled in with the name of the modal (e.g. "Chemicals" or "Refrigerated products"). To learn more about this feature, read our articles [How the modal works](https://help.vtex.com/en/tutorial/how-does-the-modal-work--tutorials_125) and [Setting up modal for carriers](https://help.vtex.com/en/tutorial/configure-modal--3jhLqxuPhuiq24UoykCcqy).
 */
ModalType?: (null | string)
/**
 * Defines if Kit components can be sold apart.
 */
KitItensSellApart?: boolean
/**
 * Video URLs.
 */
Videos?: (null | string)
}
}
/**
 * 
 * 
 * Creates a new SKU.
 * 
 * If there is a need to create a new SKU with a specific custom ID, specify the `Id` (integer) in the request. Otherwise, VTEX will generate the ID automatically.
 * 
 * ### Request body example (custom ID)
 * 
 * ```json
 * {
 *    "Id": 1, 
 *    "ProductId": 310117069,
 *    "IsActive": false,
 *    "ActivateIfPossible": true,
 *    "Name": "sku test",
 *    "RefId": "125478",
 *    "Ean": "8949461894984",
 *    "PackagedHeight": 10,
 *    "PackagedLength": 10,
 *    "PackagedWidth": 10,
 *    "PackagedWeightKg": 10,
 *    "Height": null,
 *    "Length": null,
 *    "Width": null,
 *    "WeightKg": null,
 *    "CubicWeight": 0.1667,
 *    "IsKit": false,
 *    "CreationDate": null,
 *    "RewardValue": null,
 *    "EstimatedDateArrival": null,
 *    "ManufacturerCode": "123",
 *    "CommercialConditionId": 1,
 *    "MeasurementUnit": "un",
 *    "UnitMultiplier": 2.0000,
 *    "ModalType": null,
 *    "KitItensSellApart": false,
 *    "Videos": [ "https://www.youtube.com/" ]
 * }
 * ``` 
 * 
 * ### Request body example (automatically generated ID)
 * 
 * ```json
 * {
 *    "ProductId": 310117069,
 *    "IsActive": false,
 *    "ActivateIfPossible": true,
 *    "Name": "sku test",
 *    "RefId": "125478",
 *    "Ean": "8949461894984",
 *    "PackagedHeight": 10,
 *    "PackagedLength": 10,
 *    "PackagedWidth": 10,
 *    "PackagedWeightKg": 10,
 *    "Height": null,
 *    "Length": null,
 *    "Width": null,
 *    "WeightKg": null,
 *    "CubicWeight": 0.1667,
 *    "IsKit": false,
 *    "CreationDate": null,
 *    "RewardValue": null,
 *    "EstimatedDateArrival": null,
 *    "ManufacturerCode": "123",
 *    "CommercialConditionId": 1,
 *    "MeasurementUnit": "un",
 *    "UnitMultiplier": 2.0000,
 *    "ModalType": null,
 *    "KitItensSellApart": false,
 *    "Videos": [ "https://www.youtube.com/" ]
 * }
 * ``` 
 * 
 * ### Response body example
 * 
 * ```json
 * {
 *    "Id":1,
 *    "ProductId": 310117069,
 *    "IsActive": false,
 *    "ActivateIfPossible": true,
 *    "Name": "sku test",
 *    "RefId": "125478",
 *    "Ean": "8949461894984",
 *    "PackagedHeight": 10,
 *    "PackagedLength": 10,
 *    "PackagedWidth": 10,
 *    "PackagedWeightKg": 10,
 *    "Height": null,
 *    "Length": null,
 *    "Width": null,
 *    "WeightKg": null,
 *    "CubicWeight": 0.1667,
 *    "IsKit": false,
 *    "CreationDate": null,
 *    "RewardValue": null,
 *    "EstimatedDateArrival": null,
 *    "ManufacturerCode": "123",
 *    "CommercialConditionId": 1,
 *    "MeasurementUnit": "un",
 *    "UnitMultiplier": 2.0000,
 *    "ModalType": null,
 *    "KitItensSellApart": false,
 *    "Videos": [ "https://www.youtube.com/" ]
 * }
 * ```
 */
"POST /api/catalog/pvt/stockkeepingunit": {
body: {
/**
 * SKU unique identifier. If not informed, it will be automatically generated by VTEX.
 */
Id?: number
/**
 * ID of the Product associated with this SKU.
 */
ProductId: number
/**
 * Defines if the SKU is active (`true`) or not (`false`). During SKU creation, do not set this field as `true` or you will receive a `400 Bad Request` error. You should activate the SKU afterwards, as explained in [Activating an SKU](https://developers.vtex.com/docs/guides/skus#activating-an-sku).
 */
IsActive?: boolean
/**
 * When set to `true`, this attribute will automatically update the SKU as active once associated with an image or an active component. We recommend setting it to `true`, unless you plan to have an internal workflow to manually activate SKUs.
 */
ActivateIfPossible?: boolean
/**
 * SKU name, meaning the variation of the previously added product. For example: **Product** - _Fridge_, **SKU** - _110V_. Limited to 200 characters.
 */
Name: string
/**
 * Reference code used internally for organizational purposes. Must be unique. Required only if `Ean` is not informed, but can be used alongside `Ean` as well.
 */
RefId?: string
/**
 * EAN code. Required only if `RefId` is not informed, but can be used alongside `RefId` as well.
 */
Ean?: string
/**
 * Height used for shipping calculation.
 */
PackagedHeight: number
/**
 * Length used for shipping calculation.
 */
PackagedLength: number
/**
 * Width used for shipping calculation.
 */
PackagedWidth: number
/**
 * Weight used for shipping calculation, in the measurement [configured in the store](https://help.vtex.com/en/tutorial/filling-in-system-settings--tutorials_269), which by default is in grams. Do not fill in this field with `0` or `null`, because this might result in shipping issues.
 */
PackagedWeightKg: number
/**
 * SKU real height.
 */
Height?: number
/**
 * SKU real length.
 */
Length?: number
/**
 * SKU real width.
 */
Width?: number
/**
 * Weight of the SKU in the measurement [configured in the store](https://help.vtex.com/en/tutorial/filling-in-system-settings--tutorials_269), which by default is in grams.
 */
WeightKg?: number
/**
 * [Cubic weight](https://help.vtex.com/en/tutorial/understanding-the-cubic-weight-factor--tutorials_128).
 */
CubicWeight?: number
/**
 * Flag to set whether the product SKU is made up of one or more SKUs, thereby becoming a bundle. Must be enabled if you are adding a bundle. Once activated, the flag cannot be reverted.
 */
IsKit?: boolean
/**
 * Date and time of the SKU's creation.
 */
CreationDate?: string
/**
 * Credit that the customer receives when finalizing an order of one specific SKU unit. By filling this field out with `1`, the customer gets U$ 1 credit on the site.
 */
RewardValue?: number
/**
 * To add the product as pre-sale, enter the product estimated arrival date in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) format. You must take into consideration both the launch date and the freight calculation for the arrival date.
 */
EstimatedDateArrival?: (null | string)
/**
 * Provided by the manufacturers to identify their product. This field should be filled in if the product has a specific manufacturer’s code.
 */
ManufacturerCode?: string
/**
 * Used to define SKU specific promotions or installment rules. In case of no specific condition, use `1` (default value). This field does not accept `0`. Find out more by reading [Registering a commercial condition](https://help.vtex.com/tutorial/registering-a-commercial-condition--tutorials_445).
 */
CommercialConditionId?: number
/**
 * Used only in cases when you need to convert the unit of measure for sale. If a product is sold in boxes for example, but customers want to buy per square meter (m²). In common cases, use `'un'`.
 */
MeasurementUnit?: string
/**
 * This is the multiple number of SKU. If the Multiplier is 5.0000, the product can be added in multiple quantities of 5, 10, 15, 20, onward.
 */
UnitMultiplier?: number
/**
 * Links an unusual type of SKU to a carrier specialized in delivering it. This field should be filled in with the name of the modal (e.g. "Chemicals" or "Refrigerated products"). To learn more about this feature, read our articles [How the modal works](https://help.vtex.com/en/tutorial/how-does-the-modal-work--tutorials_125) and [Setting up modal for carriers](https://help.vtex.com/en/tutorial/configure-modal--3jhLqxuPhuiq24UoykCcqy).
 */
ModalType?: (null | string)
/**
 * Defines if Kit components can be sold apart.
 */
KitItensSellApart?: boolean
/**
 * Videos URLs
 */
Videos?: string[]
}
response: {
/**
 * SKU unique identifier.
 */
Id?: number
/**
 * ID of the Product associated with this SKU.
 */
ProductId?: number
/**
 * Defines if the SKU is active (`true`) or not (`false`).
 */
IsActive?: boolean
/**
 * When set to `true`, this attribute will automatically update the SKU as active once associated with an image or an active component.
 */
ActivateIfPossible?: boolean
/**
 * SKU name, meaning the variation of the previously added product. For example: **Product** - _Fridge_, **SKU** - _110V_.
 */
Name?: string
/**
 * Reference code used internally for organizational purposes. Must be unique. Required only if `Ean` is not informed, but can be used alongside `Ean` as well.
 */
RefId?: string
/**
 * EAN code. Required only if `RefId` is not informed, but can be used alongside `RefId` as well.
 */
Ean?: string
/**
 * Height used for shipping calculation.
 */
PackagedHeight?: number
/**
 * Length used for shipping calculation.
 */
PackagedLength?: number
/**
 * Width used for shipping calculation.
 */
PackagedWidth?: number
/**
 * Weight used for shipping calculation, in the measurement [configured in the store](https://help.vtex.com/en/tutorial/filling-in-system-settings--tutorials_269), which by default is in grams.
 */
PackagedWeightKg?: number
/**
 * SKU real height.
 */
Height?: number
/**
 * SKU real length.
 */
Length?: number
/**
 * SKU real width.
 */
Width?: number
/**
 * Weight of the SKU in the measurement [configured in the store](https://help.vtex.com/en/tutorial/filling-in-system-settings--tutorials_269), which by default is in grams.
 */
WeightKg?: number
/**
 * [Cubic weight](https://help.vtex.com/en/tutorial/understanding-the-cubic-weight-factor--tutorials_128).
 */
CubicWeight?: number
/**
 * Flag to set whether the product SKU is made up of one or more SKUs, thereby becoming a bundle. Must be enabled if you are adding a bundle. Once activated, the flag cannot be reverted.
 */
IsKit?: boolean
/**
 * Date and time of the SKU's creation.
 */
CreationDate?: string
/**
 * Credit that the customer receives when finalizing an order of one specific SKU unit. By filling this field out with `1`, the customer gets U$ 1 credit on the site.
 */
RewardValue?: number
/**
 * SKU estimated arrival date in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) format, when the product is on pre-sale. You must take into consideration both the launch date and the freight calculation for the arrival date.
 */
EstimatedDateArrival?: (null | string)
/**
 * Provided by the manufacturers to identify their product. This field should be filled in if the product has a specific manufacturer’s code.
 */
ManufacturerCode?: string
/**
 * Used to define SKU specific promotions or installment rules. In case of no specific condition, use `1` (default value). This field does not accept `0`. Find out more by reading [Registering a commercial condition](https://help.vtex.com/tutorial/registering-a-commercial-condition--tutorials_445).
 */
CommercialConditionId?: number
/**
 * Used only in cases when you need to convert the unit of measure for sale. If a product is sold in boxes for example, but customers want to buy per square meter (m²). In common cases, use `'un'`.
 */
MeasurementUnit?: string
/**
 * This is the multiple number of SKU. If the Multiplier is 5.0000, the product can be added in multiple quantities of 5, 10, 15, 20, onward.
 */
UnitMultiplier?: number
/**
 * Links an unusual type of SKU to a carrier specialized in delivering it. This field should be filled in with the name of the modal (e.g. "Chemicals" or "Refrigerated products"). To learn more about this feature, read our articles [How the modal works](https://help.vtex.com/en/tutorial/how-does-the-modal-work--tutorials_125) and [Setting up modal for carriers](https://help.vtex.com/en/tutorial/configure-modal--3jhLqxuPhuiq24UoykCcqy).
 */
ModalType?: (null | string)
/**
 * Defines if Kit components can be sold apart.
 */
KitItensSellApart?: boolean
/**
 * Videos URLs.
 */
Videos?: string[]
}
}
/**
 * Retrieves an SKU ID by the SKU's Reference ID. 
 * 
 * ### Response body example
 * 
 * ```json
 * "310118450"
 * ```
 */
"GET /api/catalog_system/pvt/sku/stockkeepingunitidbyrefid/:refId": {
/**
 * SKU ID.
 */
response: string
}
/**
 * Retrieves an SKU by its Alternate ID.
 * 
 * ### Response body example
 * 
 * ```json
 * {
 *     "Id": 310118450,
 *     "ProductId": 2,
 *     "NameComplete": "Caixa de Areia Azul Petmate sku test",
 *     "ComplementName": "",
 *     "ProductName": "Caixa de Areia Azul Petmate",
 *     "ProductDescription": "",
 *     "ProductRefId": "",
 *     "TaxCode": "",
 *     "SkuName": "sku test",
 *     "IsActive": true,
 *     "IsTransported": true,
 *     "IsInventoried": true,
 *     "IsGiftCardRecharge": false,
 *     "ImageUrl": "https://lojadobreno.vteximg.com.br/arquivos/ids/155451-55-55/caixa-areia-azul-petmate.jpg?v=637139451191670000",
 *     "DetailUrl": "/caixa-de-areia-azul-petmate/p",
 *     "CSCIdentification": null,
 *     "BrandId": "2000005",
 *     "BrandName": "Petmate",
 *     "IsBrandActive": true,
 *     "Dimension": {
 *         "cubicweight": 0.2083,
 *         "height": 10.0000,
 *         "length": 10.0000,
 *         "weight": 10.0000,
 *         "width": 10.0000
 *     },
 *     "RealDimension": {
 *         "realCubicWeight": 0.000,
 *         "realHeight": 0.0,
 *         "realLength": 0.0,
 *         "realWeight": 0.0,
 *         "realWidth": 0.0
 *     },
 *     "ManufacturerCode": "123",
 *     "IsKit": false,
 *     "KitItems": [],
 *     "Services": [],
 *     "Categories": [],
 *     "CategoriesFullPath": [
 *         "/3/15/",
 *         "/3/",
 *         "/1/"
 *     ],
 *     "Attachments": [],
 *     "Collections": [],
 *     "SkuSellers": [
 *         {
 *             "SellerId": "1",
 *             "StockKeepingUnitId": 310118450,
 *             "SellerStockKeepingUnitId": "310118450",
 *             "IsActive": true,
 *             "FreightCommissionPercentage": 0.0,
 *             "ProductCommissionPercentage": 0.0
 *         }
 *     ],
 *     "SalesChannels": [
 *         1,
 *         3
 *     ],
 *     "Images": [
 *         {
 *             "ImageUrl": "https://lojadobreno.vteximg.com.br/arquivos/ids/155451/caixa-areia-azul-petmate.jpg?v=637139451191670000",
 *             "ImageName": null,
 *             "FileId": 155451
 *         }
 *     ],
 *     "Videos": [],
 *     "SkuSpecifications": [],
 *     "ProductSpecifications": [],
 *     "ProductClustersIds": "151,158",
 *     "PositionsInClusters": {
 *         "151": 1,
 *         "158": 2
 *     },
 *     "ProductClusterNames": {
 *         "151": "asdfghj",
 *         "158": "Coleção halloween"
 *     },
 *     "ProductClusterHighlights": {
 *         "151": "asdfghj"
 *     },
 *     "ProductCategoryIds": "/3/15/",
 *     "IsDirectCategoryActive": true,
 *     "ProductGlobalCategoryId": 5000,
 *     "ProductCategories": {
 *         "15": "Caixa de Areia",
 *         "3": "Higiene",
 *         "1": "Alimentação"
 *     },
 *     "CommercialConditionId": 1,
 *     "RewardValue": 0.0,
 *     "AlternateIds": {
 *         "RefId": "1"
 *     },
 *     "AlternateIdValues": [
 *         "1"
 *     ],
 *     "EstimatedDateArrival": null,
 *     "MeasurementUnit": "un",
 *     "UnitMultiplier": 1.0000,
 *     "InformationSource": null,
 *     "ModalType": null,
 *     "KeyWords": "",
 *     "ReleaseDate": "2020-01-06T00:00:00Z",
 *     "ProductIsVisible": true,
 *     "ShowIfNotAvailable": true,
 *     "IsProductActive": true,
 *     "ProductFinalScore": 0
 * }
 * ```
 */
"GET /api/catalog_system/pvt/sku/stockkeepingunitbyalternateId/:alternateId": {
response: GetSKUAltID
}
/**
 * Retrieves a list with the SKUs related to a product by the product's ID.
 * 
 * ### Response body example
 * 
 * ```json
 * [
 *     {
 *         "IsPersisted": true,
 *         "IsRemoved": false,
 *         "Id": 2000035,
 *         "ProductId": 2000024,
 *         "IsActive": true,
 *         "Name": "33 - Preto",
 *         "Height": 8,
 *         "RealHeight": null,
 *         "Width": 15,
 *         "RealWidth": null,
 *         "Length": 8,
 *         "RealLength": null,
 *         "WeightKg": 340,
 *         "RealWeightKg": null,
 *         "ModalId": 1,
 *         "RefId": "",
 *         "CubicWeight": 0.2,
 *         "IsKit": false,
 *         "IsDynamicKit": null,
 *         "InternalNote": null,
 *         "DateUpdated": "2015-11-06T19:10:00",
 *         "RewardValue": 0.01,
 *         "CommercialConditionId": 1,
 *         "EstimatedDateArrival": "",
 *         "FlagKitItensSellApart": false,
 *         "ManufacturerCode": "",
 *         "ReferenceStockKeepingUnitId": null,
 *         "Position": 0,
 *         "EditionSkuId": null,
 *         "ApprovedAdminId": 123,
 *         "EditionAdminId": 123,
 *         "ActivateIfPossible": true,
 *         "SupplierCode": null,
 *         "MeasurementUnit": "un",
 *         "UnitMultiplier": 2.0000,
 *         "IsInventoried": null,
 *         "IsTransported": null,
 *         "IsGiftCardRecharge": null,
 *         "ModalType": ""
 *     }
 * ]
 * ```
 */
"GET /api/catalog_system/pvt/sku/stockkeepingunitByProductId/:productId": {
response: SkulistbyProductId[]
}
/**
 * Receives a list of Reference IDs and returns a list with the corresponding SKU IDs.
 * 
 * >⚠️ The list of Reference IDs in the request body cannot have repeated Reference IDs, or the API will return an error 500. 
 * 
 * ## Request body example
 * 
 * ```json
 * [
 *     "123",
 *     "D25133K-B2",
 *     "14-556",
 *     "DCF880L2-BR"
 * ]
 * ```
 * 
 * ### Response body example
 * 
 * ```json
 * {
 *     "123": "435",
 *     "D25133K-B2": "4351",
 *     "14-556": "3155",
 *     "DCF880L2-BR": "4500"
 * }
 * ```
 */
"POST /api/catalog_system/pub/sku/stockkeepingunitidsbyrefids": {
/**
 * Array with SKU reference IDs from which you need to retrieve the related SKU IDs. Don't repeat values in the array, or the API will return an error 500.
 */
body: string[]
/**
 * Object composed by a list of SKU IDs related to each Reference ID list searched. Structure: "{RefId}": "{SkuId}".
 */
response: {
/**
 * Reference ID.
 */
[k: string]: string
}
}
/**
 * Retrieves a specific SKU by its ID.
 * 
 * ### Response body example
 * 
 * ```json
 * {
 *     "Id": 1,
 *     "ProductId": 1,
 *     "IsActive": true,
 *     "ActivateIfPossible": true,
 *     "Name": "Ração Royal Canin Feline Urinary 500g",
 *     "RefId": "0001",
 *     "PackagedHeight": 6.5000,
 *     "PackagedLength": 24.0000,
 *     "PackagedWidth": 14.0000,
 *     "PackagedWeightKg": 550.0000,
 *     "Height": 2.2000,
 *     "Length": 4.4000,
 *     "Width": 3.3000,
 *     "WeightKg": 1.1000,
 *     "CubicWeight": 0.4550,
 *     "IsKit": false,
 *     "CreationDate": "2021-06-08T15:25:00",
 *     "RewardValue": null,
 *     "EstimatedDateArrival": null,
 *     "ManufacturerCode": "",
 *     "CommercialConditionId": 1,
 *     "MeasurementUnit": "un",
 *     "UnitMultiplier": 300.0000,
 *     "ModalType": null,
 *     "KitItensSellApart": false,
 *     "Videos": [
 *         "www.google.com"
 *     ]
 * }
 * ```  
 * > 📘 Onboarding guide 
 * >
 * > Check the new [Catalog onboarding guide](https://developers.vtex.com/vtex-rest-api/docs/catalog-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Catalog and is organized by focusing on the developer's journey.
 */
"GET /api/catalog/pvt/stockkeepingunit/:skuId": {
response: {
/**
 * SKU unique identifier.
 */
Id?: number
/**
 * ID of the Product associated with this SKU.
 */
ProductId?: number
/**
 * Shows if the SKU is active (`true`) or not (`false`).
 */
IsActive?: boolean
/**
 * When set to `true`, this attribute will automatically update the SKU as active once associated with an image or an active component.
 */
ActivateIfPossible?: boolean
/**
 * SKU name, meaning the variation of the previously added product. For example: **Product** - _Fridge_, **SKU** - _110V_.
 */
Name?: string
/**
 * Reference code used internally for organizational purposes. Must be unique. It is not required only if EAN code already exists. If not, this field must be provided.
 */
RefId?: string
/**
 * Height used for shipping calculation.
 */
PackagedHeight?: number
/**
 * Length used for shipping calculation.
 */
PackagedLength?: number
/**
 * Width used for shipping calculation.
 */
PackagedWidth?: number
/**
 * Weight used for shipping calculation.
 */
PackagedWeightKg?: number
/**
 * SKU real height.
 */
Height?: number
/**
 * SKU real length.
 */
Length?: number
/**
 * SKU real width.
 */
Width?: number
/**
 * Weight of the SKU in the measurement [configured in the store](https://help.vtex.com/en/tutorial/filling-in-system-settings--tutorials_269), which by default is in grams.
 */
WeightKg?: number
/**
 * [Cubic weight](https://help.vtex.com/en/tutorial/understanding-the-cubic-weight-factor--tutorials_128).
 */
CubicWeight?: number
/**
 * Flag to set whether the product SKU is made up of one or more SKUs, thereby becoming a bundle. Must be enabled if you are adding a bundle. Once activated, the flag cannot be reverted.
 */
IsKit?: boolean
/**
 * Date and time of the SKU's creation.
 */
CreationDate?: string
/**
 * Credit that the customer receives when finalizing an order of one specific SKU unit. By filling this field out with `1`, the customer gets U$ 1 credit on the site.
 */
RewardValue?: number
/**
 * SKU estimated arrival date in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) format, when the product is on pre-sale. You must take into consideration both the launch date and the freight calculation for the arrival date.
 */
EstimatedDateArrival?: (null | string)
/**
 * Provided by the manufacturers to identify their product. This field should be filled in if the product has a specific manufacturer’s code.
 */
ManufacturerCode?: string
/**
 * Used to define SKU specific promotions or installment rules. In case of no specific condition, use `1` (default value). This field does not accept `0`. Find out more by reading [Registering a commercial condition](https://help.vtex.com/tutorial/registering-a-commercial-condition--tutorials_445).
 */
CommercialConditionId?: number
/**
 * Used only in cases when you need to convert the unit of measure for sale. If a product is sold in boxes for example, but customers want to buy per square meter (m²). In common cases, use `'un'`.
 */
MeasurementUnit?: string
/**
 * This is the multiple number of SKU. If the Multiplier is 5.0000, the product can be added in multiple quantities of 5, 10, 15, 20, onward.
 */
UnitMultiplier?: number
/**
 * Links an unusual type of SKU to a carrier specialized in delivering it. This field should be filled in with the name of the modal (e.g. "Chemicals" or "Refrigerated products"). To learn more about this feature, read our articles [How the modal works](https://help.vtex.com/en/tutorial/how-does-the-modal-work--tutorials_125) and [Setting up modal for carriers](https://help.vtex.com/en/tutorial/configure-modal--3jhLqxuPhuiq24UoykCcqy).
 */
ModalType?: (null | string)
/**
 * Defines if Kit components can be sold apart.
 */
KitItensSellApart?: boolean
/**
 * Videos URLs.
 */
Videos?: string[]
}
}
/**
 * Updates an existing SKU. 
 * 
 * ### Request body example
 * 
 * ```json
 * {
 *    "Id": 310118448,
 *    "ProductId": 310117069,
 *    "IsActive": true,
 *    "ActivateIfPossible": true,
 *    "Name": "sku test",
 *    "RefId": "125478",
 *    "PackagedHeight": 10,
 *    "PackagedLength": 10,
 *    "PackagedWidth": 10,
 *    "PackagedWeightKg": 10,
 *    "Height": null,
 *    "Length": null,
 *    "Width": null,
 *    "WeightKg": null,
 *    "CubicWeight": 0.1667,
 *    "IsKit": false,
 *    "CreationDate": null,
 *    "RewardValue": null,
 *    "EstimatedDateArrival": null,
 *    "ManufacturerCode": "123",
 *    "CommercialConditionId": 1,
 *    "MeasurementUnit": "un",
 *    "UnitMultiplier": 2.0000,
 *    "ModalType": null,
 *    "KitItensSellApart": false,
 *    "Videos": [ "https://www.youtube.com/" ]
 * }
 * ```
 * 
 * ### Response body example
 * 
 * ```json
 * {
 *     "Id": 310118449,
 *     "ProductId": 1,
 *     "IsActive": true,
 *     "ActivateIfPossible": true,
 *     "Name": "sku test",
 *     "RefId": "1254789",
 *     "PackagedHeight": 10.0,
 *     "PackagedLength": 10.0,
 *     "PackagedWidth": 10.0,
 *     "PackagedWeightKg": 10.0,
 *     "Height": null,
 *     "Length": null,
 *     "Width": null,
 *     "WeightKg": null,
 *     "CubicWeight": 0.1667,
 *     "IsKit": false,
 *     "CreationDate": "2020-04-22T12:12:47.5219561",
 *     "RewardValue": null,
 *     "EstimatedDateArrival": null,
 *     "ManufacturerCode": "123",
 *     "CommercialConditionId": 1,
 *     "MeasurementUnit": "un",
 *     "UnitMultiplier": 2.0000,
 *     "ModalType": null,
 *     "KitItensSellApart": false,
 *     "Videos": [ "https://www.youtube.com/" ]
 * }
 * ```
 */
"PUT /api/catalog/pvt/stockkeepingunit/:skuId": {
body: {
/**
 * ID of the Product associated with this SKU.
 */
ProductId: number
/**
 * Shows if the SKU is active (`true`) or not (`false`).
 */
IsActive?: boolean
/**
 * When set to `true`, this attribute will automatically update the SKU as active once associated with an image or an active component.
 */
ActivateIfPossible?: boolean
/**
 * SKU name, meaning the variation of the previously added product. For example: **Product** - _Fridge_, **SKU** - _110V_.
 */
Name: string
/**
 * Reference code used internally for organizational purposes. Must be unique. It is not required only if EAN code already exists. If not, this field must be provided.
 */
RefId?: string
/**
 * Height used for shipping calculation.
 */
PackagedHeight: number
/**
 * Length used for shipping calculation.
 */
PackagedLength: number
/**
 * Width used for shipping calculation.
 */
PackagedWidth: number
/**
 * Weight used for shipping calculation, in the measurement [configured in the store](https://help.vtex.com/en/tutorial/filling-in-system-settings--tutorials_269), which by default is in grams. Do not fill in this field with `0` or `null`, because this might result in shipping issues.
 */
PackagedWeightKg: number
/**
 * SKU real height.
 */
Height?: number
/**
 * SKU real length.
 */
Length?: number
/**
 * SKU real width.
 */
Width?: number
/**
 * Weight of the SKU in the measurement [configured in the store](https://help.vtex.com/en/tutorial/filling-in-system-settings--tutorials_269), which by default is in grams.
 */
WeightKg?: number
/**
 * [Cubic weight](https://help.vtex.com/en/tutorial/understanding-the-cubic-weight-factor--tutorials_128).
 */
CubicWeight?: number
/**
 * Flag to set whether the product SKU is made up of one or more SKUs, thereby becoming a bundle. Must be enabled if you are adding a bundle. Once activated, the flag cannot be reverted.
 */
IsKit?: boolean
/**
 * Date and time of the SKU's creation.
 */
CreationDate?: string
/**
 * Credit that the customer receives when finalizing an order of one specific SKU unit. By filling this field out with `1`, the customer gets U$ 1 credit on the site.
 */
RewardValue?: number
/**
 * To add the product as pre-sale, enter the product estimated arrival date in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) format. You must take into consideration both the launch date and the freight calculation for the arrival date.
 */
EstimatedDateArrival?: (null | string)
/**
 * Provided by the manufacturers to identify their product. This field should be filled in if the product has a specific manufacturer’s code.
 */
ManufacturerCode?: string
/**
 * Used to define SKU specific promotions or installment rules. In case of no specific condition, use `1` (default value). This field does not accept `0`. Find out more by reading [Registering a commercial condition](https://help.vtex.com/tutorial/registering-a-commercial-condition--tutorials_445).
 */
CommercialConditionId?: number
/**
 * Used only in cases when you need to convert the unit of measure for sale. If a product is sold in boxes for example, but customers want to buy per square meter (m²). In common cases, use `'un'`.
 */
MeasurementUnit?: string
/**
 * This is the multiple number of SKU. If the Multiplier is 5.0000, the product can be added in multiple quantities of 5, 10, 15, 20, onward.
 */
UnitMultiplier?: number
/**
 * Links an unusual type of SKU to a carrier specialized in delivering it. This field should be filled in with the name of the modal (e.g. "Chemicals" or "Refrigerated products"). To learn more about this feature, read our articles [How the modal works](https://help.vtex.com/en/tutorial/how-does-the-modal-work--tutorials_125) and [Setting up modal for carriers](https://help.vtex.com/en/tutorial/configure-modal--3jhLqxuPhuiq24UoykCcqy).
 */
ModalType?: (null | string)
/**
 * Defines if Kit components can be sold apart.
 */
KitItensSellApart?: boolean
/**
 * Videos URLs
 */
Videos?: string[]
}
response: {
/**
 * SKU unique identifier.
 */
Id?: number
/**
 * ID of the Product associated with this SKU.
 */
ProductId?: number
/**
 * Shows if the SKU is active (`true`) or not (`false`).
 */
IsActive?: boolean
/**
 * When set to `true`, this attribute will automatically update the SKU as active once associated with an image or an active component.
 */
ActivateIfPossible?: boolean
/**
 * SKU name, meaning the variation of the previously added product. For example: **Product** - _Fridge_, **SKU** - _110V_.
 */
Name?: string
/**
 * Reference code used internally for organizational purposes. Must be unique. It is not required only if EAN code already exists. If not, this field must be provided.
 */
RefId?: string
/**
 * Height used for shipping calculation.
 */
PackagedHeight?: number
/**
 * Length used for shipping calculation.
 */
PackagedLength?: number
/**
 * Width used for shipping calculation.
 */
PackagedWidth?: number
/**
 * Weight used for shipping calculation, in the measurement [configured in the store](https://help.vtex.com/en/tutorial/filling-in-system-settings--tutorials_269), which by default is in grams.
 */
PackagedWeightKg?: number
/**
 * SKU real height.
 */
Height?: number
/**
 * SKU real length.
 */
Length?: number
/**
 * SKU real width.
 */
Width?: number
/**
 * Weight of the SKU in the measurement [configured in the store](https://help.vtex.com/en/tutorial/filling-in-system-settings--tutorials_269), which by default is in grams.
 */
WeightKg?: number
/**
 * [Cubic weight](https://help.vtex.com/en/tutorial/understanding-the-cubic-weight-factor--tutorials_128).
 */
CubicWeight?: number
/**
 * Flag to set whether the product SKU is made up of one or more SKUs, thereby becoming a bundle. Must be enabled if you are adding a bundle. Once activated, the flag cannot be reverted.
 */
IsKit?: boolean
/**
 * Date and time of the SKU's creation.
 */
CreationDate?: string
/**
 * Credit that the customer receives when finalizing an order of one specific SKU unit. By filling this field out with `1`, the customer gets U$ 1 credit on the site.
 */
RewardValue?: number
/**
 * SKU estimated arrival date in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) format, when the product is on pre-sale. You must take into consideration both the launch date and the freight calculation for the arrival date.
 */
EstimatedDateArrival?: (null | string)
/**
 * Provided by the manufacturers to identify their product. This field should be filled in if the product has a specific manufacturer’s code.
 */
ManufacturerCode?: string
/**
 * Used to define SKU specific promotions or installment rules. In case of no specific condition, use `1` (default value). This field does not accept `0`. Find out more by reading [Registering a commercial condition](https://help.vtex.com/tutorial/registering-a-commercial-condition--tutorials_445).
 */
CommercialConditionId?: number
/**
 * Used only in cases when you need to convert the unit of measure for sale. If a product is sold in boxes for example, but customers want to buy per square meter (m²). In common cases, use `'un'`.
 */
MeasurementUnit?: string
/**
 * This is the multiple number of SKU. If the Multiplier is 5.0000, the product can be added in multiple quantities of 5, 10, 15, 20, onward.
 */
UnitMultiplier?: number
/**
 * Links an unusual type of SKU to a carrier specialized in delivering it. This field should be filled in with the name of the modal (e.g. "Chemicals" or "Refrigerated products"). To learn more about this feature, read our articles [How the modal works](https://help.vtex.com/en/tutorial/how-does-the-modal-work--tutorials_125) and [Setting up modal for carriers](https://help.vtex.com/en/tutorial/configure-modal--3jhLqxuPhuiq24UoykCcqy).
 */
ModalType?: (null | string)
/**
 * Defines if Kit components can be sold apart.
 */
KitItensSellApart?: boolean
/**
 * Videos URLs.
 */
Videos?: string[]
}
}
/**
 * Retrieves an existing SKU Complement by its SKU ID. 
 * 
 * ## Response body example
 * 
 * ```json
 * [
 *     {
 *         "Id": 61,
 *         "SkuId": 7,
 *         "ParentSkuId": 1,
 *         "ComplementTypeId": 1
 *     }
 * ]
 * ```
 */
"GET /api/catalog/pvt/stockkeepingunit/:skuId/complement": {
response: SkuComplement
}
/**
 * Retrieves all the existing SKU Complements with the same Complement Type ID of a specific SKU. 
 * 
 * ## Response body example
 * 
 * ```json
 * [
 *     {
 *         "Id": 61,
 *         "SkuId": 7,
 *         "ParentSkuId": 1,
 *         "ComplementTypeId": 1
 *     }
 * ]
 * ```
 */
"GET /api/catalog/pvt/stockkeepingunit/:skuId/complement/:complementTypeId": {
response: SkuComplement
}
/**
 * Retrieves all the existing SKU complements with the same complement type ID of a specific SKU. 
 *  
 * ## Response body example
 * 
 * ```json
 * {
 *     "ParentSkuId": 1,
 *     "ComplementSkuIds": [
 *         7
 *     ],
 *     "Type": "1"
 * }
 * ```
 */
"GET /api/catalog_system/pvt/sku/complements/:parentSkuId/:type": {
response: {
/**
 * ID of the Parent SKU, where the Complement is inserted.
 */
ParentSkuId: number
/**
 * Array with SKU complements IDs.
 */
ComplementSkuIds: number[]
/**
 * Complement Type ID. This represents the type of the complement. The possible values are: `1` for Accessory; `2` for Suggestion; `3` for Similar Product; `5` for Show Together.
 */
Type: string
}
}
/**
 * Creates a new SKU Complement on a Parent SKU. 
 * 
 * ## Request body example
 * 
 * ```json
 * {
 *     "SkuId": 2,
 *     "ParentSkuId": 1,
 *     "ComplementTypeId": 2
 * }
 * ```
 *  
 * ## Response body example
 * 
 * ```json
 * {
 *     "Id": 62,
 *     "SkuId": 2,
 *     "ParentSkuId": 1,
 *     "ComplementTypeId": 2
 * }
 * ```
 */
"POST /api/catalog/pvt/skucomplement": {
body: {
/**
 * ID of the Parent SKU, where the Complement is inserted.
 */
ParentSkuId: number
/**
 * ID of the SKU which will be inserted as a Complement in the Parent SKU.
 */
SkuId: number
/**
 * Complement Type ID. This represents the type of the complement. The possible values are: `1` for Accessory; `2` for Suggestion; `3` for Similar Product; `5` for Show Together.
 */
ComplementTypeId: number
}
response: SkuComplement
}
/**
 * Retrieves an existing SKU Complement by its SKU Complement ID. 
 *  
 * ## Response body example
 * 
 * ```json
 * {
 *     "Id": 62,
 *     "SkuId": 2,
 *     "ParentSkuId": 1,
 *     "ComplementTypeId": 2
 * }
 * ```
 */
"GET /api/catalog/pvt/skucomplement/:skuComplementId": {
response: SkuComplement
}
/**
 * Deletes a previously existing SKU Complement by SKU Complement ID.
 */
"DELETE /api/catalog/pvt/skucomplement/:skuComplementId": {

}
/**
 * Retrieves an SKU by its EAN ID. 
 * ## Response body example
 * 
 * ```json
 * {
 *     "Id": 2001773,
 *     "ProductId": 2001426,
 *     "NameComplete": "Tabela de Basquete",
 *     "ProductName": "Tabela de Basquete",
 *     "ProductDescription": "Tabela de Basquete",
 *     "SkuName": "Tabela de Basquete",
 *     "IsActive": true,
 *     "IsTransported": true,
 *     "IsInventoried": true,
 *     "IsGiftCardRecharge": false,
 *     "ImageUrl": "http://ambienteqa.vteximg.com.br/arquivos/ids/168952-55-55/7508800GG.jpg",
 *     "DetailUrl": "/tabela-de-basquete/p",
 *     "CSCIdentification": null,
 *     "BrandId": "2000018",
 *     "BrandName": "MARCA ARGOLO TESTE",
 *     "Dimension": {
 *         "cubicweight": 81.6833,
 *         "height": 65,
 *         "length": 58,
 *         "weight": 10000,
 *         "width": 130
 *     },
 *     "RealDimension": {
 *         "realCubicWeight": 274.1375,
 *         "realHeight": 241,
 *         "realLength": 65,
 *         "realWeight": 9800,
 *         "realWidth": 105
 *     },
 *     "ManufacturerCode": "",
 *     "IsKit": false,
 *     "KitItems": [],
 *     "Services": [],
 *     "Categories": [],
 *     "Attachments": [
 *         {
 *             "Id": 3,
 *             "Name": "Mensagem",
 *             "Keys": [
 *                 "nome;20",
 *                 "foto;40"
 *             ],
 *             "Fields": [
 *                 {
 *                     "FieldName": "nome",
 *                     "MaxCaracters": "20",
 *                     "DomainValues": "Adalberto,Pedro,João"
 *                 },
 *                 {
 *                     "FieldName": "foto",
 *                     "MaxCaracters": "40",
 *                     "DomainValues": null
 *                 }
 *             ],
 *             "IsActive": true,
 *             "IsRequired": false
 *         }
 *     ],
 *     "Collections": [],
 *     "SkuSellers": [
 *         {
 *             "SellerId": "1",
 *             "StockKeepingUnitId": 2001773,
 *             "SellerStockKeepingUnitId": "2001773",
 *             "IsActive": true,
 *             "FreightCommissionPercentage": 0,
 *             "ProductCommissionPercentage": 0
 *         }
 *     ],
 *     "SalesChannels": [
 *         1,
 *         2,
 *         3,
 *         10
 *     ],
 *     "Images": [
 *         {
 *             "ImageUrl": "http://ambienteqa.vteximg.com.br/arquivos/ids/168952/7508800GG.jpg",
 *             "ImageName": "",
 *             "FileId": 168952
 *         },
 *         {
 *             "ImageUrl": "http://ambienteqa.vteximg.com.br/arquivos/ids/168953/7508800_1GG.jpg",
 *             "ImageName": "",
 *             "FileId": 168953
 *         },
 *         {
 *             "ImageUrl": "http://ambienteqa.vteximg.com.br/arquivos/ids/168954/7508800_2GG.jpg",
 *             "ImageName": "",
 *             "FileId": 168954
 *         }
 *     ],
 *     "SkuSpecifications": [
 *         {
 *             "FieldId": 102,
 *             "FieldName": "Cor",
 *             "FieldValueIds": [
 *                 266
 *             ],
 *             "FieldValues": [
 *                 "Padrão"
 *             ]
 *         }
 *     ],
 *     "ProductSpecifications": [
 *         {
 *             "FieldId": 7,
 *             "FieldName": "Faixa Etária",
 *             "FieldValueIds": [
 *                 58,
 *                 56,
 *                 55,
 *                 52
 *             ],
 *             "FieldValues": [
 *                 "5 a 6 anos",
 *                 "7 a 8 anos",
 *                 "9 a 10 anos",
 *                 "Acima de 10 anos"
 *             ]
 *         },
 *         {
 *             "FieldId": 23,
 *             "FieldName": "Fabricante",
 *             "FieldValueIds": [],
 *             "FieldValues": [
 *                 "Xalingo"
 *             ]
 *         }
 *     ],
 *     "ProductClustersIds": "176,187,192,194,211,217,235,242",
 *     "ProductCategoryIds": "/59/",
 *     "ProductGlobalCategoryId": null,
 *     "ProductCategories": {
 *         "59": "Brinquedos"
 *     },
 *     "CommercialConditionId": 1,
 *     "RewardValue": 100.0,
 *     "AlternateIds": {
 *         "Ean": "8781",
 *         "RefId": "878181"
 *     },
 *     "AlternateIdValues": [
 *         "8781",
 *         "878181"
 *     ],
 *     "EstimatedDateArrival": "",
 *     "MeasurementUnit": "un",
 *     "UnitMultiplier": 2.0000,
 *     "InformationSource": null,
 *     "ModalType": ""
 * }
 * ```
 */
"GET /api/catalog_system/pvt/sku/stockkeepingunitbyean/:ean": {
response: GetSKUAltID
}
/**
 * Retrieves the EAN of the SKU. 
 * ## Response body example
 * 
 * ```json
 * [
 *     "1234567890123"
 * ]
 * ```
 */
"GET /api/catalog/pvt/stockkeepingunit/:skuId/ean": {
/**
 * Array with EANs associated with the SKU.
 */
response: string[]
}
/**
 * Deletes all EAN values of an SKU.
 */
"DELETE /api/catalog/pvt/stockkeepingunit/:skuId/ean": {

}
/**
 * Creates or updates the EAN value of an SKU.
 */
"POST /api/catalog/pvt/stockkeepingunit/:skuId/ean/:ean": {

}
/**
 * Deletes the EAN value of an SKU.
 */
"DELETE /api/catalog/pvt/stockkeepingunit/:skuId/ean/:ean": {

}
/**
 * Associates an existing SKU to an existing Attachment. 
 * ## Request body example
 * 
 * ```json
 * {
 *     "AttachmentId": 1,
 *     "SkuId": 7
 * }
 * ```
 * 
 * ## Response body example
 * 
 * ```json
 * {
 *     "Id": 31,
 *     "AttachmentId": 1,
 *     "SkuId": 7
 * }
 * ```
 */
"POST /api/catalog/pvt/skuattachment": {
body: {
/**
 * Attachment ID.
 */
AttachmentId: number
/**
 * Unique identifier of an SKU.
 */
SkuId: number
}
/**
 * Object containing information about the association between the SKU and the attachment.
 */
response: {
/**
 * Identifier of the SKU's association to the attachment.
 */
Id?: number
/**
 * Attachment ID.
 */
AttachmentId?: number
/**
 * Unique identifier of the SKU.
 */
SkuId?: number
}
}
/**
 * Dissociates attachments and SKUs based on an SKU ID or an attachment ID.
 */
"DELETE /api/catalog/pvt/skuattachment": {
searchParams: {
/**
 * SKU ID. By using this query param, you can dissociate all the attachments from an SKU based on its SKU ID.
 */
skuId?: number
/**
 * Attachment ID. By using this query param, you can dissociate the given attachment from all previously associated SKUs.
 */
attachmentId?: number
}
}
/**
 * Retrieves existing SKU Attachments by SKU ID. 
 * ## Response body example
 * 
 * ```json
 * [
 *     {
 *         "Id": 97,
 *         "AttachmentId": 1,
 *         "SkuId": 1
 *     }
 * ]
 * ```
 */
"GET /api/catalog/pvt/stockkeepingunit/:skuId/attachment": {
/**
 * Array of objects with information about the association between the attachments and the SKU.
 */
response: {
/**
 * Identifier of the SKU's association to the attachment.
 */
Id?: number
/**
 * Attachment ID.
 */
AttachmentId?: number
/**
 * Unique identifier of the SKU.
 */
SkuId?: number
}[]
}
/**
 * Deletes the association of an SKU to an Attachment.
 */
"DELETE /api/catalog/pvt/skuattachment/:skuAttachmentAssociationId": {

}
/**
 * Associates attachments to an SKU based on a given SKU ID and attachment names.
 * This request removes existing SKU attachment associations and recreates the associations with the attachments being sent. 
 * ## Request body example
 * 
 * ```json
 * {
 *     "SkuId": 1,
 *     "AttachmentNames": [
 *         "T-Shirt Customization"
 *     ]
 * }
 * ```
 */
"POST /api/catalog_system/pvt/sku/associateattachments": {
body: {
/**
 * Unique identifier of the SKU.
 */
SkuId: number
/**
 * Array with all the names of the attachments that you need to associate to the SKU.
 */
AttachmentNames: string[]
}
}
/**
 * Gets general information about all Files in the SKU. 
 * ## Response body example
 * 
 * ```json
 * [
 *     {
 *         "Id": 549,
 *         "ArchiveId": 155485,
 *         "SkuId": 310118490,
 *         "Name": "chimera-cat-quimera-5",
 *         "IsMain": true,
 *         "Label": "miau"
 *     },
 *     {
 *         "Id": 550,
 *         "ArchiveId": 155486,
 *         "SkuId": 310118490,
 *         "Name": "Gato-siames",
 *         "IsMain": false,
 *         "Label": "Gato siames"
 *     },
 *     {
 *         "Id": 555,
 *         "ArchiveId": 155491,
 *         "SkuId": 310118490,
 *         "Name": "Cat-Sleeping-Pics",
 *         "IsMain": false,
 *         "Label": null
 *     }
 * ]
 * ```
 */
"GET /api/catalog/pvt/stockkeepingunit/:skuId/file": {
/**
 * Array with objects containing SKU Files information.
 */
response: {
/**
 * Unique identifier of the association of the Image to the SKU.
 */
Id?: number
/**
 * Unique identifier of the Image.
 */
ArchiveId?: number
/**
 * Unique identifier of the SKU.
 */
SkuId?: number
/**
 * Image name.
 */
Name?: string
/**
 * Defines if the Image is the Main Image of the SKU.
 */
IsMain?: boolean
/**
 * Image label.
 */
Label?: (null | string)
}[]
}
/**
 * Creates a new Image for an SKU based on its URL or on a form-data request body. 
 * ## Request body example
 * 
 * ```json
 * {
 *       "IsMain": true,
 *       "Label": "",
 *       "Name": "Royal-Canin-Feline-Urinary-SO",
 *       "Text": null,
 *       "Url": "https://1.bp.blogspot.com/_SLQk9aAv9-o/S7NNbJPv7NI/AAAAAAAAAN8/V1LcO0ViDc4/s1600/waterbottle.jpg"
 *       
 * }
 * ```
 * 
 * ## Response body example
 * 
 * ```json
 * {
 *       "Id": 503,
 *       "ArchiveId": 155491,
 *       "SkuId": 1,
 *       "Name": "Royal-Canin-Feline-Urinary-SO",
 *       "IsMain": true,
 *       "Label": ""
 * }
 * ```
 */
"POST /api/catalog/pvt/stockkeepingunit/:skuId/file": {
body: SKUFileURL
response: {
/**
 * ID of the association of the SKU and the image (`SkuFileId`). This is the ID that is used to update or delete it.
 */
Id?: number
/**
 * Unique identifier of the image file.
 */
ArchiveId?: number
/**
 * SKU ID.
 */
SkuId?: number
/**
 * Set the image as the main image for the product.
 */
IsMain?: boolean
/**
 * Image label.
 */
Label?: string
}
}
/**
 * Deletes all SKU Image Files.
 */
"DELETE /api/catalog/pvt/stockkeepingunit/:skuId/file": {

}
/**
 * Updates a new Image on an SKU based on its URL or on a form-data request body. 
 * ## Request body example
 * 
 * ```json
 * {
 *     "IsMain": true,
 *     "Label": null,
 *     "Name": "toilet-paper",
 *     "Text": null,
 *     "Url": "https://images-na.ssl-images-amazon.com/images/I/81DLLXaGI7L._SL1500_.jpg"
 * }
 * ```
 * 
 * ## Response body example
 * 
 * ```json
 * {
 *     "Id": 508,
 *     "ArchiveId": 155491,
 *     "SkuId": 7,
 *     "IsMain": true,
 *     "Label": null
 * }
 * ```
 */
"PUT /api/catalog/pvt/stockkeepingunit/:skuId/file/:skuFileId": {
body: SKUFileURL
response: {
/**
 * ID of the association of the SKU and the image (`SkuFileId`). This is the ID that is used to update or delete it.
 */
Id?: number
/**
 * Unique identifier of the image file.
 */
ArchiveId?: number
/**
 * SKU ID.
 */
SkuId?: number
/**
 * Set the image as the main image for the product.
 */
IsMain?: boolean
/**
 * Image label.
 */
Label?: string
}
}
/**
 * Deletes a specific SKU Image File.
 */
"DELETE /api/catalog/pvt/stockkeepingunit/:skuId/file/:skuFileId": {

}
/**
 * Copy all existing files from an SKU to another SKU. 
 * ## Response body example
 * 
 * ```json
 * [
 *     {
 *         "Id": 1964,
 *         "ArchiveId": 155404,
 *         "SkuId": 1,
 *         "IsMain": true,
 *         "Label": ""
 *     },
 *     {
 *         "Id": 1965,
 *         "ArchiveId": 155429,
 *         "SkuId": 1,
 *         "IsMain": false,
 *         "Label": ""
 *     }
 * ]
 * ```
 */
"PUT /api/catalog/pvt/stockkeepingunit/copy/:skuIdfrom/:skuIdto/file/": {
/**
 * Array with objects containing information about each of the target SKU's Files.
 */
response: {
/**
 * Unique identifier of the association of the Image to the SKU.
 */
Id?: number
/**
 * Unique identifier of the image file.
 */
ArchiveId?: number
/**
 * Unique identifier of the SKU.
 */
SkuId?: number
/**
 * Defines if the Image is the Main Image of the SKU.
 */
IsMain?: boolean
/**
 * Image label.
 */
Label?: (null | string)
}[]
}
/**
 * Disassociates an SKU File from an SKU.
 */
"DELETE /api/catalog/pvt/stockkeepingunit/disassociate/:skuId/file/:skuFileId": {

}
/**
 * Retrieves general information about the components of an SKU Kit by SKU ID or Parent SKU ID. 
 * ## Response body example
 * 
 * ```json
 * {
 *     "Id": 7,
 *     "StockKeepingUnitParent": 7,
 *     "StockKeepingUnitId": 1,
 *     "Quantity": 1,
 *     "UnitPrice": 50.0000
 * }
 * ```
 */
"GET /api/catalog/pvt/stockkeepingunitkit": {
searchParams: {
/**
 * SKU’s unique numerical identifier.
 */
skuId?: number
/**
 * Parent SKU’s unique numerical identifier.
 */
parentSkuId?: number
}
response: SkuKit
}
/**
 * Adds a component to a specific Kit. 
 * ## Request body example
 * 
 * ```json
 * {
 *     "StockKeepingUnitParent": 7,
 *     "StockKeepingUnitId": 1,
 *     "Quantity": 1,
 *     "UnitPrice": 50.0000
 * }
 * ``` 
 * ## Response body example
 * 
 * ```json
 * {
 *     "Id": 7,
 *     "StockKeepingUnitParent": 7,
 *     "StockKeepingUnitId": 1,
 *     "Quantity": 1,
 *     "UnitPrice": 50.0000
 * }
 * ```
 */
"POST /api/catalog/pvt/stockkeepingunitkit": {
body: {
/**
 * SKU ID of the SKU Kit.
 */
StockKeepingUnitParent: number
/**
 * Component SKU ID.
 */
StockKeepingUnitId: number
/**
 * Component quantity.
 */
Quantity: number
/**
 * Component price per unit.
 */
UnitPrice: number
}
response: SkuKit
}
/**
 * Deletes all Kit’s components based on the Parent SKU ID or deletes a specific Kit’s component based on the SKU ID.
 */
"DELETE /api/catalog/pvt/stockkeepingunitkit": {
searchParams: {
/**
 * SKU’s unique numerical identifier.
 */
skuId?: number
/**
 * Parent SKU’s unique numerical identifier.
 */
parentSkuId?: number
}
}
/**
 * Retrieves general information about a component of a Kit.
 */
"GET /api/catalog/pvt/stockkeepingunitkit/:kitId": {
response: SkuKit
}
/**
 * Deletes a specific Kit’s component based on its Kit ID.
 */
"DELETE /api/catalog/pvt/stockkeepingunitkit/:kitId": {

}
/**
 *  > ⚠️ Check out the updated version of the SKU Seller endpoints in our [SKU Bindings API documentation](https://developers.vtex.com/vtex-rest-api/reference/getbyskuid). If you are doing this integration for the first time, we recommend that you follow the updated documentation.
 * 
 * Retrieves the details of a seller's SKU given a seller ID and the SKU ID in the seller's store. 
 * ## Response body example
 * 
 * ```json
 * {
 *     "IsPersisted": true,
 *     "IsRemoved": false,
 *     "SkuSellerId": 799,
 *     "SellerId": "myseller",
 *     "StockKeepingUnitId": 50,
 *     "SellerStockKeepingUnitId": "502",
 *     "IsActive": true,
 *     "UpdateDate": "2018-10-11T04:52:42.1",
 *     "RequestedUpdateDate": null
 * }
 * ```
 */
"GET /api/catalog_system/pvt/skuseller/:sellerId/:sellerSkuId": {
response: {
/**
 * Defines if the seller is persisted.
 */
IsPersisted: boolean
/**
 * Defines if the seller is removed.
 */
IsRemoved: boolean
/**
 * SKU ID in the seller's store.
 */
SkuSellerId: number
/**
 * ID that identifies the seller in the marketplace. It can be the same as the seller name or a unique number. Check the **Sellers management** section in the Admin to get the correct ID.
 */
SellerId: string
/**
 * SKU ID in the VTEX marketplace.
 */
StockKeepingUnitId: number
/**
 * SKU seller ID.
 */
SellerStockKeepingUnitId: string
/**
 * Defines if the SKU binding is active.
 */
IsActive: boolean
/**
 * Date when the SKU binding was updated for the last time, in UTC format.
 */
UpdateDate: string
/**
 * Date when an SKU binding update was requested for the last time, in UTC format.
 */
RequestedUpdateDate: (null | string)
}
}
/**
 *  > ⚠️ Check out the updated version of the SKU Seller endpoints in our [SKU Bindings API documentation](https://developers.vtex.com/vtex-rest-api/reference/getbyskuid). If you are doing this integration for the first time, we recommend that you follow the updated documentation.
 * 
 * Remove a seller's SKU binding, given the seller ID and the SKU ID in the seller's store.
 */
"POST /api/catalog_system/pvt/skuseller/remove/:sellerId/:sellerSkuId": {

}
/**
 *  > ⚠️ Check out the updated version of the SKU Seller endpoints in our [SKU Bindings API documentation](https://developers.vtex.com/vtex-rest-api/reference/getbyskuid). If you are doing this integration for the first time, we recommend that you follow the updated documentation.
 * 
 * The seller is responsible for suggesting new SKUs to be sold in the VTEX marketplace and also for informing the marketplace about changes in their SKUs that already exist in the marketplace. Both actions start with a catalog notification, which is made by this request.
 * 
 * With this notification, the seller is telling the marketplace that something has changed about a specific SKU, like price or inventory, or that this is a new SKU that the seller would like to offer to the marketplace.
 * 
 * There are two information expected by the marketplace in this request: the `sellerId`, which identifies the seller, and the `sellerSkuId`, which identifies the binding of the seller with the SKU.
 * 
 * Both information are passed through the request URL. The body of the request should be empty.
 */
"POST /api/catalog_system/pvt/skuseller/changenotification/:sellerId/:sellerSkuId": {

}
/**
 *  > ⚠️ Check out the updated version of the SKU Seller endpoints in our [SKU Bindings API documentation](https://developers.vtex.com/vtex-rest-api/reference/getbyskuid). If you are doing this integration for the first time, we recommend that you follow the updated documentation.
 * 
 * The seller is responsible for suggesting new SKUs to be sold in the VTEX marketplace and also for informing the marketplace about changes in their SKUs that already exist in the marketplace. Both actions start with a catalog notification, which is made by this request.
 * 
 * With this notification, the seller is telling the marketplace that something has changed about a specific SKU, like its name or description, or that this is a new SKU that the seller would like to offer to the marketplace. The body of the request should be empty.
 * 
 *  > ⚠️ Do not use this endpoint for price and inventory changes, because these types of updates should be notified using Marketplace API. For price changes, we recommend using the [Notify marketplace of price update](https://developers.vtex.com/docs/api-reference/marketplace-apis#post-/notificator/-sellerId-/changenotification/-skuId-/price) endpoint. For inventory changes, use [Notify marketplace of inventory update](https://developers.vtex.com/docs/api-reference/marketplace-apis#post-/notificator/-sellerId-/changenotification/-skuId-/inventory).
 * 
 * ## Example
 * 
 * Let's say your seller has the ID `123` in the marketplace and you want to inform the marketplace that has been a change in the SKU with ID `700`.
 * 
 * In this case, you would have to replace the `sellerId` parameter with the value `123` and the `skuId` parameter with the value `700`. The URL of the request would be the following.
 * 
 * ```
 * https://{{accountName}}.vtexcommercestable.com.br/api/catalog_system/pvt/skuseller/changenotification/123/700
 * ```
 * 
 * ## Response codes
 * 
 * The following response codes are possible for this request.
 * 
 * * **404:** the SKU was not found in the marketplace. The body of the response, in this case, should follow this format: "Seller StockKeepingUnit `{{skuId}}` not found for this seller id `{{sellerId}}`". This means that the seller can now proceed with sending an offer to the marketplace in order to suggest that this SKU is sold there.
 * * **200:** the SKU whose ID was informed in the URL already exists in the marketplace and was found. The marketplace can now proceed with a fulfillment simulation in order to get updated information about this SKU's inventory and price.
 * * **429:** Failure due to too many requests.
 * * **403:** Failure in the authentication.
 */
"POST /api/catalog_system/pvt/skuseller/changenotification/:skuId": {

}
/**
 * Retrieves an SKU Service. 
 * ## Response body example
 * 
 * ```json
 * {
 *     "Id": 1,
 *     "SkuServiceTypeId": 1,
 *     "SkuServiceValueId": 1,
 *     "SkuId": 1,
 *     "Name": "name",
 *     "Text": "text",
 *     "IsActive": false
 * }
 * ```
 */
"GET /api/catalog/pvt/skuservice/:skuServiceId": {
response: SKUService
}
/**
 * Updates an SKU Service. 
 * ## Request body example
 * 
 * ```json
 * {
 *     "Name": "name",
 *     "Text": "text",
 *     "IsActive": false
 * }
 * ```
 * 
 * ## Response body example
 * 
 * ```json
 * {
 *     "Id": 1,
 *     "SkuServiceTypeId": 1,
 *     "SkuServiceValueId": 1,
 *     "SkuId": 1,
 *     "Name": "name",
 *     "Text": "text",
 *     "IsActive": false
 * }
 * ```
 */
"PUT /api/catalog/pvt/skuservice/:skuServiceId": {
body: {
/**
 * SKU Service Type ID.
 */
SkuServiceTypeId: number
/**
 * SKU Service Value ID.
 */
SkuServiceValueId: number
/**
 * SKU ID.
 */
SkuId: number
/**
 * SKU Service Name. Maximum of 50 characters.
 */
Name: string
/**
 * Internal description for the SKU Service. Maximum of 100 characters.
 */
Text: string
/**
 * Defines if the SKU Service is active or not.
 */
IsActive: boolean
}
response: SKUService
}
/**
 * Dissociates an SKU Service from an SKU.
 */
"DELETE /api/catalog/pvt/skuservice/:skuServiceId": {

}
/**
 * Associates an SKU Service to an SKU.
 */
"POST /api/catalog/pvt/skuservice": {
body: {
/**
 * SKU Service Type ID.
 */
SkuServiceTypeId: number
/**
 * SKU Service Value ID.
 */
SkuServiceValueId: number
/**
 * SKU ID.
 */
SkuId: number
/**
 * SKU Service Name. Maximum of 50 characters.
 */
Name: string
/**
 * Internal description of the SKU Service. Maximum of 100 characters.
 */
Text: string
/**
 * Defines if the SKU Service is active or not.
 */
IsActive: boolean
}
response: SKUService
}
/**
 * Associates an Attachment for an existing SKU Service Type. 
 * ## Request body example
 * 
 * ```json
 * {
 *     "AttachmentId": 1,
 *     "SkuServiceTypeId": 1
 * }
 * ```
 * 
 * ## Response body example
 * 
 * ```json
 * {
 *     "Id": 1,
 *     "AttachmentId": 1,
 *     "SkuServiceTypeId": 1
 * }
 * ```
 */
"POST /api/catalog/pvt/skuservicetypeattachment": {
body: {
/**
 * Attachment ID.
 */
AttachmentId: number
/**
 * An explanation about the purpose of this instance.
 */
SkuServiceTypeId: number
}
response: {
/**
 * SKU Service Type Attachment association ID.
 */
Id?: number
/**
 * Attachment ID.
 */
AttachmentId?: number
/**
 * SKU Service Type ID.
 */
SkuServiceTypeId?: number
}
}
/**
 * Dissociates an Attachment by its Attachment ID or SKU Service Type ID from an SKU Service Type.
 */
"DELETE /api/catalog/pvt/skuservicetypeattachment": {
searchParams: {
/**
 * SKU Service Attachment unique identifier.
 */
attachmentId?: number
/**
 * SKU Service Type unique identifier.
 */
skuServiceTypeId?: number
}
}
/**
 * Dissociates an Attachment from an SKU Service Type
 */
"DELETE /api/catalog/pvt/skuservicetypeattachment/:skuServiceTypeAttachmentId": {

}
/**
 * Creates a new SKU Service Type. 
 * ## Request body example
 * 
 * ```json
 * {
 *     "Name": "Test API Sku Services",
 *     "IsActive": true,
 *     "ShowOnProductFront": true,
 *     "ShowOnCartFront": true,
 *     "ShowOnAttachmentFront": true,
 *     "ShowOnFileUpload": true,
 *     "IsGiftCard": true,
 *     "IsRequired": true
 * }
 * ```
 * 
 * ## Response body example
 * 
 * ```json
 * {
 *     "Id": 2,
 *     "Name": "Teste API Sku Services",
 *     "IsActive": true,
 *     "ShowOnProductFront": true,
 *     "ShowOnCartFront": true,
 *     "ShowOnAttachmentFront": true,
 *     "ShowOnFileUpload": true,
 *     "IsGiftCard": true,
 *     "IsRequired": true
 * }
 * ```
 */
"POST /api/catalog/pvt/skuservicetype": {
body: SKUServiceTypeRequest
response: SKUServiceTypeResponse
}
/**
 * Retrieves information about an existing SKU Service Type. 
 * ## Response body example:
 * 
 * ```json
 * {
 *     "Id": 2,
 *     "Name": "Test API SKU Services",
 *     "IsActive": true,
 *     "ShowOnProductFront": true,
 *     "ShowOnCartFront": true,
 *     "ShowOnAttachmentFront": true,
 *     "ShowOnFileUpload": true,
 *     "IsGiftCard": true,
 *     "IsRequired": true
 * }
 * ```
 */
"GET /api/catalog/pvt/skuservicetype/:skuServiceTypeId": {
response: SKUServiceTypeResponse
}
/**
 * Updates an existing SKU Service Type.  
 * ## Request body example
 * 
 * ```json
 * {
 *     "Name": "Test API Sku Services",
 *     "IsActive": true,
 *     "ShowOnProductFront": true,
 *     "ShowOnCartFront": true,
 *     "ShowOnAttachmentFront": true,
 *     "ShowOnFileUpload": true,
 *     "IsGiftCard": true,
 *     "IsRequired": true
 * }
 * ```
 * 
 * ## Response body example
 * 
 * ```json
 * {
 *     "Id": 2,
 *     "Name": "Teste API Sku Services",
 *     "IsActive": true,
 *     "ShowOnProductFront": true,
 *     "ShowOnCartFront": true,
 *     "ShowOnAttachmentFront": true,
 *     "ShowOnFileUpload": true,
 *     "IsGiftCard": true,
 *     "IsRequired": true
 * }
 * ```
 */
"PUT /api/catalog/pvt/skuservicetype/:skuServiceTypeId": {
body: SKUServiceTypeRequest
response: SKUServiceTypeResponse
}
/**
 * Deletes an existing SKU Service Type.
 */
"DELETE /api/catalog/pvt/skuservicetype/:skuServiceTypeId": {

}
/**
 * Creates an SKU Service Value for an existing SKU Service Type. 
 * ## Request body example
 * 
 * ```json
 * {
 *     "SkuServiceTypeId": 2,
 *     "Name": "Test ServiceValue API",
 *     "Value": 10.5,
 *     "Cost": 10.5
 * }
 * ```
 * 
 * ## Response body example
 * 
 * ```json
 * {
 *     "Id": 2,
 *     "SkuServiceTypeId": 2,
 *     "Name": "Test ServiceValue API",
 *     "Value": 10.5,
 *     "Cost": 10.5
 * }
 * ```
 */
"POST /api/catalog/pvt/skuservicevalue": {
body: SKUServiceValueRequest
response: SKUServiceValueResponse
}
/**
 * Retrieves an existing SKU Service Value. 
 * ## Response body example
 * 
 * ```json
 * {
 *     "Id": 2,
 *     "SkuServiceTypeId": 2,
 *     "Name": "Test ServiceValue API",
 *     "Value": 10.5,
 *     "Cost": 10.5
 * }
 * ```
 */
"GET /api/catalog/pvt/skuservicevalue/:skuServiceValueId": {
response: SKUServiceValueResponse
}
/**
 * Updates an existing SKU Service Value. 
 * ## Request body example
 * 
 * ```json
 * {
 *     "SkuServiceTypeId": 2,
 *     "Name": "Test ServiceValue API",
 *     "Value": 10.5,
 *     "Cost": 10.5
 * }
 * ```
 * 
 * ## Response body example
 * 
 * ```json
 * {
 *     "Id": 2,
 *     "SkuServiceTypeId": 2,
 *     "Name": "Test ServiceValue API",
 *     "Value": 10.5,
 *     "Cost": 10.5
 * }
 * ```
 */
"PUT /api/catalog/pvt/skuservicevalue/:skuServiceValueId": {
body: SKUServiceValueRequest
response: SKUServiceValueResponse
}
/**
 * Deletes an existing SKU Service Value.
 */
"DELETE /api/catalog/pvt/skuservicevalue/:skuServiceValueId": {

}
/**
 * Retrieves information about an SKU's Specifications. 
 * ## Response body example
 * 
 * ```json
 * [
 *     {
 *         "Id": 427,
 *         "SkuId": 7,
 *         "FieldId": 32,
 *         "FieldValueId": 131,
 *         "Text": "500g"
 *     },
 *     {
 *         "Id": 428,
 *         "SkuId": 7,
 *         "FieldId": 40,
 *         "FieldValueId": 133,
 *         "Text": "A"
 *     }
 * ]
 * ```
 */
"GET /api/catalog/pvt/stockkeepingunit/:skuId/specification": {
response: SKUSpecificationResponse[]
}
/**
 * Associates a previously created Specification to an SKU. 
 * ## Request body example
 * 
 * ```json
 * {
 *     "FieldId": 65,
 *     "FieldValueId": 138
 * }
 * ```
 * 
 * ## Response body example
 * 
 * ```json
 * {
 *     "Id": 730,
 *     "SkuId": 31,
 *     "FieldId": 65,
 *     "FieldValueId": 138,
 *     "Text": "Size"
 * }
 * ```
 */
"POST /api/catalog/pvt/stockkeepingunit/:skuId/specification": {
body: {
/**
 * Specification field ID.
 */
FieldId: number
/**
 * Specification Value ID. Required only for `FieldTypeId` as `5`, `6` and `7`.
 */
FieldValueId?: number
}
response: SKUSpecificationResponse
}
/**
 * Updates an existing Specification on an existing SKU. This endpoint only updates the `FieldValueId`. 
 * ## Request body example
 * 
 * ```json
 * {
 *   "Id": 65,
 *   "SkuId": 21,
 *   "FieldId": 32,
 *   "FieldValueId": 131,
 *   "Text": "Red"
 * }
 * ```
 * 
 * ## Response body example
 * 
 * ```json
 * {
 *   "Id": 65,
 *   "SkuId": 21,
 *   "FieldId": 32,
 *   "FieldValueId": 131,
 *   "Text": "Red"
 * }
 * ```
 */
"PUT /api/catalog/pvt/stockkeepingunit/:skuId/specification": {
body: {
/**
 * Specification and SKU association unique identifier. This field cannot be updated.
 */
Id: number
/**
 * SKU unique identifier. This field cannot be updated.
 */
SkuId?: number
/**
 * Specification field unique identifier. This field cannot be updated.
 */
FieldId: number
/**
 * Specification value unique identifier. This field can only be updated with other values of the same `FieldId`.
 */
FieldValueId: number
/**
 * Specification Value Name. This field is automatically updated if the `FieldValue` is updated. Otherwise, the value cannot be modified.
 */
Text?: string
}
response: SKUSpecificationResponse[]
}
/**
 * Deletes all SKU Specifications.
 */
"DELETE /api/catalog/pvt/stockkeepingunit/:skuId/specification": {

}
/**
 * Deletes a specific SKU Specification.
 */
"DELETE /api/catalog/pvt/stockkeepingunit/:skuId/specification/:specificationId": {

}
/**
 * Associates a specification to an SKU using specification name and group name. Automatically creates the informed group, specification and values if they had not been created before.
 * 
 *  ## Request body example
 * 
 * ```json
 * {
 *     "FieldName": "Size",
 *     "GroupName": "Sizes",
 *     "RootLevelSpecification": false,
 *     "FieldValues": [
 *         "M"
 *         ]
 * }
 * ```
 *  
 *  
 * ## Response body example
 * 
 * ```json
 * [
 *     {
 *         "Id": 419,
 *         "SkuId": 5,
 *         "FieldId": 22,
 *         "FieldValueId": 62,
 *         "Text": "M"
 *     }
 * ]
 * ```
 * 
 */
"PUT /api/catalog/pvt/stockkeepingunit/:skuId/specificationvalue": {
body: {
/**
 * Specification name. Limited to 100 characters.
 */
FieldName: string
/**
 * Group name.
 */
GroupName: string
/**
 * Root level specification.
 */
RootLevelSpecification: boolean
/**
 * Array of specification values. SKU Specifications must contain only one value.
 */
FieldValues: string[]
}
/**
 * Array with information of all SKU specifications.
 */
response: {
/**
 * ID of the association of the SKU and the specification.
 */
Id?: number
/**
 * SKU ID.
 */
SkuId?: number
/**
 * Specification field ID.
 */
FieldId?: number
/**
 * Current specification value ID.
 */
FieldValueId?: number
/**
 * Current specification value text.
 */
Text?: string
}[]
}
/**
 *  >⚠️ There are two ways to configure collections, through Legacy CMS Portal or using the Beta Collection module. This endpoint is compatible with [collections configured through the Legacy CMS Portal](https://help.vtex.com/en/tutorial/adding-collections-cms--2YBy6P6X0NFRpkD2ZBxF6L).
 * 
 * Associates a single SKU to a Subcollection, which is a [Group](https://help.vtex.com/en/tutorial/adding-collections-cms--2YBy6P6X0NFRpkD2ZBxF6L#group-types) within a  Collection.
 * ## Request body example
 * 
 * ```json
 * {
 *     "SkuId": 1
 * }
 * ```
 * 
 * ## Response body example
 * 
 * ```json
 * {
 *     "SubCollectionId": 17,
 *     "SkuId": 1
 * }
 * ```
 */
"POST /api/catalog/pvt/subcollection/:subCollectionId/stockkeepingunit": {
body: {
/**
 * Unique identifier of an SKU.
 */
SkuId: number
}
response: {
/**
 * Subcollection’s unique numerical identifier.
 */
SubCollectionId?: number
/**
 * Unique identifier of the SKU.
 */
SkuId?: number
}
}
/**
 *  >⚠️ There are two ways to configure collections, through Legacy CMS Portal or using the Beta Collection module. This endpoint is compatible with [collections configured through the Legacy CMS Portal](https://help.vtex.com/en/tutorial/adding-collections-cms--2YBy6P6X0NFRpkD2ZBxF6L).
 * 
 * Deletes an SKU from a Subcollection, which is a [Group](https://help.vtex.com/en/tutorial/adding-collections-cms--2YBy6P6X0NFRpkD2ZBxF6L#group-types) within a  Collection.
 */
"DELETE /api/catalog/pvt/subcollection/:subCollectionId/stockkeepingunit/:skuId": {

}
/**
 * Retrieves the Category Tree of your store. Get all the category levels registered in the Catalog or define the level up to which you want to get.  
 * > 📘 Onboarding guide 
 * >
 * > Check the new [Catalog onboarding guide](https://developers.vtex.com/vtex-rest-api/docs/catalog-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Catalog and is organized by focusing on the developer's journey. 
 * ## Response body example
 * 
 * ```json
 * [
 *     {
 *         "id": 1,
 *         "name": "Alimentação",
 *         "hasChildren": true,
 *         "url": "https://lojadobreno.vtexcommercestable.com.br/alimentacao",
 *         "children": [
 *             {
 *                 "id": 6,
 *                 "name": "Bebedouro",
 *                 "hasChildren": false,
 *                 "url": "https://lojadobreno.vtexcommercestable.com.br/alimentacao/bebedouro",
 *                 "children": [],
 *                 "Title": "Bebedouro para Gatos",
 *                 "MetaTagDescription": ""
 *             },
 *             {
 *                 "id": 7,
 *                 "name": "Comedouro",
 *                 "hasChildren": false,
 *                 "url": "https://lojadobreno.vtexcommercestable.com.br/alimentacao/comedouro",
 *                 "children": [],
 *                 "Title": "Comedouro para Gatos",
 *                 "MetaTagDescription": ""
 *             },
 *             {
 *                 "id": 8,
 *                 "name": "Biscoitos",
 *                 "hasChildren": false,
 *                 "url": "https://lojadobreno.vtexcommercestable.com.br/alimentacao/biscoitos",
 *                 "children": [],
 *                 "Title": "Biscoitos para Gatos",
 *                 "MetaTagDescription": ""
 *             },
 *             {
 *                 "id": 9,
 *                 "name": "Petiscos",
 *                 "hasChildren": false,
 *                 "url": "https://lojadobreno.vtexcommercestable.com.br/alimentacao/petiscos",
 *                 "children": [],
 *                 "Title": "Petiscos para Gatos",
 *                 "MetaTagDescription": ""
 *             },
 *             {
 *                 "id": 10,
 *                 "name": "Ração Seca",
 *                 "hasChildren": false,
 *                 "url": "https://lojadobreno.vtexcommercestable.com.br/alimentacao/racao-seca",
 *                 "children": [],
 *                 "Title": "Ração Seca para Gatos",
 *                 "MetaTagDescription": ""
 *             },
 *             {
 *                 "id": 11,
 *                 "name": "Ração Úmida",
 *                 "hasChildren": false,
 *                 "url": "https://lojadobreno.vtexcommercestable.com.br/alimentacao/racao-umida",
 *                 "children": [],
 *                 "Title": "Ração Úmida para Gatos",
 *                 "MetaTagDescription": ""
 *             }
 *         ],
 *         "Title": "Alimentação para Gatos",
 *         "MetaTagDescription": ""
 *     },
 *     {
 *         "id": 2,
 *         "name": "Brinquedos",
 *         "hasChildren": true,
 *         "url": "https://lojadobreno.vtexcommercestable.com.br/brinquedos",
 *         "children": [
 *             {
 *                 "id": 12,
 *                 "name": "Bolinhas",
 *                 "hasChildren": false,
 *                 "url": "https://lojadobreno.vtexcommercestable.com.br/brinquedos/bolinhas",
 *                 "children": [],
 *                 "Title": "Bolinhas para Gatos",
 *                 "MetaTagDescription": ""
 *             },
 *             {
 *                 "id": 13,
 *                 "name": "Ratinhos",
 *                 "hasChildren": false,
 *                 "url": "https://lojadobreno.vtexcommercestable.com.br/brinquedos/ratinhos",
 *                 "children": [],
 *                 "Title": "Ratinhos",
 *                 "MetaTagDescription": ""
 *             },
 *             {
 *                 "id": 19,
 *                 "name": "Arranhador para gato",
 *                 "hasChildren": false,
 *                 "url": "https://lojadobreno.vtexcommercestable.com.br/brinquedos/arranhador-para-gato",
 *                 "children": [],
 *                 "Title": "Brinquedo Arranhador para gatos",
 *                 "MetaTagDescription": "Arranhador gatos é indispensável no lar com felinos. Ideais para afiar as unhas e garantir a diversão"
 *             }
 *         ],
 *         "Title": "Brinquedos para Gatos",
 *         "MetaTagDescription": ""
 *     }
 * ]
 * ```
 */
"GET /api/catalog_system/pub/category/tree/:categoryLevels": {
response: GetCategoryTree[]
}
/**
 * Retrieves general information about a Category. 
 * ## Response body example
 * 
 * ```json
 * {
 *     "Id": 1,
 *     "Name": "Home Appliances",
 *     "FatherCategoryId": null,
 *     "Title": "Home Appliances",
 *     "Description": "Discover our range of home appliances. Find smart vacuums, kitchen and laundry appliances to suit your needs. Order online now.",
 *     "Keywords": "Kitchen, Laundry, Appliances",
 *     "IsActive": true,
 *     "LomadeeCampaignCode": "",
 *     "AdWordsRemarketingCode": "",
 *     "ShowInStoreFront": true,
 *     "ShowBrandFilter": true,
 *     "ActiveStoreFrontLink": true,
 *     "GlobalCategoryId": 3367,
 *     "StockKeepingUnitSelectionMode": "LIST",
 *     "Score": null,
 *     "LinkId": "Alimentacao",
 *     "HasChildren": true
 * }
 * ```
 */
"GET /api/catalog/pvt/category/:categoryId": {
response: Category
}
/**
 * Updates a previously existing Category.
 * 
 * ## Request body example
 * 
 * ```json
 * {
 *     "Name": "Home Appliances",
 *     "FatherCategoryId": null,
 *     "Title": "Home Appliances",
 *     "Description": "Discover our range of home appliances. Find smart vacuums, kitchen and laundry appliances to suit your needs. Order online now.",
 *     "Keywords": "Kitchen, Laundry, Appliances",
 *     "IsActive": true,
 *     "LomadeeCampaignCode": null,
 *     "AdWordsRemarketingCode": null,
 *     "ShowInStoreFront": true,
 *     "ShowBrandFilter": true,
 *     "ActiveStoreFrontLink": true,
 *     "GlobalCategoryId": 604,
 *     "StockKeepingUnitSelectionMode": "SPECIFICATION",
 *     "Score": null
 * }
 * ```
 * 
 * ## Response body example
 * 
 * ```json
 * {
 *     "Id": 1,
 *     "Name": "Home Appliances",
 *     "FatherCategoryId": null,
 *     "Title": "Home Appliances",
 *     "Description": "Discover our range of home appliances. Find smart vacuums, kitchen and laundry appliances to suit your needs. Order online now.",
 *     "Keywords": "Kitchen, Laundry, Appliances",
 *     "IsActive": true,
 *     "LomadeeCampaignCode": "",
 *     "AdWordsRemarketingCode": "",
 *     "ShowInStoreFront": true,
 *     "ShowBrandFilter": true,
 *     "ActiveStoreFrontLink": true,
 *     "GlobalCategoryId": 604,
 *     "StockKeepingUnitSelectionMode": "LIST",
 *     "Score": null,
 *     "LinkId": "Alimentacao",
 *     "HasChildren": true
 * }
 * ```
 */
"PUT /api/catalog/pvt/category/:categoryId": {
body: {
/**
 * Category name.
 */
Name: string
/**
 * Substitute words for the Category.
 */
Keywords: string
/**
 * Text used in title tag for Category page.
 */
Title: string
/**
 * Text used in meta description tag for Category page.
 */
Description: string
/**
 * @deprecated
 * This is a legacy field. Do not take this information into consideration.
 */
AdWordsRemarketingCode: string
/**
 * @deprecated
 * This is a legacy field. Do not take this information into consideration.
 */
LomadeeCampaignCode: string
/**
 * ID of the parent category, apply in case of category and subcategory.
 */
FatherCategoryId: (null | number)
/**
 * Google Global Category ID.
 */
GlobalCategoryId: number
/**
 * If true, the Category is shown in the top and side menu.
 */
ShowInStoreFront: boolean
/**
 * If true, the Category page becomes available in store.
 */
IsActive: boolean
/**
 * If true, the Category link becomes active in store.
 */
ActiveStoreFrontLink: boolean
/**
 * If true, the Category page displays a Brand filter.
 */
ShowBrandFilter: boolean
/**
 * Score for search sorting order.
 */
Score: number
/**
 * Defines how the SKU will be exhibited
 */
StockKeepingUnitSelectionMode: string
}
response: Category
}
/**
 * Creates a new Category.
 * 
 * If there is a need to create a new category with a specific custom ID, specify the `Id` (integer) in the request. Otherwise, VTEX will generate the ID automatically.
 * 
 * ## Request body example (automatically generated ID)
 * 
 * ```json
 * {
 *     "Name": "Home Appliances",
 *     "FatherCategoryId": null,
 *     "Title": "Home Appliances",
 *     "Description": "Discover our range of home appliances. Find smart vacuums, kitchen and laundry appliances to suit your needs. Order online now.",
 *     "Keywords": "Kitchen, Laundry, Appliances",
 *     "IsActive": true,
 *     "LomadeeCampaignCode": null,
 *     "AdWordsRemarketingCode": null,
 *     "ShowInStoreFront": true,
 *     "ShowBrandFilter": true,
 *     "ActiveStoreFrontLink": true,
 *     "GlobalCategoryId": 604,
 *     "StockKeepingUnitSelectionMode": "SPECIFICATION",
 *     "Score": null
 * }
 * ```
 * 
 * ## Request body example (custom ID)
 * 
 * ```json
 * {
 *     "Id": 1,
 *     "Name": "Home Appliances",
 *     "FatherCategoryId": null,
 *     "Title": "Home Appliances",
 *     "Description": "Discover our range of home appliances. Find smart vacuums, kitchen and laundry appliances to suit your needs. Order online now.",
 *     "Keywords": "Kitchen, Laundry, Appliances",
 *     "IsActive": true,
 *     "LomadeeCampaignCode": null,
 *     "AdWordsRemarketingCode": null,
 *     "ShowInStoreFront": true,
 *     "ShowBrandFilter": true,
 *     "ActiveStoreFrontLink": true,
 *     "GlobalCategoryId": 604,
 *     "StockKeepingUnitSelectionMode": "SPECIFICATION",
 *     "Score": null
 * }
 * ```
 * 
 * ## Response body example
 * 
 * ```json
 * {
 *     "Id": 1,
 *     "Name": "Home Appliances",
 *     "FatherCategoryId": null,
 *     "Title": "Home Appliances",
 *     "Description": "Discover our range of home appliances. Find smart vacuums, kitchen and laundry appliances to suit your needs. Order online now.",
 *     "Keywords": "Kitchen, Laundry, Appliances",
 *     "IsActive": true,
 *     "LomadeeCampaignCode": "",
 *     "AdWordsRemarketingCode": "",
 *     "ShowInStoreFront": true,
 *     "ShowBrandFilter": true,
 *     "ActiveStoreFrontLink": true,
 *     "GlobalCategoryId": 604,
 *     "StockKeepingUnitSelectionMode": "LIST",
 *     "Score": null,
 *     "LinkId": "Alimentacao",
 *     "HasChildren": true
 * }
 * ```
 */
"POST /api/catalog/pvt/category": {
body: CreateCategoryRequest
response: Category
}
/**
 * Retrieves Similar Categories from a Product.
 * 
 * ## Response body example
 * 
 * ```json
 * [
 *     {
 *         "ProductId": 1,
 *         "CategoryId": 1
 *     },
 *     {
 *         "ProductId": 1,
 *         "CategoryId": 20
 *     }
 * ]
 * ```
 */
"GET /api/catalog/pvt/product/:productId/similarcategory/": {
/**
 * Array of objects with similar category information.
 */
response: {
/**
 * Product ID.
 */
ProductId?: number
/**
 * Similar Category ID.
 */
CategoryId?: number
}[]
}
/**
 * Adds a Similar Category to a Product.
 * 
 * ## Response body example
 * 
 * ```json
 * {
 *     "ProductId": 1,
 *     "StoreId": 1
 * }
 * ```
 */
"POST /api/catalog/pvt/product/:productId/similarcategory/:categoryId": {
/**
 * Object containing information related to the similar category.
 */
response: {
/**
 * Product ID.
 */
ProductId?: number
/**
 * Trade Policy ID.
 */
StoreId?: number
}
}
/**
 * Deletes a Similar Category from a Product.
 */
"DELETE /api/catalog/pvt/product/:productId/similarcategory/:categoryId": {

}
/**
 * Retrieves all specifications from a category by its ID.
 * 
 * ## Response body example
 * 
 * ```json
 * [
 *     {
 *         "Name": "Specification A",
 *         "CategoryId": 1,
 *         "FieldId": 33,
 *         "IsActive": true,
 *         "IsStockKeepingUnit": false
 *     },
 *     {
 *         "Name": "Specification B",
 *         "CategoryId": 1,
 *         "FieldId": 34,
 *         "IsActive": true,
 *         "IsStockKeepingUnit": false
 *     },
 *     {
 *         "Name": "Specification C",
 *         "CategoryId": 1,
 *         "FieldId": 35,
 *         "IsActive": false,
 *         "IsStockKeepingUnit": false
 *     }
 * ]
 * ```
 */
"GET /api/catalog_system/pub/specification/field/listByCategoryId/:categoryId": {
response: CategorySpecification
}
/**
 * Lists all specifications including the current category and the level zero specifications from a category by its ID. 
 * 
 * ## Response body example
 * 
 * ```json
 * [
 *     {
 *         "Name": "Specification A",
 *         "CategoryId": 1,
 *         "FieldId": 33,
 *         "IsActive": true,
 *         "IsStockKeepingUnit": false
 *     },
 *     {
 *         "Name": "Specification B",
 *         "CategoryId": 1,
 *         "FieldId": 34,
 *         "IsActive": true,
 *         "IsStockKeepingUnit": false
 *     },
 *     {
 *         "Name": "Specification C",
 *         "CategoryId": 1,
 *         "FieldId": 35,
 *         "IsActive": false,
 *         "IsStockKeepingUnit": false
 *     }
 * ]
 * ```
 */
"GET /api/catalog_system/pub/specification/field/listTreeByCategoryId/:categoryId": {
response: CategorySpecification
}
/**
 *  >⚠️ There are two ways to configure collections, through Legacy CMS Portal or using the Beta Collection module. This endpoint is compatible with [collections configured through the Legacy CMS Portal](https://help.vtex.com/en/tutorial/adding-collections-cms--2YBy6P6X0NFRpkD2ZBxF6L).
 * 
 * Associates a single Category to a Subcollection, which is a [Group](https://help.vtex.com/en/tutorial/adding-collections-cms--2YBy6P6X0NFRpkD2ZBxF6L#group-types) within a  Collection.
 * ## Request body example
 * 
 * ```json
 * {
 *     "CategoryId": 1
 * }
 * ```
 * 
 * ## Response body example
 * 
 * ```json
 * {
 *     "SubCollectionId": 17,
 *     "CategoryId": 1
 * }
 * ```
 */
"POST /api/catalog/pvt/subcollection/:subCollectionId/category": {
body: {
/**
 * Unique identifier of a Category.
 */
CategoryId: number
}
response: {
/**
 * Subcollection’s unique numerical identifier.
 */
SubCollectionId?: number
/**
 * Unique identifier of the Category.
 */
CategoryId?: number
}
}
/**
 *  >⚠️ There are two ways to configure collections, through Legacy CMS Portal or using the Beta Collection module. This endpoint is compatible with [collections configured through the Legacy CMS Portal](https://help.vtex.com/en/tutorial/adding-collections-cms--2YBy6P6X0NFRpkD2ZBxF6L).
 * 
 * Deletes a Category from a Subcollection, which is a [Group](https://help.vtex.com/en/tutorial/adding-collections-cms--2YBy6P6X0NFRpkD2ZBxF6L#group-types) within a  Collection.
 */
"DELETE /api/catalog/pvt/subcollection/:subCollectionId/brand/:categoryId": {

}
/**
 * Retrieves all Brands registered in the store's Catalog. 
 * >⚠️ This route's response is limited to 20k results. If you need to obtain more results, please use the [Get Brand List](https://developers.vtex.com/vtex-rest-api/reference/catalog-api-get-brand-list) endpoint instead to get a paginated response. 
 * ## Response body example
 * 
 * ```json
 * [
 *   {
 *     "id": 9280,
 *     "name": "Brand",
 *     "isActive": true,
 *     "title": "Brand",
 *     "metaTagDescription": "Brand",
 *     "imageUrl": null
 *   },
 *   {
 *     "id": 2000000,
 *     "name": "Orma Carbon",
 *     "isActive": true,
 *     "title": "Orma Carbon",
 *     "metaTagDescription": "Orma Carbon",
 *     "imageUrl": null
 *   },
 *   {
 *     "id": 2000001,
 *     "name": "Pedigree",
 *     "isActive": true,
 *     "title": "Pedigree",
 *     "metaTagDescription": "",
 *     "imageUrl": null
 *   }
 * ]
 * ```
 */
"GET /api/catalog_system/pvt/brand/list": {
/**
 * An array with all brands registered in the store.
 */
response: BrandGet[]
}
/**
 * Retrieves all Brands registered in the store's Catalog by page number.
 * ## Response body example
 * 
 * ```json
 * {
 *   "items": [
 *     {
 *       "id": 2000000,
 *       "name": "Farm",
 *       "isActive": true,
 *       "title": "Farm",
 *       "metaTagDescription": "Farm",
 *       "imageUrl": null
 *     },
 *     {
 *       "id": 2000001,
 *       "name": "Adidas",
 *       "isActive": true,
 *       "title": "",
 *       "metaTagDescription": "",
 *       "imageUrl": null
 *     },
 *     {
 *       "id": 2000002,
 *       "name": "Brastemp",
 *       "isActive": true,
 *       "title": "Brastemp",
 *       "metaTagDescription": "Brastemp",
 *       "imageUrl": null
 *     }
 *   ],
 *     "paging": {
 *       "page": 1,
 *         "perPage": 3,
 *           "total": 6,
 *             "pages": 2
 *     }
 * }
 * ```
 */
"GET /api/catalog_system/pvt/brand/pagedlist": {
searchParams: {
/**
 * Quantity of brands per page.
 */
pageSize: number
/**
 * Page number of the brand list.
 */
page: number
}
response: {
/**
 * Array of objects with information of the store's brands.
 */
items: BrandGet[]
/**
 * Object with pagination information.
 */
paging: {
/**
 * Page number of the brand list.
 */
page: number
/**
 * Quantity of brands per page.
 */
perPage: number
/**
 * Total of brands in the store.
 */
total: number
/**
 * Total number of pages.
 */
pages: number
}
}
}
/**
 * Retrieves a specific Brand by its ID.
 * ## Response body example
 * 
 * ```json
 * {
 *   "id": 7000000,
 *   "name": "Pedigree",
 *   "isActive": true,
 *   "title": "Pedigree",
 *   "metaTagDescription": "Pedigree",
 *   "imageUrl": null
 * }
 * ```
 */
"GET /api/catalog_system/pvt/brand/:brandId": {
response: BrandGet
}
/**
 * Creates a new Brand.
 * ## Request and response body example
 * 
 * ```json
 * {
 *   "Id": 2000013,
 *   "Name": "Orma Carbon",
 *   "Text": "Orma Carbon",
 *   "Keywords": "orma",
 *   "SiteTitle": "Orma Carbon",
 *   "Active": true,
 *   "MenuHome": true,
 *   "AdWordsRemarketingCode": "",
 *   "LomadeeCampaignCode": "",
 *   "Score": null,
 *   "LinkId": "orma-carbon"
 * }
 * ```
 */
"POST /api/catalog/pvt/brand": {
body: BrandCreateUpdate
response: BrandCreateUpdate
}
/**
 * Retrieves information about a specific Brand and its context.
 * ## Response body example
 * 
 * ```json
 * {
 *   "Id": 2000013,
 *   "Name": "Orma Carbon",
 *   "Text": "Orma Carbon",
 *   "Keywords": "orma",
 *   "SiteTitle": "Orma Carbon",
 *   "Active": true,
 *   "MenuHome": true,
 *   "AdWordsRemarketingCode": "",
 *   "LomadeeCampaignCode": "",
 *   "Score": null,
 *   "LinkId": "orma-carbon"
 * }
 * ```
 */
"GET /api/catalog/pvt/brand/:brandId": {
response: BrandCreateUpdate
}
/**
 * Updates a previously existing Brand.
 * ## Request and response body example
 * 
 * ```json
 * {
 *   "Id": 2000013,
 *   "Name": "Orma Carbon",
 *   "Text": "Orma Carbon",
 *   "Keywords": "orma",
 *   "SiteTitle": "Orma Carbon",
 *   "Active": true,
 *   "MenuHome": true,
 *   "AdWordsRemarketingCode": "",
 *   "LomadeeCampaignCode": "",
 *   "Score": null,
 *   "LinkId": "orma-carbon"
 * }
 * ```
 */
"PUT /api/catalog/pvt/brand/:brandId": {
body: BrandCreateUpdate
response: BrandCreateUpdate
}
/**
 * Deletes an existing Brand.
 */
"DELETE /api/catalog/pvt/brand/:brandId": {

}
/**
 *  >⚠️ There are two ways to configure collections, through Legacy CMS Portal or using the Beta Collection module. This endpoint is compatible with [collections configured through the Legacy CMS Portal](https://help.vtex.com/en/tutorial/adding-collections-cms--2YBy6P6X0NFRpkD2ZBxF6L).
 * 
 * Associates a single Brand to a Subcollection, which is a [Group](https://help.vtex.com/en/tutorial/adding-collections-cms--2YBy6P6X0NFRpkD2ZBxF6L#group-types) within a  Collection.
 * ## Request body example
 * 
 * ```json
 * {
 *     "BrandId": 2000000
 * }
 * ```
 * 
 * ## Response body example
 * 
 * ```json
 * {
 *     "SubCollectionId": 17,
 *     "BrandId": 2000000
 * }
 * ```
 */
"POST /api/catalog/pvt/subcollection/:subCollectionId/brand": {
body: {
/**
 * Unique identifier of a Brand.
 */
BrandId: number
}
response: {
/**
 * Subcollection’s unique numerical identifier.
 */
SubCollectionId?: number
/**
 * Unique identifier of the Brand.
 */
BrandId?: number
}
}
/**
 *  >⚠️ There are two ways to configure collections, through Legacy CMS Portal or using the Beta Collection module. This endpoint is compatible with [collections configured through the Legacy CMS Portal](https://help.vtex.com/en/tutorial/adding-collections-cms--2YBy6P6X0NFRpkD2ZBxF6L).
 * 
 * Deletes a Brand from a Subcollection, which is a [Group](https://help.vtex.com/en/tutorial/adding-collections-cms--2YBy6P6X0NFRpkD2ZBxF6L#group-types) within a  Collection.
 */
"DELETE /api/catalog/pvt/subcollection/:subCollectionId/brand/:brandId": {

}
/**
 * Gets information about a registered attachment. 
 *  >⚠️ To understand the specific syntax for Assembly Options attachments, read the [Assembly Options](https://help.vtex.com/en/tutorial/assembly-options--5x5FhNr4f5RUGDEGWzV1nH#assembly-options-syntax) documentation.
 * ## Response body example
 * 
 * ```json
 * {
 *   "Id": 8,
 *   "Name": "Test",
 *   "IsRequired": true,
 *   "IsActive": true,
 *   "Domains": [
 *     {
 *       "FieldName": "Basic test",
 *       "MaxCaracters": "",
 *       "DomainValues": "[1-2]#9[1-1][1]basic;#11[0-1][1]basic"
 *     },
 *     {
 *       "FieldName": "teste",
 *       "MaxCaracters": "",
 *       "DomainValues": "[0-10]#8[0-3][0]medium;#9[0-3][0]medium;#10[0-3][0]medium;#11[0-3][0]medium;#36[0-3][0]medium;#37[0-3][0]medium;#38[0-3][0]medium"
 *     }
 *   ]
 * }
 * ```
 */
"GET /api/catalog/pvt/attachment/:attachmentid": {
response: AttachmentResponse
}
/**
 * Updates a previously existing SKU attachment with new information. 
 *  >⚠️ To understand the specific syntax for Assembly Options attachments, read the [Assembly Options](https://help.vtex.com/en/tutorial/assembly-options--5x5FhNr4f5RUGDEGWzV1nH#assembly-options-syntax) documentation. 
 * ## Request body example
 * 
 * ```json
 * {
 *   "Name": "Test",
 *   "IsRequired": true,
 *   "IsActive": true,
 *   "Domains": [
 *     {
 *       "FieldName": "Basic test",
 *       "MaxCaracters": "",
 *       "DomainValues": "[1-2]#9[1-1][1]basic;#11[0-1][1]basic"
 *     },
 *     {
 *       "FieldName": "teste",
 *       "MaxCaracters": "",
 *       "DomainValues": "[0-10]#8[0-3][0]medium;#9[0-3][0]medium;#10[0-3][0]medium;#11[0-3][0]medium;#36[0-3][0]medium;#37[0-3][0]medium;#38[0-3][0]medium"
 *     }
 *   ]
 * }
 * ```
 * ## Response body example
 * 
 * ```json
 * {
 *   "Id": 8,
 *   "Name": "Test",
 *   "IsRequired": true,
 *   "IsActive": true,
 *   "Domains": [
 *     {
 *       "FieldName": "Basic test",
 *       "MaxCaracters": "",
 *       "DomainValues": "[1-2]#9[1-1][1]basic;#11[0-1][1]basic"
 *     },
 *     {
 *       "FieldName": "teste",
 *       "MaxCaracters": "",
 *       "DomainValues": "[0-10]#8[0-3][0]medium;#9[0-3][0]medium;#10[0-3][0]medium;#11[0-3][0]medium;#36[0-3][0]medium;#37[0-3][0]medium;#38[0-3][0]medium"
 *     }
 *   ]
 * }
 * ```
 */
"PUT /api/catalog/pvt/attachment/:attachmentid": {
body: AttachmentRequest
response: AttachmentResponse
}
/**
 * Deletes a previously existing SKU attachment.
 */
"DELETE /api/catalog/pvt/attachment/:attachmentid": {

}
/**
 * Creates a new SKU attachment.
 *  >⚠️ To understand the specific syntax for Assembly Options attachments, read the [Assembly Options](https://help.vtex.com/en/tutorial/assembly-options--5x5FhNr4f5RUGDEGWzV1nH#assembly-options-syntax) documentation. 
 * ## Request body example
 * 
 * ```json
 * {
 *   "Name": "Test",
 *   "IsRequired": true,
 *   "IsActive": true,
 *   "Domains": [
 *     {
 *       "FieldName": "Basic test",
 *       "MaxCaracters": "",
 *       "DomainValues": "[1-2]#9[1-1][1]basic;#11[0-1][1]basic"
 *     },
 *     {
 *       "FieldName": "teste",
 *       "MaxCaracters": "",
 *       "DomainValues": "[0-10]#8[0-3][0]medium;#9[0-3][0]medium;#10[0-3][0]medium;#11[0-3][0]medium;#36[0-3][0]medium;#37[0-3][0]medium;#38[0-3][0]medium"
 *     }
 *   ]
 * }
 * ```
 * ## Response body example
 * 
 * ```json
 * {
 *   "Id": 8,
 *   "Name": "Test",
 *   "IsRequired": true,
 *   "IsActive": true,
 *   "Domains": [
 *     {
 *       "FieldName": "Basic test",
 *       "MaxCaracters": "",
 *       "DomainValues": "[1-2]#9[1-1][1]basic;#11[0-1][1]basic"
 *     },
 *     {
 *       "FieldName": "teste",
 *       "MaxCaracters": "",
 *       "DomainValues": "[0-10]#8[0-3][0]medium;#9[0-3][0]medium;#10[0-3][0]medium;#11[0-3][0]medium;#36[0-3][0]medium;#37[0-3][0]medium;#38[0-3][0]medium"
 *     }
 *   ]
 * }
 * ```
 */
"POST /api/catalog/pvt/attachment": {
body: AttachmentRequest
response: AttachmentResponse
}
/**
 * Retrieves information about all registered attachments. 
 *  >⚠️ To understand the specific syntax for Assembly Options attachments, read the [Assembly Options](https://help.vtex.com/en/tutorial/assembly-options--5x5FhNr4f5RUGDEGWzV1nH#assembly-options-syntax) documentation. 
 * ## Response body example
 * 
 * ```json
 * {
 *     "Page": 1,
 *     "Size": 11,
 *     "TotalRows": 11,
 *     "TotalPage": 1,
 *     "Data": [
 *         {
 *             "Id": 1,
 *             "Name": "Acessórios do bicho",
 *             "IsRequired": true,
 *             "IsActive": true,
 *             "Domains": [
 *                 {
 *                     "FieldName": "extra",
 *                     "MaxCaracters": "",
 *                     "DomainValues": "[0-3]#1[1-2][1]pricetable1;#3[0-2][0]pricetable2;#5[0-2][0]pricetable3"
 *                 }
 *             ]
 *         },
 *         {
 *             "Id": 2,
 *             "Name": "Sobrenome",
 *             "IsRequired": false,
 *             "IsActive": true,
 *             "Domains": []
 *         },
 *         {
 *             "Id": 3,
 *             "Name": "Assinatura Teste",
 *             "IsRequired": false,
 *             "IsActive": true,
 *             "Domains": [
 *                 {
 *                     "FieldName": " vtex.subscription.key.frequency",
 *                     "MaxCaracters": "",
 *                     "DomainValues": "1 day, 7 day, 1 month, 6 month"
 *                 },
 *                 {
 *                     "FieldName": "vtex.subscription.key.validity.begin",
 *                     "MaxCaracters": "",
 *                     "DomainValues": "1"
 *                 },
 *                 {
 *                     "FieldName": "vtex.subscription.key.validity.end",
 *                     "MaxCaracters": "",
 *                     "DomainValues": "31"
 *                 },
 *                 {
 *                     "FieldName": "vtex.subscription.key.purchaseday",
 *                     "MaxCaracters": "",
 *                     "DomainValues": "1, 2, 20, 31"
 *                 }
 *             ]
 *         },
 *         {
 *             "Id": 5,
 *             "Name": "teste",
 *             "IsRequired": false,
 *             "IsActive": true,
 *             "Domains": []
 *         },
 *         {
 *             "Id": 6,
 *             "Name": "teste2",
 *             "IsRequired": false,
 *             "IsActive": true,
 *             "Domains": []
 *         },
 *         {
 *             "Id": 7,
 *             "Name": "vtex.subscription.teste3",
 *             "IsRequired": false,
 *             "IsActive": true,
 *             "Domains": []
 *         },
 *         {
 *             "Id": 8,
 *             "Name": "teste api nova",
 *             "IsRequired": true,
 *             "IsActive": true,
 *             "Domains": [
 *                 {
 *                     "FieldName": "Basic teste",
 *                     "MaxCaracters": "",
 *                     "DomainValues": "[1-2]#9[1-1][1]basic;#11[0-1][1]basic"
 *                 },
 *                 {
 *                     "FieldName": "teste",
 *                     "MaxCaracters": "",
 *                     "DomainValues": "[0-10]#8[0-3][0]medium;#9[0-3][0]medium;#10[0-3][0]medium;#11[0-3][0]medium;#36[0-3][0]medium;#37[0-3][0]medium;#38[0-3][0]medium"
 *                 }
 *             ]
 *         },
 *         {
 *             "Id": 9,
 *             "Name": "vtex.subscription.teste",
 *             "IsRequired": false,
 *             "IsActive": true,
 *             "Domains": []
 *         },
 *         {
 *             "Id": 10,
 *             "Name": "Montagens",
 *             "IsRequired": false,
 *             "IsActive": true,
 *             "Domains": []
 *         },
 *         {
 *             "Id": 11,
 *             "Name": "vtex.subscription.subscription",
 *             "IsRequired": false,
 *             "IsActive": true,
 *             "Domains": [
 *                 {
 *                     "FieldName": "vtex.subscription.key.frequency",
 *                     "MaxCaracters": "15",
 *                     "DomainValues": "1 month"
 *                 },
 *                 {
 *                     "FieldName": "vtex.subscription.key.purchaseday",
 *                     "MaxCaracters": "15",
 *                     "DomainValues": "1,15,28"
 *                 }
 *             ]
 *         },
 *         {
 *             "Id": 12,
 *             "Name": "T-Shirt Customization",
 *             "IsRequired": false,
 *             "IsActive": true,
 *             "Domains": [
 *                 {
 *                     "FieldName": "T-Shirt Name",
 *                     "MaxCaracters": "15",
 *                     "DomainValues": "[]"
 *                 }
 *             ]
 *         }
 *     ]
 * }
 * ```
 */
"GET /api/catalog/pvt/attachments": {
response: {
/**
 * Current page of results.
 */
Page?: number
/**
 * Total number of results in the current page.
 */
Size?: number
/**
 * Total number of rows with results.
 */
TotalRows?: number
/**
 * Total number of pages with results.
 */
TotalPage?: number
/**
 * Array containing attachments data.
 */
Data?: AttachmentResponse[]
}
}
/**
 * Retrieves a list of all collections matching a filter.
 */
"GET /api/catalog_system/pvt/collection/search": {
searchParams: {
/**
 * Page number.
 */
page: number
/**
 * Number of the items of the page.
 */
pageSize: number
/**
 * Defines if the items of the page are in ascending order.
 */
orderByAsc: boolean
}
}
/**
 * Retrieves a list of Collection IDs of the inactive Collections.
 */
"GET /api/catalog/pvt/collection/inactive": {

}
/**
 * Creates a new collection.
 */
"POST /api/catalog/pvt/collection/": {
body: {
/**
 * Collection's Name.
 */
Name: string
/**
 * Collection's description for internal use, with the collection's details. It will not be used for search engines.
 */
Description: string
/**
 * Option making the collection searchable in the store.
 */
Searchable: boolean
/**
 * Option if you want the collection to highlight specific products using a tag.
 */
Highlight: boolean
/**
 * Collection start date and time. If a future date and time are set, the collection will have a scheduled status.
 */
DateFrom: string
/**
 * Collection end date and time.
 */
DateTo: string
}
}
/**
 * Retrieves a list of collections matching a filter.
 */
"GET /api/catalog_system/pvt/collection/search/:searchTerms": {
searchParams: {
/**
 * Page number.
 */
page?: number
/**
 * Number of the items of the page.
 */
pageSize?: number
/**
 * Defines if the items of the page are in ascending order.
 */
orderByAsc?: boolean
}
}
/**
 * Imports a sample of the imported XLS file. You need to save the response file to your device.
 */
"GET /api/catalog/pvt/collection/stockkeepingunit/importfileexample": {

}
/**
 * Adds products to a collection from the request body file. The file must be an imported template.
 */
"POST /api/catalog/pvt/collection/:collectionId/stockkeepingunit/importinsert": {

}
/**
 * Removes products from a collection from the request body file. The file must be an imported template.
 */
"POST /api/catalog/pvt/collection/:collectionId/stockkeepingunit/importexclude": {

}
/**
 * Retrieves information about the products from a collection.
 */
"GET /api/catalog/pvt/collection/:collectionId/products": {
searchParams: {
/**
 * Page number.
 */
page?: number
/**
 * Number of the items of the page.
 */
pageSize?: number
/**
 * Filter used to refine the Collection's products.
 */
Filter?: string
/**
 * Defines if the status of the product is active or not.
 */
Active?: boolean
/**
 * Defines if the product is visible on the store or not.
 */
Visible?: boolean
/**
 * Product's Category unique identifier.
 */
CategoryId?: number
/**
 * Product's Brand unique identifier.
 */
BrandId?: number
/**
 * Product's Supplier unique identifier.
 */
SupplierId?: number
/**
 * Product's Trade Policy unique identifier.
 */
SalesChannelId?: number
/**
 * Product past release date.
 */
ReleaseFrom?: string
/**
 * Product future release date.
 */
ReleaseTo?: string
/**
 * Product Specification Field Value. You must also fill in `SpecificationFieldId` to use this parameter.
 */
SpecificationProduct?: string
/**
 * Product Specification Field unique identifier.
 */
SpecificationFieldId?: number
}
}
/**
 *  >⚠️ There are two ways to configure collections, through Legacy CMS Portal or using the Beta Collection module. This endpoint is compatible with [collections configured through the Legacy CMS Portal](https://help.vtex.com/en/tutorial/adding-collections-cms--2YBy6P6X0NFRpkD2ZBxF6L).
 * 
 * Retrieves general information of a Collection.
 * 
 * ## Response body example
 * 
 * ```json
 * {
 *     "Id": 159,
 *     "Name": "Winter",
 *     "Description": null,
 *     "Searchable": false,
 *     "Highlight": false,
 *     "DateFrom": "2021-09-27T10:47:00",
 *     "DateTo": "2027-09-27T10:47:00",
 *     "TotalProducts": 0,
 *     "Type": "Manual"
 * }
 * ```
 */
"GET /api/catalog/pvt/collection/:collectionId": {
response: {
/**
 * Collection ID.
 */
Id?: number
/**
 * Collection Name.
 */
Name?: string
/**
 * Collection description.
 */
Description?: (null | string)
/**
 * Defines if the Collection is searchable or not.
 */
Searchable?: boolean
/**
 * Defines if the Collection is highlighted or not.
 */
Highlight?: boolean
/**
 * Initial value date for the Collection.
 */
DateFrom?: string
/**
 * Final value date for the Collection.
 */
DateTo?: string
/**
 * Total quantity of products in the collection.
 */
TotalProducts?: number
/**
 * Type of collection.
 */
Type?: string
}
}
/**
 *  >⚠️ There are two ways to configure collections, through Legacy CMS Portal or using the Beta Collection module. This endpoint is compatible with [collections configured through the Legacy CMS Portal](https://help.vtex.com/en/tutorial/adding-collections-cms--2YBy6P6X0NFRpkD2ZBxF6L).
 * 
 * Updates a previously created Collection.
 * ## Request body example
 * 
 * ```json
 * {
 *     "Name": "Winter",
 *     "Searchable": false,
 *     "Highlight": false,
 *     "DateFrom": "2021-09-27T10:47:00",
 *     "DateTo": "2027-09-27T10:47:00"
 * }
 * ```
 * 
 * ## Response body example
 * 
 * ```json
 * {
 *     "Id": 159,
 *     "Name": "Winter",
 *     "Description": null,
 *     "Searchable": false,
 *     "Highlight": false,
 *     "DateFrom": "2021-09-27T10:47:00",
 *     "DateTo": "2027-09-27T10:47:00",
 *     "TotalProducts": 0,
 *     "Type": "Manual"
 * }
 * ```
 */
"PUT /api/catalog/pvt/collection/:collectionId": {
body: {
/**
 * Collection Name.
 */
Name: string
/**
 * Defines if the Collection is searchable or not.
 */
Searchable: boolean
/**
 * Defines if the Collection is highlighted or not
 */
Highlight: boolean
/**
 * Initial value date for the Collection.
 */
DateFrom: string
/**
 * Final value date for the Collection.
 */
DateTo: string
}
response: {
/**
 * Collection ID.
 */
Id?: number
/**
 * Collection Name.
 */
Name?: string
/**
 * Collection description.
 */
Description?: (null | string)
/**
 * Defines if the Collection is searchable or not.
 */
Searchable?: boolean
/**
 * Defines if the Collection is highlighted or not.
 */
Highlight?: boolean
/**
 * Initial value date for the Collection.
 */
DateFrom?: string
/**
 * Final value date for the Collection.
 */
DateTo?: string
/**
 * Total quantity of products in the collection.
 */
TotalProducts?: number
/**
 * Type of collection.
 */
Type?: string
}
}
/**
 *  >⚠️ There are two ways to configure collections, through Legacy CMS Portal or using the Beta Collection module. This endpoint is compatible with [collections configured through the Legacy CMS Portal](https://help.vtex.com/en/tutorial/adding-collections-cms--2YBy6P6X0NFRpkD2ZBxF6L).
 * 
 * Deletes a previously existing Collection.
 */
"DELETE /api/catalog/pvt/collection/:collectionId": {

}
/**
 *  >⚠️ There are two ways to configure collections, through Legacy CMS Portal or using the Beta Collection module. This endpoint is compatible with [collections configured through the Legacy CMS Portal](https://help.vtex.com/en/tutorial/adding-collections-cms--2YBy6P6X0NFRpkD2ZBxF6L).
 * 
 * Creates a new Collection.
 * ## Request body example
 * 
 * ```json
 * {
 *     "Name": "Winter",
 *     "Searchable": false,
 *     "Highlight": false,
 *     "DateFrom": "2021-09-27T10:47:00",
 *     "DateTo": "2027-09-27T10:47:00"
 * }
 * ```
 * 
 * ## Response body example
 * 
 * ```json
 * {
 *     "Id": 159,
 *     "Name": "Winter",
 *     "Description": null,
 *     "Searchable": false,
 *     "Highlight": false,
 *     "DateFrom": "2021-09-27T10:47:00",
 *     "DateTo": "2027-09-27T10:47:00",
 *     "TotalProducts": 0,
 *     "Type": "Manual"
 * }
 * ```
 */
"POST /api/catalog/pvt/collection": {
body: {
/**
 * Collection Name.
 */
Name: string
/**
 * Defines if the Collection is searchable or not.
 */
Searchable: boolean
/**
 * Defines if the Collection is highlighted or not.
 */
Highlight: boolean
/**
 * Initial value date for the Collection.
 */
DateFrom: string
/**
 * Final value date for the Collection.
 */
DateTo: string
}
response: {
/**
 * Collection ID.
 */
Id?: number
/**
 * Collection Name.
 */
Name?: string
/**
 * Collection description.
 */
Description?: (null | string)
/**
 * Defines if the Collection is searchable or not.
 */
Searchable?: boolean
/**
 * Defines if the Collection is highlighted or not.
 */
Highlight?: boolean
/**
 * Initial value date for the Collection.
 */
DateFrom?: string
/**
 * Final value date for the Collection.
 */
DateTo?: string
/**
 * Total quantity of products in the collection.
 */
TotalProducts?: number
/**
 * Type of collection.
 */
Type?: string
}
}
/**
 *  >⚠️ There are two ways to configure collections, through Legacy CMS Portal or using the Beta Collection module. This endpoint is compatible with [collections configured through the Legacy CMS Portal](https://help.vtex.com/en/tutorial/adding-collections-cms--2YBy6P6X0NFRpkD2ZBxF6L).
 * 
 * Retrieves all Subcollections given a Collection ID. A Subcollection is a [Group](https://help.vtex.com/en/tutorial/adding-collections-cms--2YBy6P6X0NFRpkD2ZBxF6L#group-types) within a  Collection.
 * ## Response body example
 * 
 * ```json
 * [
 *     {
 *         "Id": 12,
 *         "CollectionId": 149,
 *         "Name": "Subcollection",
 *         "Type": "Inclusive",
 *         "PreSale": false,
 *         "Release": true
 *     },
 *     {
 *         "Id": 13,
 *         "CollectionId": 149,
 *         "Name": "Test",
 *         "Type": "Exclusive",
 *         "PreSale": true,
 *         "Release": false
 *     },
 *     {
 *         "Id": 14,
 *         "CollectionId": 149,
 *         "Name": "asdfghj",
 *         "Type": "Inclusive",
 *         "PreSale": false,
 *         "Release": false
 *     }
 * ]
 * ```
 */
"GET /api/catalog/pvt/collection/:collectionId/subcollection": {
response: {
/**
 * Subcollection ID.
 */
Id?: number
/**
 * Collection ID.
 */
CollectionId?: number
/**
 * Subcollection Name.
 */
Name?: string
/**
 * Either `“Exclusive”` (all the products contained in it will not be used) or `“Inclusive”` (all the products contained in it will be used).
 */
Type?: string
/**
 * Defines if the collection is on PreSale.
 */
PreSale?: boolean
/**
 * Defines if the collection is a new released one.
 */
Release?: boolean
}[]
}
/**
 *  >⚠️ There are two ways to configure collections, through Legacy CMS Portal or using the Beta Collection module. This endpoint is compatible with [collections configured through the Legacy CMS Portal](https://help.vtex.com/en/tutorial/adding-collections-cms--2YBy6P6X0NFRpkD2ZBxF6L).
 * 
 * Retrieves information about a Subcollection, which is a [Group](https://help.vtex.com/en/tutorial/adding-collections-cms--2YBy6P6X0NFRpkD2ZBxF6L#group-types) within a  Collection.
 * ## Response body example
 * 
 * ```json
 * {
 *     "Id": 13,
 *     "CollectionId": 149,
 *     "Name": "Test",
 *     "Type": "Exclusive",
 *     "PreSale": true,
 *     "Release": false
 * }
 * ```
 */
"GET /api/catalog/pvt/subcollection/:subCollectionId": {
response: {
/**
 * Subcollection ID.
 */
Id?: number
/**
 * Collection ID.
 */
CollectionId?: number
/**
 * Subcollection Name.
 */
Name?: string
/**
 * Either `“Exclusive”` (all the products contained in it will not be used) or `“Inclusive”` (all the products contained in it will be used).
 */
Type?: string
/**
 * Defines if the collection is on PreSale.
 */
PreSale?: boolean
/**
 * Defines if the collection is a new released one.
 */
Release?: boolean
}
}
/**
 *  >⚠️ There are two ways to configure collections, through Legacy CMS Portal or using the Beta Collection module. This endpoint is compatible with [collections configured through the Legacy CMS Portal](https://help.vtex.com/en/tutorial/adding-collections-cms--2YBy6P6X0NFRpkD2ZBxF6L).
 * 
 * Updates a previously created Subcollection, which is a [Group](https://help.vtex.com/en/tutorial/adding-collections-cms--2YBy6P6X0NFRpkD2ZBxF6L#group-types) within a  Collection.
 * 
 * ## Request or response body example
 * 
 * ```json
 * {
 *     "CollectionId": 149,
 *     "Name": "Test",
 *     "Type": "Exclusive",
 *     "PreSale": true,
 *     "Release": false
 * }
 * ```
 */
"PUT /api/catalog/pvt/subcollection/:subCollectionId": {
body: {
/**
 * Collection ID.
 */
CollectionId: number
/**
 * Subcollection Name.
 */
Name: string
/**
 * Either `“Exclusive”` (all the products contained in it will not be used) or `“Inclusive”` (all the products contained in it will be used).
 */
Type: string
/**
 * Defines PreSale date.
 */
PreSale: boolean
/**
 * Defines Release date.
 */
Release: boolean
}
response: {
/**
 * Subcollection ID.
 */
Id?: number
/**
 * Collection ID.
 */
CollectionId?: number
/**
 * Subcollection Name.
 */
Name?: string
/**
 * Either `“Exclusive”` (all the products contained in it will not be used) or `“Inclusive”` (all the products contained in it will be used).
 */
Type?: string
/**
 * Defines if the collection is on PreSale.
 */
PreSale?: boolean
/**
 * Defines if the collection is a new released one.
 */
Release?: boolean
}
}
/**
 *  >⚠️ There are two ways to configure collections, through Legacy CMS Portal or using the Beta Collection module. This endpoint is compatible with [collections configured through the Legacy CMS Portal](https://help.vtex.com/en/tutorial/adding-collections-cms--2YBy6P6X0NFRpkD2ZBxF6L).
 * 
 * Deletes a previously created Subcollection, which is a [Group](https://help.vtex.com/en/tutorial/adding-collections-cms--2YBy6P6X0NFRpkD2ZBxF6L#group-types) within a  Collection.
 */
"DELETE /api/catalog/pvt/subcollection/:subCollectionId": {

}
/**
 *  >⚠️ There are two ways to configure collections, through Legacy CMS Portal or using the Beta Collection module. This endpoint is compatible with [collections configured through the Legacy CMS Portal](https://help.vtex.com/en/tutorial/adding-collections-cms--2YBy6P6X0NFRpkD2ZBxF6L).
 * 
 * Creates a new Subcollection, which is a [Group](https://help.vtex.com/en/tutorial/adding-collections-cms--2YBy6P6X0NFRpkD2ZBxF6L#group-types) within a  Collection. A Subcollection can be either “Exclusive” (all the products contained in it will not be used) or “Inclusive” (all the products contained in it will be used).
 * ## Request body example
 * 
 * ```json
 * {
 *     "CollectionId": 149,
 *     "Name": "Test",
 *     "Type": "Exclusive",
 *     "PreSale": true,
 *     "Release": false
 * }
 * ```
 * ## Response body example
 * 
 * ```json
 * {
 *     "Id": 13,
 *     "CollectionId": 149,
 *     "Name": "Test",
 *     "Type": "Exclusive",
 *     "PreSale": true,
 *     "Release": false
 * }
 * ```
 */
"POST /api/catalog/pvt/subcollection": {
body: {
/**
 * SubCollection ID.
 */
CollectionId: number
/**
 * SubCollection Name.
 */
Name: string
/**
 * Either `“Exclusive”` (all the products contained in it will not be used) or `“Inclusive”` (all the products contained in it will be used).
 */
Type: string
/**
 * Defines PreSale date.
 */
PreSale: boolean
/**
 * Defines Release date.
 */
Release: boolean
}
response: {
/**
 * Subcollection ID.
 */
Id?: number
/**
 * Collection ID.
 */
CollectionId?: number
/**
 * Subcollection Name.
 */
Name?: string
/**
 * Either `“Exclusive”` (all the products contained in it will not be used) or `“Inclusive”` (all the products contained in it will be used).
 */
Type?: string
/**
 * Defines if the collection is on PreSale.
 */
PreSale?: boolean
/**
 * Defines if the collection is a new released one.
 */
Release?: boolean
}
}
/**
 *  >⚠️ There are two ways to configure collections, through Legacy CMS Portal or using the Beta Collection module. This endpoint is compatible with [collections configured through the Legacy CMS Portal](https://help.vtex.com/en/tutorial/adding-collections-cms--2YBy6P6X0NFRpkD2ZBxF6L).
 * 
 * Edits the position of an SKU that already exists in the Subcollection,  which is a [Group](https://help.vtex.com/en/tutorial/adding-collections-cms--2YBy6P6X0NFRpkD2ZBxF6L#group-types) within a  Collection.
 * ## Request body example
 * 
 * ```json
 * {
 *      "skuId": 1,
 *      "position": 1,
 *      "subCollectionId": 17
 * }
 * ```
 */
"POST /api/catalog/pvt/collection/:collectionId/position": {
body: {
/**
 * SKU ID.
 */
skuId: number
/**
 * SKU position.
 */
position: number
/**
 * Subcollection ID.
 */
subCollectionId: number
}
}
/**
 * Retrieves information of a Product or SKU Specification. 
 * ## Response body example
 * 
 * ```json
 * {
 *     "Id": 88,
 *     "FieldTypeId": 1,
 *     "CategoryId": 4,
 *     "FieldGroupId": 20,
 *     "Name": "Material",
 *     "Description": "Composition of the product.",
 *     "Position": 1,
 *     "IsFilter": true,
 *     "IsRequired": true,
 *     "IsOnProductDetails": false,
 *     "IsStockKeepingUnit": false,
 *     "IsWizard": false,
 *     "IsActive": true,
 *     "IsTopMenuLinkActive": false,
 *     "IsSideMenuLinkActive": true,
 *     "DefaultValue": "Cotton"
 * }
 * ```
 * 
 */
"GET /api/catalog/pvt/specification/:specificationId": {
response: {
/**
 * Created Specification’s ID.
 */
Id: number
/**
 * Field Type can be `1 - Text`, `2 - Multi-Line Text`, `4 - Number`, `5 - Combo`, `6 - Radio`, `7 - Checkbox`, `8 - Indexed Text`, `9 - Indexed Multi-Line Text`.
 */
FieldTypeId: number
/**
 * Specification Category ID.
 */
CategoryId: number
/**
 * Numerical ID of the Group of Specifications that contains the new Specification.
 */
FieldGroupId: number
/**
 * Specification name.  Limited to 100 characters.
 */
Name: string
/**
 * Specification Description.
 */
Description: string
/**
 * The current Specification's position in comparison to the other Specifications.
 */
Position: number
/**
 * Defines if the Specification can be used as a Filter.
 */
IsFilter: boolean
/**
 * Defines if the Specification is required or not.
 */
IsRequired: boolean
/**
 * Defines if the Specification will be shown on the Product screen in the specification area.
 */
IsOnProductDetails: boolean
/**
 * Defines if the Specification is applied to a specific SKU.
 */
IsStockKeepingUnit: boolean
/**
 * @deprecated
 * Deprecated
 */
IsWizard: boolean
/**
 * Defines if the Specification is active or not.
 */
IsActive: boolean
/**
 * Defines if the Specification is shown in the main menu of the site.
 */
IsTopMenuLinkActive: boolean
/**
 * Defines if the Specification is shown in the side menu.
 */
IsSideMenuLinkActive: boolean
/**
 * Specification Default Value.
 */
DefaultValue: (null | string)
}
}
/**
 * Updates a Product Specification or SKU Specification.
 * 
 * >⚠️ It is not possible to edit `FieldTypeId`, `CategoryId`, `FieldGroupId` or `IsStockKeepingUnit` in this API call.
 * 
 * ## Request body example
 * 
 * ```json
 * {
 *     "FieldTypeId": 1,
 *     "CategoryId": 4,
 *     "FieldGroupId": 20,
 *     "Name": "Material",
 *     "Description": "Composition of the product.",
 *     "Position": 1,
 *     "IsFilter": true,
 *     "IsRequired": true,
 *     "IsOnProductDetails": false,
 *     "IsStockKeepingUnit": false,
 *     "IsActive": true,
 *     "IsTopMenuLinkActive": false,
 *     "IsSideMenuLinkActive": true,
 *     "DefaultValue": "Leather"
 * }
 * ```
 * 
 * ## Response body example
 * 
 * ```json
 * {
 *     "Id": 88,
 *     "FieldTypeId": 1,
 *     "CategoryId": 4,
 *     "FieldGroupId": 20,
 *     "Name": "Material",
 *     "Description": "Composition of the product.",
 *     "Position": 1,
 *     "IsFilter": true,
 *     "IsRequired": true,
 *     "IsOnProductDetails": false,
 *     "IsStockKeepingUnit": false,
 *     "IsWizard": false,
 *     "IsActive": true,
 *     "IsTopMenuLinkActive": false,
 *     "IsSideMenuLinkActive": true,
 *     "DefaultValue": "Leather"
 * }
 * ```
 * 
 */
"PUT /api/catalog/pvt/specification/:specificationId": {
body: {
/**
 * Field Type can be `1 - Text`, `2 - Multi-Line Text`, `4 - Number`, `5 - Combo`, `6 - Radio`, `7 - Checkbox`, `8 - Indexed Text`, `9 - Indexed Multi-Line Text`. This information is not editable.
 */
FieldTypeId: number
/**
 * Specification Category ID. This information is not editable.
 */
CategoryId: number
/**
 * Numerical ID of the Group of Specifications that contains the new Specification. This information is not editable.
 */
FieldGroupId: number
/**
 * Specification name. Limited to 100 characters.
 */
Name: string
/**
 * Specification Description.
 */
Description: string
/**
 * The current Specification's position in comparison to the other Specifications.
 */
Position: number
/**
 * Defines if the Specification can be used as a Filter.
 */
IsFilter: boolean
/**
 * Defines if the Specification is required or not.
 */
IsRequired: boolean
/**
 * Defines if the Specification will be  shown on the Product screen in the specification area.
 */
IsOnProductDetails: boolean
/**
 * Defines if the Specification is applied to a specific SKU. This information is not editable.
 */
IsStockKeepingUnit: boolean
/**
 * @deprecated
 * Deprecated
 */
IsWizard: boolean
/**
 * Defines if the Specification is active or not.
 */
IsActive: boolean
/**
 * Defines if the Specification is shown in the main menu of the site.
 */
IsTopMenuLinkActive: boolean
/**
 * Defines if the Specification is shown in the side menu.
 */
IsSideMenuLinkActive: boolean
/**
 * Specification Default Value.
 */
DefaultValue: string
}
response: {
/**
 * Specification ID.
 */
Id?: number
/**
 * Field Type ID can be `1 - Text`, `2 - Multi-Line Text`, `4 - Number`, `5 - Combo`, `6 - Radio`, `7 - Checkbox`, `8 - Indexed Text`, `9 - Indexed Multi-Line Text`.
 */
FieldTypeId?: number
/**
 * Category ID associated with this specification.
 */
CategoryId?: number
/**
 * ID of the group of specifications that contains the new specification.
 */
FieldGroupId?: number
/**
 * Specification name. Limited to 100 characters.
 */
Name?: string
/**
 * @deprecated
 */
Description?: (null | string)
/**
 * Store Framework - Deprecated.
 * Legacy CMS Portal - This position number is used in ordering the specifications both in the navigation menu and in the specification listing on the product page.
 * 
 */
Position?: number
/**
 * Store Framework - Deprecated.
 * Legacy CMS Portal - To allow the specification to be used as a facet (filter) on the search navigation bar.
 * 
 */
IsFilter?: boolean
/**
 * Makes the specification mandatory (`true`) or optional (`false`).
 */
IsRequired?: boolean
/**
 * Store Framework - Deprecated.
 * Legacy CMS Portal -If specification is visible on the product page.
 * 
 */
IsOnProductDetails?: boolean
/**
 * If `true`, it will be added as a SKU specification. If `false`, it will be added as a product specification field.
 */
IsStockKeepingUnit?: boolean
/**
 * @deprecated
 */
IsWizard?: (null | boolean)
/**
 * Enable (`true`) or disable (`false`) specification.
 */
IsActive?: boolean
/**
 * Store Framework - Deprecated.
 * Legacy CMS Portal - To make the specification visible in the store's upper menu.
 * 
 */
IsTopMenuLinkActive?: boolean
/**
 * Store Framework - Deprecated.
 * Legacy CMS Portal - To make the specification field clickable in the search navigation bar.
 * 
 */
IsSideMenuLinkActive?: boolean
/**
 * Specification default value.
 */
DefaultValue?: string
}
}
/**
 * Creates a new Product or SKU Specification. 
 * ## Request body example
 * 
 * ```json
 * {
 *     "FieldTypeId": 1,
 *     "CategoryId": 4,
 *     "FieldGroupId": 20,
 *     "Name": "Material",
 *     "Description": "Composition of the product.",
 *     "Position": 1,
 *     "IsFilter": true,
 *     "IsRequired": true,
 *     "IsOnProductDetails": false,
 *     "IsStockKeepingUnit": false,
 *     "IsActive": true,
 *     "IsTopMenuLinkActive": false,
 *     "IsSideMenuLinkActive": true,
 *     "DefaultValue": "Cotton"
 * }
 * ```
 * 
 * ## Response body example
 * 
 * ```json
 * {
 *     "Id": 88,
 *     "FieldTypeId": 1,
 *     "CategoryId": 4,
 *     "FieldGroupId": 20,
 *     "Name": "Material",
 *     "Description": "Composition of the product.",
 *     "Position": 1,
 *     "IsFilter": true,
 *     "IsRequired": true,
 *     "IsOnProductDetails": false,
 *     "IsStockKeepingUnit": false,
 *     "IsWizard": false,
 *     "IsActive": true,
 *     "IsTopMenuLinkActive": false,
 *     "IsSideMenuLinkActive": true,
 *     "DefaultValue": "Cotton"
 * }
 * ```
 * 
 */
"POST /api/catalog/pvt/specification": {
body: {
/**
 * Field Type ID can be `1 - Text`, `2 - Multi-Line Text`, `4 - Number`, `5 - Combo`, `6 - Radio`, `7 - Checkbox`, `8 - Indexed Text`, `9 - Indexed Multi-Line Text`.
 */
FieldTypeId: number
/**
 * Category ID associated with this specification.
 */
CategoryId?: number
/**
 * ID of the group of specifications that contains the new specification.
 */
FieldGroupId: number
/**
 * Specification name. Limited to 100 characters.
 */
Name: string
/**
 * @deprecated
 */
Description?: (null | string)
/**
 * Store Framework - Deprecated.
 * Legacy CMS Portal - This position number is used in ordering the specifications both in the navigation menu and in the specification listing on the product page.
 * 
 */
Position?: number
/**
 * Store Framework - Deprecated.
 * Legacy CMS Portal - To allow the specification to be used as a facet (filter) on the search navigation bar.
 * 
 */
IsFilter?: boolean
/**
 * Makes the specification mandatory (`true`) or optional (`false`).
 */
IsRequired?: boolean
/**
 * Store Framework - Deprecated.
 * Legacy CMS Portal -If specification is visible on the product page.
 * 
 */
IsOnProductDetails?: boolean
/**
 * If `true`, it will be added as a SKU specification. If `false`, it will be added as a product specification field.
 */
IsStockKeepingUnit?: boolean
/**
 * @deprecated
 */
IsWizard?: (null | boolean)
/**
 * Enable (`true`) or disable (`false`) specification.
 */
IsActive?: boolean
/**
 * Store Framework - Deprecated.
 * Legacy CMS Portal - To make the specification visible in the store's upper menu.
 * 
 */
IsTopMenuLinkActive?: boolean
/**
 * Store Framework - Deprecated.
 * Legacy CMS Portal - To make the specification field clickable in the search navigation bar.
 * 
 */
IsSideMenuLinkActive?: boolean
/**
 * Specification default value.
 */
DefaultValue?: string
}
response: {
/**
 * Specification ID.
 */
Id?: number
/**
 * Field Type ID can be `1 - Text`, `2 - Multi-Line Text`, `4 - Number`, `5 - Combo`, `6 - Radio`, `7 - Checkbox`, `8 - Indexed Text`, `9 - Indexed Multi-Line Text`.
 */
FieldTypeId?: number
/**
 * Category ID associated with this specification.
 */
CategoryId?: number
/**
 * ID of the group of specifications that contains the new specification.
 */
FieldGroupId?: number
/**
 * Specification name. Limited to 100 characters.
 */
Name?: string
/**
 * @deprecated
 */
Description?: (null | string)
/**
 * Store Framework - Deprecated.
 * Legacy CMS Portal - This position number is used in ordering the specifications both in the navigation menu and in the specification listing on the product page.
 * 
 */
Position?: number
/**
 * Store Framework - Deprecated.
 * Legacy CMS Portal - To allow the specification to be used as a facet (filter) on the search navigation bar.
 * 
 */
IsFilter?: boolean
/**
 * Makes the specification mandatory (`true`) or optional (`false`).
 */
IsRequired?: boolean
/**
 * Store Framework - Deprecated.
 * Legacy CMS Portal -If specification is visible on the product page.
 * 
 */
IsOnProductDetails?: boolean
/**
 * If `true`, it will be added as a SKU specification. If `false`, it will be added as a product specification field.
 */
IsStockKeepingUnit?: boolean
/**
 * @deprecated
 */
IsWizard?: (null | boolean)
/**
 * Enable (`true`) or disable (`false`) specification.
 */
IsActive?: boolean
/**
 * Store Framework - Deprecated.
 * Legacy CMS Portal - To make the specification visible in the store's upper menu.
 * 
 */
IsTopMenuLinkActive?: boolean
/**
 * Store Framework - Deprecated.
 * Legacy CMS Portal - To make the specification field clickable in the search navigation bar.
 * 
 */
IsSideMenuLinkActive?: boolean
/**
 * Specification default value.
 */
DefaultValue?: string
}
}
/**
 * Retrieves details from a specification field by this field's ID. 
 * >⚠️ This is a legacy endpoint. We recommend using [Get Specification](https://developers.vtex.com/vtex-rest-api/reference/get_api-catalog-pvt-specification-specificationid) instead.
 * 
 * ## Response body example
 * 
 * ```json
 * {
 *     "Name": "Material",
 *     "CategoryId": 4,
 *     "FieldId": 88,
 *     "IsActive": true,
 *     "IsRequired": true,
 *     "FieldTypeId": 1,
 *     "FieldTypeName": "Texto",
 *     "FieldValueId": null,
 *     "Description": "Composition of the product.",
 *     "IsStockKeepingUnit": false,
 *     "IsFilter": true,
 *     "IsOnProductDetails": false,
 *     "Position": 1,
 *     "IsWizard": false,
 *     "IsTopMenuLinkActive": false,
 *     "IsSideMenuLinkActive": true,
 *     "DefaultValue": null,
 *     "FieldGroupId": 20,
 *     "FieldGroupName": "Clothes specifications"
 * }
 * ```
 * 
 * 
 */
"GET /api/catalog_system/pub/specification/fieldGet/:fieldId": {
response: {
/**
 * Specification field name.
 */
Name?: string
/**
 * Specification field ID.
 */
FieldId?: number
/**
 * Enable (`true`) or disable (`false`) specification.
 */
IsActive?: boolean
/**
 * Makes the specification mandatory (`true`) or optional (`false`).
 */
IsRequired?: boolean
/**
 * Field Type ID can be `1 - Text`, `2 - Multi-Line Text`, `4 - Number`, `5 - Combo`, `6 - Radio`, `7 - Checkbox`, `8 - Indexed Text`, `9 - Indexed Multi-Line Text`.
 */
FieldTypeId?: number
/**
 * Field Type name, which can be `Text`, `Multi-Line Text`, `Number`, `Combo`, `Radio`, `Checkbox`, `Indexed Text` or `Indexed Multi-Line Text`.
 */
FieldTypeName?: string
/**
 * Specification value ID.
 */
FieldValueId?: (null | number)
/**
 * @deprecated
 */
Description?: (null | string)
/**
 * If `true`, it will be added as a SKU specification. If `false`, it will be added as a product specification field.
 */
IsStockKeepingUnit?: boolean
/**
 * Store Framework - Deprecated.
 * Legacy CMS Portal - To allow the specification to be used as a facet (filter) on the search navigation bar.
 * 
 */
IsFilter?: boolean
/**
 * Store Framework - Deprecated.
 * Legacy CMS Portal -If specification is visible on the product page.
 * 
 */
IsOnProductDetails?: boolean
/**
 * Store Framework - Deprecated.
 * Legacy CMS Portal - This position number is used in ordering the specifications both in the navigation menu and in the specification listing on the product page.
 * 
 */
Position?: number
/**
 * @deprecated
 */
IsWizard?: (null | boolean)
/**
 * Store Framework - Deprecated.
 * Legacy CMS Portal - To make the specification visible in the store's upper menu.
 * 
 */
IsTopMenuLinkActive?: boolean
/**
 * Store Framework - Deprecated.
 * Legacy CMS Portal - To make the specification field clickable in the search navigation bar.
 * 
 */
IsSideMenuLinkActive?: boolean
/**
 * Specification default value.
 */
DefaultValue?: (null | string)
/**
 * ID of the group of specifications that contains the new specification.
 */
FieldGroupId?: number
/**
 * Specification Field Group Name.
 */
FieldGroupName?: string
}
}
/**
 * Creates a specification field in a category. 
 * >⚠️ This is a legacy endpoint. We recommend using [Create Specification](https://developers.vtex.com/vtex-rest-api/reference/catalog-api-post-specification) instead.
 * 
 * ## Request body example
 * 
 * ```json
 * {
 *     "Name": "Material",
 *     "CategoryId": 4,
 *     "FieldId": 88,
 *     "IsActive": true,
 *     "IsRequired": true,
 *     "FieldTypeId": 1,
 *     "FieldValueId": 1,
 *     "IsStockKeepingUnit": false,
 *     "Description": "Composition of the product.",
 *     "IsFilter": true,
 *     "IsOnProductDetails": false,
 *     "Position": 1,
 *     "IsWizard": false,
 *     "IsTopMenuLinkActive": true,
 *     "IsSideMenuLinkActive": true,
 *     "DefaultValue": null,
 *     "FieldGroupId": 20,
 *     "FieldGroupName": "Clothes specifications"
 * }
 * ```
 * 
 * ## Response body example
 * 
 * ```json
 * 89
 * ```
 */
"POST /api/catalog_system/pvt/specification/field": {
body: SpecificationsInsertFieldRequest
/**
 * Specification field ID.
 */
response: number
}
/**
 * Updates a specification field in a category. 
 * >⚠️ This is a legacy endpoint. We recommend using [Update Specification](https://developers.vtex.com/vtex-rest-api/reference/catalog-api-put-specification) instead.
 * 
 * ## Request body example
 * 
 * ```json
 * {
 *     "FieldId": 89,
 *     "Name": "Material",
 *     "CategoryId": 4,
 *     "IsActive": true,
 *     "IsRequired": true,
 *     "FieldTypeId": 1,
 *     "Description": "Composition of the product.",
 *     "IsStockKeepingUnit": false,
 *     "IsFilter": true,
 *     "IsOnProductDetails": true,
 *     "Position": 1,
 *     "IsWizard": false,
 *     "IsTopMenuLinkActive": false,
 *     "IsSideMenuLinkActive": false,
 *     "DefaultValue": "Cotton",
 *     "FieldGroupId": 20,
 *     "FieldGroupName": "Clothes specifications"
 * }
 * ```
 * 
 * ## Response body example
 * 
 * ```json
 * 89
 * ```
 */
"PUT /api/catalog_system/pvt/specification/field": {
body: SpecificationsInsertFieldUpdateRequest
/**
 * Specification field ID.
 */
response: number
}
/**
 * Retrieves details from a specification field's value by this value's ID. 
 * >⚠️ This is a legacy endpoint. We recommend using [Get Specification Value](https://developers.vtex.com/vtex-rest-api/reference/catalog-api-get-specification-value-id) instead.
 * 
 * ## Response body example
 * 
 * ```json
 * {
 *     "FieldValueId": 143,
 *     "FieldId": 34,
 *     "Name": "TesteInsert",
 *     "Text": "Value Description",
 *     "IsActive": true,
 *     "Position": 100
 * }
 * ```
 */
"GET /api/catalog_system/pvt/specification/fieldValue/:fieldValueId": {
response: {
/**
 * Specification Field Value ID.
 */
FieldValueId?: number
/**
 * Specification Field ID.
 */
FieldId?: number
/**
 * Specification Field Value Name.
 */
Name?: string
/**
 * Specification Field Value Description.
 */
Text?: string
/**
 * Defines if the Specification Field Value is active (`true`) or inactive (`false`).
 */
IsActive?: boolean
/**
 * Specification Field Value Position.
 */
Position?: number
}
}
/**
 * Gets a list of all specification values from a Specification Field by this field's ID. 
 * 
 * ## Response body example
 * 
 * ```json
 * [
 *     {
 *         "FieldValueId": 52,
 *         "Value": "0 a 6 meses",
 *         "IsActive": true,
 *         "Position": 1
 *     },
 *     {
 *         "FieldValueId": 53,
 *         "Value": "1 a 2 anos",
 *         "IsActive": true,
 *         "Position": 4
 *     },
 *     {
 *         "FieldValueId": 54,
 *         "Value": "3 a 4 anos",
 *         "IsActive": true,
 *         "Position": 3
 *     },
 *     {
 *         "FieldValueId": 55,
 *         "Value": "5 a 6 anos",
 *         "IsActive": true,
 *         "Position": 2
 *     },
 *     {
 *         "FieldValueId": 56,
 *         "Value": "7 a 8 anos",
 *         "IsActive": true,
 *         "Position": 5
 *     },
 *     {
 *         "FieldValueId": 57,
 *         "Value": "9 a 10 anos",
 *         "IsActive": true,
 *         "Position": 6
 *     },
 *     {
 *         "FieldValueId": 58,
 *         "Value": "Acima de 10 anos",
 *         "IsActive": true,
 *         "Position": 7
 *     }
 * ]
 * ```
 */
"GET /api/catalog_system/pub/specification/fieldvalue/:fieldId": {
response: GetSpecFieldValue[]
}
/**
 * Creates a specification field value by the specification field's ID. 
 * >⚠️ This is a legacy endpoint. We recommend using [Create Specification Value](https://developers.vtex.com/docs/api-reference/catalog-api#post-/api/catalog/pvt/specificationvalue) instead.
 * 
 * 
 * ## Request body example
 * 
 * ```json
 * {
 *     "FieldId": 34,
 *     "Name": "Cotton",
 *     "Text": "Cotton fibers",
 *     "IsActive": true,
 *     "Position": 100
 * }
 * ```
 * 
 * ## Response body example
 * 
 * ```json
 * {
 *     "FieldValueId": 143,
 *     "FieldId": 34,
 *     "Name": "Cotton",
 *     "Text": "Cotton fibers",
 *     "IsActive": true,
 *     "Position": 100
 * }
 * ```
 */
"POST /api/catalog_system/pvt/specification/fieldValue": {
body: SpecificationsInsertFieldValueRequest
response: {
/**
 * Specification Field Value ID.
 */
FieldValueId?: number
/**
 * Specification Field ID.
 */
FieldId?: number
/**
 * Specification Field Value Name.
 */
Name?: string
/**
 * Specification Field Value Description.
 */
Text?: string
/**
 * Defines if the Specification Field Value is active (`true`) or inactive (`false`).
 */
IsActive?: boolean
/**
 * Specification Field Value Position.
 */
Position?: number
}
}
/**
 * Updates a specification field value by the specification field's ID. 
 * >⚠️ This is a legacy endpoint. We recommend using [Update Specification Field Value](https://developers.vtex.com/vtex-rest-api/reference/catalog-api-put-specification-value-id) instead.
 * 
 * 
 * ## Request body example
 * 
 * ```json
 * {
 *     "FieldId": 1,
 *     "FieldValueId": 143,
 *     "Name": "Cotton",
 *     "Text": "Cotton fibers",
 *     "IsActive": true,
 *     "Position": 100
 * }
 * ```
 * 
 * ## Response body example (200 OK)
 * 
 * ```json
 * "Field Value Updated"
 * ```
 */
"PUT /api/catalog_system/pvt/specification/fieldValue": {
body: SpecificationsUpdateFieldValueRequest
/**
 * Status of the request.
 */
response: string
}
/**
 * Retrieves general information about a Specification Value. 
 * ## Response body example
 * 
 * ```json
 * {
 *     "FieldValueId": 143,
 *     "FieldId": 34,
 *     "Name": "Cotton",
 *     "Text": "Cotton fibers",
 *     "IsActive": true,
 *     "Position": 100
 * }
 * ```
 */
"GET /api/catalog/pvt/specificationvalue/:specificationValueId": {
response: {
/**
 * Specification Field Value ID.
 */
FieldValueId?: number
/**
 * Specification Field ID.
 */
FieldId?: number
/**
 * Specification Field Value Name.
 */
Name?: string
/**
 * Specification Field Value Description.
 */
Text?: string
/**
 * Defines if the Specification Field Value is active (`true`) or inactive (`false`).
 */
IsActive?: boolean
/**
 * Specification Field Value Position.
 */
Position?: number
}
}
/**
 * Updates a new Specification Value for a Category. 
 * ## Request body example
 * 
 * ```json
 * {
 *     "FieldId": 193,
 *     "Name": "Metal",
 *     "Text": null,
 *     "IsActive": true,
 *     "Position": 1
 *   }
 * ```
 * 
 * ## Response body example
 * 
 * ```json
 * {
 *   "FieldValueId": 360,
 *   "FieldId": 193,
 *   "Name": "Metal",
 *   "Text": null,
 *   "IsActive": true,
 *   "Position": 1
 * }
 * ```
 */
"PUT /api/catalog/pvt/specificationvalue/:specificationValueId": {
body: {
/**
 * Specification ID associated with this specification value.
 */
FieldId: number
/**
 * Specification Value name.
 */
Name: string
/**
 * @deprecated
 * Specification Value Text.
 */
Text?: (null | string)
/**
 * Enable (`true`) or disable (`false`) specification value.
 */
IsActive?: boolean
/**
 * The position of the value to be shown on product registration page (`/admin/Site/Produto.aspx`).
 */
Position?: number
}
response: {
/**
 * Specification value ID.
 */
FieldValueId?: number
/**
 * Specification field ID associated with this specification value.
 */
FieldId?: number
/**
 * Specification Value name.
 */
Name?: string
/**
 * @deprecated
 * Specification Value Text.
 */
Text?: (null | string)
/**
 * Enable (`true`) or disable (`false`) specification value.
 */
IsActive?: boolean
/**
 * The position of the value to be shown on product registration page (`/admin/Site/Produto.aspx`).
 */
Position?: number
}
}
/**
 * Creates a new Specification Value for a Category. 
 * ## Request body example
 * 
 * ```json
 * {
 *     "FieldId": 193,
 *     "Name": "Metal",
 *     "IsActive": true,
 *     "Position": 1
 *   }
 * ```
 * 
 * ## Response body example
 * 
 * ```json
 * {
 *   "FieldValueId": 360,
 *   "FieldId": 193,
 *   "Name": "Metal",
 *   "Text": null,
 *   "IsActive": true,
 *   "Position": 1
 * }
 * ```
 */
"POST /api/catalog/pvt/specificationvalue": {
body: {
/**
 * Specification field ID associated with this specification value.
 */
FieldId: number
/**
 * Specification Value name.
 */
Name: string
/**
 * @deprecated
 * Specification Value Text.
 */
Text?: (null | string)
/**
 * Enable (`true`) or disable (`false`) specification value.
 */
IsActive?: boolean
/**
 * The position of the value to be shown on product registration page (`/admin/Site/Produto.aspx`).
 */
Position?: number
}
response: {
/**
 * Specification value ID.
 */
FieldValueId?: number
/**
 * Specification field ID associated with this specification value.
 */
FieldId?: number
/**
 * Specification Value name.
 */
Name?: string
/**
 * @deprecated
 * Specification Value Text.
 */
Text?: (null | string)
/**
 * Enable (`true`) or disable (`false`) specification value.
 */
IsActive?: boolean
/**
 * The position of the value to be shown on product registration page (`/admin/Site/Produto.aspx`).
 */
Position?: number
}
}
/**
 * Retrieves a list of specification groups by the category ID. 
 * ## Response body example
 * 
 * ```json
 * [
 *     {
 *       "CategoryId": 1,
 *       "Id": 5,
 *       "Name": "Materials",
 *       "Position": 2
 *     },
 *     {
 *       "CategoryId": 1,
 *       "Id": 6,
 *       "Name": "Sizes",
 *       "Position": 3
 *     }
 *   ]
 * ```
 */
"GET /api/catalog_system/pvt/specification/groupbycategory/:categoryId": {
response: SpecificationsGroup[]
}
/**
 * Retrieves details from a specification group by the ID of the group. 
 * ## Response body example
 * 
 * ```json
 * {
 *   "CategoryId": 1,
 *   "Id": 6,
 *   "Name": "Sizes",
 *   "Position": 3
 * }
 * ```
 */
"GET /api/catalog_system/pub/specification/groupGet/:groupId": {
response: SpecificationsGroup
}
/**
 * Create a specification group. 
 * >⚠️ It is also possible to create a Specification Group by using an alternative legacy route: `/api/catalog_system/pvt/specification/group`. 
 * ## Request body example
 * 
 * ```json
 * {
 *     "CategoryId": 1,
 *     "Name": "Sizes"
 * }
 * ```
 * 
 * ## Response body example
 * 
 * ```json
 * {
 *   "Id": 6,
 *   "CategoryId": 1,
 *   "Name": "Sizes",
 *   "Position": 3
 * }
 * ```
 */
"POST /api/catalog/pvt/specificationgroup": {
body: SpecificationGroupInsertRequest
response: {
/**
 * Specification Group ID.
 */
Id?: number
/**
 * Category ID.
 */
CategoryId?: number
/**
 * Specification Group Name.
 */
Name?: string
/**
 * Store Framework - Deprecated.
 * Legacy CMS Portal - Specification Group Position.
 */
Position?: number
}
}
/**
 * Update a specification group. 
 * >⚠️ It is also possible to update a Specification Group by using an alternative legacy route: `/api/catalog_system/pvt/specification/group`.
 * 
 * ## Request and response body example
 * 
 * ```json
 * {
 *     "CategoryId": 1,
 *     "Id": 17,
 *     "Name": "NewGroupName",
 *     "Position": 1
 * }
 * ```
 */
"PUT /api/catalog/pvt/specificationgroup/:groupId": {
body: {
/**
 * Category ID where the Specification Group is contained.
 */
CategoryId: number
/**
 * Specification Group ID.
 */
Id: number
/**
 * Specification Group Name.
 */
Name: string
/**
 * Specification Group Position.
 */
Position: number
}
response: {
/**
 * Category ID where the Specification Group is contained.
 */
CategoryId?: number
/**
 * Specification Group ID.
 */
Id?: number
/**
 * Specification Group Name.
 */
Name?: string
/**
 * Specification Group Position.
 */
Position?: number
}
}
/**
 * Retrieves general information about unmapped Specifications of a Seller's SKU in a Marketplace. 
 * ## Response body example
 * 
 * ```json
 * {
 *     "Id": 1010,
 *     "SkuId": 310119072,
 *     "SpecificationName": "size",
 *     "SpecificationValue": "Small"
 * }
 * ```
 */
"GET /api/catalog/pvt/specification/nonstructured/:id": {
response: {
/**
 * Non Structured Specification’s unique numerical identifier.
 */
Id?: number
/**
 * SKU's unique numerical identifier.
 */
SkuId?: number
/**
 * Name of the Non Structured Specification.
 */
SpecificationName?: string
/**
 * Value of the Non Structured Specification.
 */
SpecificationValue?: string
}[]
}
/**
 * Deletes unmapped Specifications of a Seller'S SKU in a Marketplace by its unique ID.
 */
"DELETE /api/catalog/pvt/specification/nonstructured/:id": {

}
/**
 * Gets general information about unmapped Specifications of a Seller's SKU in a Marketplace by SKU ID. 
 * ## Response body example
 * 
 * ```json
 * [
 * {
 *     "Id": 1010,
 *     "SkuId": 310119072,
 *     "SpecificationName": "size",
 *     "SpecificationValue": "Small"
 * }
 * ]
 * ```
 */
"GET /api/catalog/pvt/specification/nonstructured": {
searchParams: {
/**
 * SKU’s unique numerical identifier.
 */
skuId: number
}
response: {
/**
 * Non Structured Specification’s unique numerical identifier.
 */
Id?: number
/**
 * SKU's unique numerical identifier.
 */
SkuId?: number
/**
 * Name of the Non Structured Specification.
 */
SpecificationName?: string
/**
 * Value of the Non Structured Specification.
 */
SpecificationValue?: string
}[]
}
/**
 * Deletes unmapped Specifications of a Seller'S SKU in a Marketplace by SKU ID.
 */
"DELETE /api/catalog/pvt/specification/nonstructured": {
searchParams: {
/**
 * SKU’s unique numerical identifier.
 */
skuId: number
}
}
/**
 * Retrieves a list with details about the store's sales channels. 
 * ## Response body example
 * 
 * ```json
 * [
 *     {
 *         "Id": 1,
 *         "Name": "Loja Principal",
 *         "IsActive": true,
 *         "ProductClusterId": null,
 *         "CountryCode": "BRA",
 *         "CultureInfo": "pt-BR",
 *         "TimeZone": "E. South America Standard Time",
 *         "CurrencyCode": "BRL",
 *         "CurrencySymbol": "R$",
 *         "CurrencyLocale": 1046,
 *         "CurrencyFormatInfo": {
 *             "CurrencyDecimalDigits": 1,
 *             "CurrencyDecimalSeparator": ",",
 *             "CurrencyGroupSeparator": ".",
 *             "CurrencyGroupSize": 3,
 *             "StartsWithCurrencySymbol": true
 *         },
 *         "Origin": null,
 *         "Position": 2,
 *         "ConditionRule": null,
 *         "CurrencyDecimalDigits": 1
 *     }
 * ]
 * ```
 */
"GET /api/catalog_system/pvt/saleschannel/list": {
response: {
/**
 * Sales Channel unique identifier.
 */
Id?: number
/**
 * Sales Channel name.
 */
Name?: string
/**
 * Defines if the Sales Channel is active (`true`) or not (`false`).
 */
IsActive?: boolean
/**
 * Product Cluster ID, if the Sales Channel has releated Product Cluster.
 */
ProductClusterId?: (null | number)
/**
 * Country Code in ISO 3166-1 alfa-3 Standard.
 */
CountryCode?: string
/**
 * Language Country code in LCIDstring Standard.
 */
CultureInfo?: string
/**
 * Name of Time Zone.
 */
TimeZone?: string
/**
 * Currency Code in ISO 4217 standard.
 */
CurrencyCode?: string
/**
 * Currency symbol.
 */
CurrencySymbol?: string
/**
 * Currency Locale Code in LCID standard.
 */
CurrencyLocale?: number
/**
 * Object with currency format.
 */
CurrencyFormatInfo?: {
/**
 * Quantity of Currency Decimal Digits.
 */
CurrencyDecimalDigits?: number
/**
 * Defines which Currency Decimal Separator will be applied.
 */
CurrencyDecimalSeparator?: string
/**
 * Defines which Currency Group Separator will be applied.
 */
CurrencyGroupSeparator?: string
/**
 * Define how many characters will be grouped.
 */
CurrencyGroupSize?: number
/**
 * Defines if all prices will be initiated with Currency Symbol (`true`) or not (`false`).
 */
StartsWithCurrencySymbol?: boolean
}
/**
 * Origin of products in the Sales Channel.
 */
Origin?: (null | string)
/**
 * Defines the position on index.
 */
Position?: (null | number)
/**
 * Defines what is the conditional rule to activate de Sales Channel.
 */
ConditionRule?: (null | string)
/**
 * Quantity of Currency Decimal Digits.
 */
CurrencyDecimalDigits?: number
}[]
}
/**
 * Retrieves a specific sales channel by its ID. 
 * 
 * ## Response body example
 * 
 * ```json
 * {
 *     "Id": 1,
 *     "Name": "Loja Principal",
 *     "IsActive": true,
 *     "ProductClusterId": null,
 *     "CountryCode": "BRA",
 *     "CultureInfo": "pt-BR",
 *     "TimeZone": "E. South America Standard Time",
 *     "CurrencyCode": "BRL",
 *     "CurrencySymbol": "R$",
 *     "CurrencyLocale": 1046,
 *     "CurrencyFormatInfo": {
 *         "CurrencyDecimalDigits": 1,
 *         "CurrencyDecimalSeparator": ",",
 *         "CurrencyGroupSeparator": ".",
 *         "CurrencyGroupSize": 3,
 *         "StartsWithCurrencySymbol": true
 *     },
 *     "Origin": null,
 *     "Position": 2,
 *     "ConditionRule": null,
 *     "CurrencyDecimalDigits": 1
 * }
 * ```
 */
"GET /api/catalog_system/pub/saleschannel/:salesChannelId": {
response: {
/**
 * Sales Channel unique identifier.
 */
Id?: number
/**
 * Sales Channel name.
 */
Name?: string
/**
 * Defines if the Sales Channel is active (`true`) or not (`false`).
 */
IsActive?: boolean
/**
 * Product Cluster ID, if the Sales Channel has releated Product Cluster.
 */
ProductClusterId?: (null | number)
/**
 * Country Code in ISO 3166-1 alfa-3 Standard.
 */
CountryCode?: string
/**
 * Language Country code in LCIDstring Standard.
 */
CultureInfo?: string
/**
 * Name of Time Zone.
 */
TimeZone?: string
/**
 * Currency Code in ISO 4217 standard.
 */
CurrencyCode?: string
/**
 * Currency symbol.
 */
CurrencySymbol?: string
/**
 * Currency Locale Code in LCID standard.
 */
CurrencyLocale?: number
/**
 * Object with currency format.
 */
CurrencyFormatInfo?: {
/**
 * Quantity of Currency Decimal Digits.
 */
CurrencyDecimalDigits?: number
/**
 * Defines which Currency Decimal Separator will be applied.
 */
CurrencyDecimalSeparator?: string
/**
 * Defines which Currency Group Separator will be applied.
 */
CurrencyGroupSeparator?: string
/**
 * Define how many characters will be grouped.
 */
CurrencyGroupSize?: number
/**
 * Defines if all prices will be initiated with Currency Symbol (`true`) or not (`false`).
 */
StartsWithCurrencySymbol?: boolean
}
/**
 * Origin of products in the Sales Channel.
 */
Origin?: (null | string)
/**
 * Defines the position on index.
 */
Position?: (null | number)
/**
 * Defines what is the conditional rule to activate de Sales Channel.
 */
ConditionRule?: (null | string)
/**
 * Quantity of Currency Decimal Digits.
 */
CurrencyDecimalDigits?: number
}
}
/**
 * Retrieves the seller's details by its ID.
 */
"GET /api/catalog_system/pvt/seller/list": {
searchParams: {
/**
 * Trade policy ID.
 */
sc?: number
/**
 * Seller type.
 */
sellerType?: number
/**
 * If the seller is better scope.
 */
isBetterScope?: boolean
}
response: {
/**
 * Code used to identify the seller. It is assigned by the marketplace. We recommend filling it in with the seller's account name.
 */
SellerId?: string
/**
 * Name of the account in the seller's environment. You can find it on **Account settings > Account > Account Name**). Applicable only if the seller uses their own payment method.
 */
Name?: string
/**
 * Email of the admin responsible for the seller.
 */
Email?: string
/**
 * Text describing the seller with a marketing tone. You can display this text in the marketplace window display by [customizing the CMS](https://help.vtex.com/en/tutorial/list-of-controls-for-templates--tutorials_563).
 */
Description?: string
/**
 * Text describing the exchange and return policy previously agreed between the marketplace and the seller.
 */
ExchangeReturnPolicy?: string
/**
 * Text describing the delivery policy previously agreed between the marketplace and the seller.
 */
DeliveryPolicy?: string
/**
 * Allows customers to use gift cards from the seller to buy their products on the marketplace. It identifies purchases made with a gift card so that only the final price (with discounts applied) is paid to the seller.
 */
UseHybridPaymentOptions?: boolean
/**
 * Seller username.
 */
UserName?: (null | string)
/**
 * Seller password.
 */
Password?: (null | string)
/**
 * Text describing the security policy previously agreed between the marketplace and the seller.
 */
SecutityPrivacyPolicy?: string
/**
 * Company registration number.
 */
CNPJ?: string
/**
 * CSC identification.
 */
CSCIdentification?: string
/**
 * Seller archive ID.
 */
ArchiveId?: (null | number)
/**
 * Seller URL logo.
 */
UrlLogo?: (null | string)
/**
 * The percentage that must be filled in as agreed between the marketplace and the seller. If there is no such commission, please fill in the field with the value: `0.00`.
 */
ProductCommissionPercentage?: number
/**
 * The percentage that must be filled in as agreed between the marketplace and the seller. If there is no such commission, please fill in the field with the value: `0.00`.
 */
FreightCommissionPercentage?: number
/**
 * The percentage that must be filled in as agreed between the marketplace and the seller. If there is no such commission, please fill in the field with the value: `0.00`.
 */
CategoryCommissionPercentage?: string
/**
 * URL of the endpoint for fulfillment of seller's orders, which the marketplace will use to communicate with the seller. This field applies to all sellers, regardless of their type. However, for `VTEX Stores`, you don’t need to fill it in because the system will do that automatically. You can edit this field once the seller has been successfully added.
 */
FulfillmentEndpoint?: (null | string)
/**
 * URL of the endpoint of the seller's catalog. This field will only be displayed if the seller type is VTEX Store. The field format will be as follows: `http://{sellerName}.vtexcommercestable.com.br/api/catalog_system/`.
 */
CatalogSystemEndpoint?: string
/**
 * If the selle is active (`true`) or not (`false`).
 */
IsActive?: boolean
/**
 * Name of the marketplace, used to guide payments. This field should be nulled if the marketplace is responsible for processing payments. Check out our [Split Payment](https://help.vtex.com/en/tutorial/split-de-pagamento--6k5JidhYRUxileNolY2VLx) article to know more.
 */
MerchantName?: string
/**
 * Identification code of the seller responsible for fulfilling the order. This is an optional field used when a seller sells SKUs from another seller. If the seller sells their own SKUs, it must be left blank.
 */
FulfillmentSellerId?: (null | number)
/**
 * Seller type.
 */
SellerType?: number
/**
 * Indicates whether it is a [comprehensive seller](https://help.vtex.com/en/tutorial/comprehensive-seller--5Qn4O2GpjUIzWTPpvLUfkI).
 */
IsBetterScope?: boolean
/**
 * Seller trust policy. The default value is `'Default'`, but if your store is a B2B marketplace and you want to share the customers'emails with the sellers you need to set this field as `'AllowEmailSharing'`.
 */
TrustPolicy?: string
}
}
/**
 * Retrieves the seller's details by its ID.
 */
"GET /api/catalog_system/pvt/seller/:sellerId": {
/**
 * Object with information of all sellers in the store.
 */
response: {
/**
 * Code used to identify the seller. It is assigned by the marketplace. We recommend filling it in with the seller's account name.
 */
SellerId?: string
/**
 * Name of the account in the seller's environment. You can find it on **Account settings > Account > Account Name**). Applicable only if the seller uses their own payment method.
 */
Name?: string
/**
 * Email of the admin responsible for the seller.
 */
Email?: string
/**
 * Text describing the seller with a marketing tone. You can display this text in the marketplace window display by [customizing the CMS](https://help.vtex.com/en/tutorial/list-of-controls-for-templates--tutorials_563).
 */
Description?: string
/**
 * Text describing the exchange and return policy previously agreed between the marketplace and the seller.
 */
ExchangeReturnPolicy?: string
/**
 * Text describing the delivery policy previously agreed between the marketplace and the seller.
 */
DeliveryPolicy?: string
/**
 * Allows customers to use gift cards from the seller to buy their products on the marketplace. It identifies purchases made with a gift card so that only the final price (with discounts applied) is paid to the seller. 
 */
UseHybridPaymentOptions?: boolean
/**
 * Seller username.
 */
UserName?: (null | string)
/**
 * Seller password.
 */
Password?: (null | string)
/**
 * Text describing the security policy previously agreed between the marketplace and the seller.
 */
SecutityPrivacyPolicy?: string
/**
 * Company registration number.
 */
CNPJ?: string
/**
 * CSC identification.
 */
CSCIdentification?: string
/**
 * Seller archive ID.
 */
ArchiveId?: (null | number)
/**
 * Seller URL logo.
 */
UrlLogo?: string
/**
 * The percentage that must be filled in as agreed between the marketplace and the seller. If there is no such commission, please fill in the field with the value: `0.00`.
 */
ProductCommissionPercentage?: number
/**
 * The percentage that must be filled in as agreed between the marketplace and the seller. If there is no such commission, please fill in the field with the value: `0.00`.
 */
FreightCommissionPercentage?: number
/**
 * The percentage that must be filled in as agreed between the marketplace and the seller. If there is no such commission, please fill in the field with the value: `0.00`.
 */
CategoryCommissionPercentage?: string
/**
 * URL of the endpoint for fulfillment of seller's orders, which the marketplace will use to communicate with the seller. This field applies to all sellers, regardless of their type. However, for `VTEX Stores`, you don’t need to fill it in because the system will do that automatically. You can edit this field once the seller has been successfully added.
 */
FulfillmentEndpoint?: (null | string)
/**
 * URL of the endpoint of the seller's catalog. This field will only be displayed if the seller type is VTEX Store. The field format will be as follows: `http://{sellerName}.vtexcommercestable.com.br/api/catalog_system/`.
 */
CatalogSystemEndpoint?: string
/**
 * If the selle is active (`true`) or not (`false`).
 */
IsActive?: boolean
/**
 * Name of the marketplace, used to guide payments. This field should be nulled if the marketplace is responsible for processing payments. Check out our [Split Payment](https://help.vtex.com/en/tutorial/split-de-pagamento--6k5JidhYRUxileNolY2VLx) article to know more.
 */
MerchantName?: string
/**
 * Identification code of the seller responsible for fulfilling the order. This is an optional field used when a seller sells SKUs from another seller. If the seller sells their own SKUs, it must be left blank.
 */
FulfillmentSellerId?: (null | number)
/**
 * Seller type.
 */
SellerType?: number
/**
 * Indicates whether it is a [comprehensive seller](https://help.vtex.com/en/tutorial/comprehensive-seller--5Qn4O2GpjUIzWTPpvLUfkI).
 */
IsBetterScope?: boolean
/**
 * Seller trust policy. The default value is `'Default'`, but if your store is a B2B marketplace and you want to share the customers'emails with the sellers you need to set this field as `'AllowEmailSharing'`.
 */
TrustPolicy?: string
}
}
/**
 * Creates a new seller.
 */
"POST /api/catalog_system/pvt/seller": {
body: CreateSellerRequest
response: {
/**
 * Code used to identify the seller. It is assigned by the marketplace. We recommend filling it in with the seller's account name.
 */
SellerId?: string
/**
 * Name of the account in the seller's environment. You can find it on **Account settings > Account > Account Name**). Applicable only if the seller uses their own payment method.
 */
Name?: string
/**
 * Email of the admin responsible for the seller. 
 */
Email?: string
/**
 * Text describing the seller with a marketing tone. You can display this text in the marketplace window display by [customizing the CMS](https://help.vtex.com/en/tutorial/list-of-controls-for-templates--tutorials_563).
 */
Description?: string
/**
 * Text describing the exchange and return policy previously agreed between the marketplace and the seller.
 */
ExchangeReturnPolicy?: string
/**
 * Text describing the delivery policy previously agreed between the marketplace and the seller.
 */
DeliveryPolicy?: string
/**
 * Allows customers to use gift cards from the seller to buy their products on the marketplace. It identifies purchases made with a gift card so that only the final price (with discounts applied) is paid to the seller. 
 */
UseHybridPaymentOptions?: boolean
/**
 * Seller username.
 */
UserName?: (null | string)
/**
 * Seller password.
 */
Password?: (null | string)
/**
 * Text describing the security policy previously agreed between the marketplace and the seller.
 */
SecutityPrivacyPolicy?: string
/**
 * Company registration number.
 */
CNPJ?: string
/**
 * CSC identification.
 */
CSCIdentification?: string
/**
 * Seller archive ID.
 */
ArchiveId?: (null | number)
/**
 * Seller URL logo.
 */
UrlLogo?: (null | string)
/**
 * The percentage that must be filled in as agreed between the marketplace and the seller. If there is no such commission, please fill in the field with the value: `0.00`.
 */
ProductCommissionPercentage?: number
/**
 * The percentage that must be filled in as agreed between the marketplace and the seller. If there is no such commission, please fill in the field with the value: `0.00`.
 */
FreightCommissionPercentage?: number
/**
 * The percentage that must be filled in as agreed between the marketplace and the seller. If there is no such commission, please fill in the field with the value: `0.00`.
 */
CategoryCommissionPercentage?: string
/**
 * URL of the endpoint for fulfillment of seller's orders, which the marketplace will use to communicate with the seller. This field applies to all sellers, regardless of their type. However, for `VTEX Stores`, you don’t need to fill it in because the system will do that automatically. You can edit this field once the seller has been successfully added.
 */
FulfillmentEndpoint?: (null | string)
/**
 * URL of the endpoint of the seller's catalog. This field will only be displayed if the seller type is VTEX Store. The field format will be as follows: `http://{sellerName}.vtexcommercestable.com.br/api/catalog_system/`.
 */
CatalogSystemEndpoint?: string
/**
 * If the selle is active (`true`) or not (`false`).
 */
IsActive?: boolean
/**
 * Name of the marketplace, used to guide payments. This field should be nulled if the marketplace is responsible for processing payments. Check out our [Split Payment](https://help.vtex.com/en/tutorial/split-de-pagamento--6k5JidhYRUxileNolY2VLx) article to know more.
 */
MerchantName?: string
/**
 * Identification code of the seller responsible for fulfilling the order. This is an optional field used when a seller sells SKUs from another seller. If the seller sells their own SKUs, it must be left blank.
 */
FulfillmentSellerId?: (null | number)
/**
 * Seller type.
 */
SellerType?: number
/**
 * Indicates whether it is a [comprehensive seller](https://help.vtex.com/en/tutorial/comprehensive-seller--5Qn4O2GpjUIzWTPpvLUfkI).
 */
IsBetterScope?: boolean
/**
 * Seller trust policy. The default value is `'Default'`, but if your store is a B2B marketplace and you want to share the customers'emails with the sellers you need to set this field as `'AllowEmailSharing'`.
 */
TrustPolicy?: string
}
}
/**
 * Updates a seller.
 */
"PUT /api/catalog_system/pvt/seller": {
body: UpdateSellerRequest
response: {
/**
 * Code used to identify the seller. It is assigned by the marketplace. We recommend filling it in with the seller's account name.
 */
SellerId?: string
/**
 * Name of the account in the seller's environment. You can find it on **Account settings > Account > Account Name**). Applicable only if the seller uses their own payment method.
 */
Name?: string
/**
 * Email of the admin responsible for the seller.
 */
Email?: string
/**
 * Text describing the seller with a marketing tone. You can display this text in the marketplace window display by [customizing the CMS](https://help.vtex.com/en/tutorial/list-of-controls-for-templates--tutorials_563).
 */
Description?: string
/**
 * Text describing the exchange and return policy previously agreed between the marketplace and the seller.
 */
ExchangeReturnPolicy?: string
/**
 * Text describing the delivery policy previously agreed between the marketplace and the seller.
 */
DeliveryPolicy?: string
/**
 * Allows customers to use gift cards from the seller to buy their products on the marketplace. It identifies purchases made with a gift card so that only the final price (with discounts applied) is paid to the seller.
 */
UseHybridPaymentOptions?: boolean
/**
 * Seller username.
 */
UserName?: (null | string)
/**
 * Seller password.
 */
Password?: (null | string)
/**
 * Text describing the security policy previously agreed between the marketplace and the seller.
 */
SecutityPrivacyPolicy?: string
/**
 * Company registration number.
 */
CNPJ?: string
/**
 * CSC identification.
 */
CSCIdentification?: string
/**
 * Seller archive ID.
 */
ArchiveId?: (null | number)
/**
 * Seller URL logo.
 */
UrlLogo?: (null | string)
/**
 * The percentage that must be filled in as agreed between the marketplace and the seller. If there is no such commission, please fill in the field with the value: `0.00`.
 */
ProductCommissionPercentage?: number
/**
 * The percentage that must be filled in as agreed between the marketplace and the seller. If there is no such commission, please fill in the field with the value: `0.00`.
 */
FreightCommissionPercentage?: number
/**
 * The percentage that must be filled in as agreed between the marketplace and the seller. If there is no such commission, please fill in the field with the value: `0.00`.
 */
CategoryCommissionPercentage?: string
/**
 * URL of the endpoint for fulfillment of seller's orders, which the marketplace will use to communicate with the seller. This field applies to all sellers, regardless of their type. However, for `VTEX Stores`, you don’t need to fill it in because the system will do that automatically. You can edit this field once the seller has been successfully added.
 */
FulfillmentEndpoint?: (null | string)
/**
 * URL of the endpoint of the seller's catalog. This field will only be displayed if the seller type is VTEX Store. The field format will be as follows: `http://{sellerName}.vtexcommercestable.com.br/api/catalog_system/`.
 */
CatalogSystemEndpoint?: string
/**
 * If the selle is active (`true`) or not (`false`).
 */
IsActive?: boolean
/**
 * Name of the marketplace, used to guide payments. This field should be nulled if the marketplace is responsible for processing payments. Check out our [Split Payment](https://help.vtex.com/en/tutorial/split-de-pagamento--6k5JidhYRUxileNolY2VLx) article to know more.
 */
MerchantName?: string
/**
 * Identification code of the seller responsible for fulfilling the order. This is an optional field used when a seller sells SKUs from another seller. If the seller sells their own SKUs, it must be left blank.
 */
FulfillmentSellerId?: (null | number)
/**
 * Seller type.
 */
SellerType?: number
/**
 * Indicates whether it is a [comprehensive seller](https://help.vtex.com/en/tutorial/comprehensive-seller--5Qn4O2GpjUIzWTPpvLUfkI).
 */
IsBetterScope?: boolean
/**
 * Seller trust policy. The default value is `'Default'`, but if your store is a B2B marketplace and you want to share the customers'emails with the sellers you need to set this field as `'AllowEmailSharing'`.
 */
TrustPolicy?: string
}
}
/**
 * Retrieves the seller's details by its ID.
 */
"GET /api/catalog_system/pvt/sellers/:sellerId": {
/**
 * Object with information of all sellers in the store.
 */
response: {
/**
 * Code used to identify the seller. It is assigned by the marketplace. We recommend filling it in with the seller's account name.
 */
SellerId?: string
/**
 * Name of the account in the seller's environment. You can find it on **Account settings > Account > Account Name**). Applicable only if the seller uses their own payment method.
 */
Name?: (null | string)
/**
 * Email of the admin responsible for the seller. 
 */
Email?: (null | string)
/**
 * Text describing the seller with a marketing tone. You can display this text in the marketplace window display by [customizing the CMS](https://help.vtex.com/en/tutorial/list-of-controls-for-templates--tutorials_563).
 */
Description?: string
/**
 * Text describing the exchange and return policy previously agreed between the marketplace and the seller.
 */
ExchangeReturnPolicy?: string
/**
 * Text describing the delivery policy previously agreed between the marketplace and the seller.
 */
DeliveryPolicy?: string
/**
 * Allows customers to use gift cards from the seller to buy their products on the marketplace. It identifies purchases made with a gift card so that only the final price (with discounts applied) is paid to the seller. 
 */
UseHybridPaymentOptions?: boolean
/**
 * Seller username.
 */
UserName?: (null | string)
/**
 * Seller password.
 */
Password?: (null | string)
/**
 * Text describing the security policy previously agreed between the marketplace and the seller.
 */
SecutityPrivacyPolicy?: string
/**
 * Company registration number.
 */
CNPJ?: string
/**
 * CSC identification.
 */
CSCIdentification?: string
/**
 * Seller archive ID.
 */
ArchiveId?: (null | number)
/**
 * Seller URL logo.
 */
UrlLogo?: string
/**
 * The percentage that must be filled in as agreed between the marketplace and the seller. If there is no such commission, please fill in the field with the value: `0.00`.
 */
ProductCommissionPercentage?: number
/**
 * The percentage that must be filled in as agreed between the marketplace and the seller. If there is no such commission, please fill in the field with the value: `0.00`.
 */
FreightCommissionPercentage?: number
/**
 * The percentage that must be filled in as agreed between the marketplace and the seller. If there is no such commission, please fill in the field with the value: `0.00`.
 */
CategoryCommissionPercentage?: string
/**
 * URL of the endpoint for fulfillment of seller's orders, which the marketplace will use to communicate with the seller. This field applies to all sellers, regardless of their type. However, for `VTEX Stores`, you don’t need to fill it in because the system will do that automatically. You can edit this field once the seller has been successfully added.
 */
FulfillmentEndpoint?: (null | string)
/**
 * URL of the endpoint of the seller's catalog. This field will only be displayed if the seller type is VTEX Store. The field format will be as follows: `http://{sellerName}.vtexcommercestable.com.br/api/catalog_system/`.
 */
CatalogSystemEndpoint?: string
/**
 * If the selle is active (`true`) or not (`false`).
 */
IsActive?: boolean
/**
 * Name of the marketplace, used to guide payments. This field should be nulled if the marketplace is responsible for processing payments. Check out our [Split Payment](https://help.vtex.com/en/tutorial/split-de-pagamento--6k5JidhYRUxileNolY2VLx) article to know more.
 */
MerchantName?: string
/**
 * Identification code of the seller responsible for fulfilling the order. This is an optional field used when a seller sells SKUs from another seller. If the seller sells their own SKUs, it must be left blank.
 */
FulfillmentSellerId?: (null | number)
/**
 * Seller type.
 */
SellerType?: number
/**
 * Indicates whether it is a [comprehensive seller](https://help.vtex.com/en/tutorial/comprehensive-seller--5Qn4O2GpjUIzWTPpvLUfkI).
 */
IsBetterScope?: boolean
/**
 * Seller trust policy. The default value is `'Default'`, but if your store is a B2B marketplace and you want to share the customers'emails with the sellers you need to set this field as `'AllowEmailSharing'`.
 */
TrustPolicy?: string
}
}
/**
 * Creates a new Supplier. 
 * ## Request body example
 * 
 * ```json
 * {
 *     "Name": "Supplier",
 *     "CorporateName": "TopStore",
 *     "StateInscription": "",
 *     "Cnpj": "33304981001272",
 *     "Phone": "3333333333",
 *     "CellPhone": "4444444444",
 *     "CorportePhone": "5555555555",
 *     "Email": "email@email.com",
 *     "IsActive": true
 * }
 * ```
 * 
 * ## Response body example
 * 
 * ```json
 * {
 *     "Id": 1,
 *     "Name": "Supplier",
 *     "CorporateName": "TopStore",
 *     "StateInscription": "",
 *     "Cnpj": "33304981001272",
 *     "Phone": "3333333333",
 *     "CellPhone": "4444444444",
 *     "CorportePhone": "5555555555",
 *     "Email": "email@email.com",
 *     "IsActive": true
 * }
 * ```
 */
"POST /api/catalog/pvt/supplier": {
body: SupplierRequest
response: SupplierResponse
}
/**
 * Updates general information of an existing Supplier. 
 * ## Request body example
 * 
 * ```json
 * {
 *     "Name": "Supplier",
 *     "CorporateName": "TopStore",
 *     "StateInscription": "",
 *     "Cnpj": "33304981001272",
 *     "Phone": "3333333333",
 *     "CellPhone": "4444444444",
 *     "CorportePhone": "5555555555",
 *     "Email": "email@email.com",
 *     "IsActive": true
 * }
 * ```
 * 
 * ## Response body example
 * 
 * ```json
 * {
 *     "Id": 1,
 *     "Name": "Supplier",
 *     "CorporateName": "TopStore",
 *     "StateInscription": "",
 *     "Cnpj": "33304981001272",
 *     "Phone": "3333333333",
 *     "CellPhone": "4444444444",
 *     "CorportePhone": "5555555555",
 *     "Email": "email@email.com",
 *     "IsActive": true
 * }
 * ```
 */
"PUT /api/catalog/pvt/supplier/:supplierId": {
body: SupplierRequest
response: SupplierResponse
}
/**
 * Deletes an existing Supplier.
 */
"DELETE /api/catalog/pvt/supplier/:supplierId": {

}
/**
 * Retrieves a list of Trade Policies associated to a Product based on the Product's ID. 
 * ## Response body example
 * 
 * ```json
 * [
 *     {
 *         "ProductId": 1,
 *         "StoreId": 1
 *     },
 *     {
 *         "ProductId": 1,
 *         "StoreId": 2
 *     },
 *     {
 *         "ProductId": 1,
 *         "StoreId": 3
 *     },
 *     {
 *         "ProductId": 1,
 *         "StoreId": 4
 *     }
 * ]
 * ```
 */
"GET /api/catalog/pvt/product/:productId/salespolicy": {
response: {
/**
 * Product’s unique numerical identifier.
 */
ProductId?: number
/**
 * Trade policy's unique numerical identifier.
 */
StoreId?: number
}[]
}
/**
 * Associates an existing Trade Policy with a Product.
 */
"POST /api/catalog/pvt/product/:productId/salespolicy/:tradepolicyId": {

}
/**
 * Disassociates a Trade Policy of a Product.
 */
"DELETE /api/catalog/pvt/product/:productId/salespolicy/:tradepolicyId": {

}
/**
 * Retrieves a list of SKU IDs of a Trade Policy. 
 * ## Response body example
 * 
 * ```json
 * [
 *     405380,
 *     405381,
 *     405382,
 *     405383,
 *     405384,
 *     405385,
 *     405386,
 *     405387,
 *     405388,
 *     405389,
 *     405390,
 *     405391,
 *     405392,
 *     405393,
 *     405394,
 *     405395,
 *     405396,
 *     405397,
 *     405398,
 *     405399,
 *     405400,
 *     405556
 * ]
 * ```
 */
"GET /api/catalog_system/pvt/sku/stockkeepingunitidsbysaleschannel": {
searchParams: {
/**
 * Trade Policy’s unique numerical identifier.
 */
sc: number
/**
 * Page number.
 */
page?: number
/**
 * Number of items in the page.
 */
pageSize?: number
/**
 * If set as `false`, it allows the user to decide if the SKUs that are not assigned to a specific trade policy should be also returned.
 */
onlyAssigned?: boolean
}
/**
 * List of SKU IDs of the Trade Policy.
 */
response: number[]
}
/**
 * Retrieve details of a Product's Indexed Information in XML format. 
 * ## Response body example
 * 
 * ```xml
 * "
 * <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n
 * <response>\n
 *     <lst name=\"responseHeader\">
 *         <bool name=\"zkConnected\">true</bool>
 *         <int name=\"status\">0</int>
 *         <int name=\"QTime\">2</int>
 *         <lst name=\"params\">
 *             <str name=\"fl\">*</str>
 *             <arr name=\"fq\">
 *                 <str>instanceId:394dbdc8-b1f4-4dea-adfa-1ec104f3bfe1</str>
 *                 <str>productId:1</str>
 *             </arr>
 *         </lst>
 *     </lst>
 *     <result name=\"response\" numFound=\"0\" start=\"0\" maxScore=\"0.0\"></result>
 *     <lst name=\"facet_counts\">
 *         <lst name=\"facet_queries\"/>
 *         <lst name=\"facet_fields\"/>
 *         <lst name=\"facet_ranges\"/>
 *         <lst name=\"facet_intervals\"/>
 *         <lst name=\"facet_heatmaps\"/></lst>\n
 * </response>\n"
 * ```
 */
"GET /api/catalog_system/pvt/products/GetIndexedInfo/:productId": {

}
/**
 * Lists all commercial conditions on the store. 
 * ## Response body example
 * 
 * ```json
 * [
 *     {
 *         "Id": 1,
 *         "Name": "Padrão",
 *         "IsDefault": true
 *     },
 *     {
 *         "Id": 2,
 *         "Name": "Teste Fast",
 *         "IsDefault": false
 *     }
 * ]
 * ```
 */
"GET /api/catalog_system/pvt/commercialcondition/list": {
response: {
/**
 * Commercial condition ID.
 */
Id?: number
/**
 * Commercial condition name.
 */
Name?: string
/**
 * Defines if the commercial condition is default (`true`) or not (`false`).
 */
IsDefault?: boolean
}[]
}
/**
 * Retrieves information of a commercial condition by its ID. 
 * ## Response body example
 * 
 * ```json
 * {
 *     "Id": 1,
 *     "Name": "Padrão",
 *     "IsDefault": true
 * }
 * ```
 */
"GET /api/catalog_system/pvt/commercialcondition/:commercialConditionId": {
/**
 * Object with information of the commercial condition.
 */
response: {
/**
 * Commercial condition ID.
 */
Id?: number
/**
 * Commercial condition name.
 */
Name?: string
/**
 * If the commercial condition is default (`true`) or not (`false`).
 */
IsDefault?: boolean
}
}
/**
 * Retrieves information about a Gift List by its ID.
 */
"GET /api/addon/pvt/giftlist/get/:listId": {
/**
 * Object with information about the Gift List.
 */
response: {
/**
 * Gift List ID.
 */
giftListId?: number
/**
 * Gift List name.
 */
name?: string
/**
 * User ID.
 */
userId?: string
/**
 * File ID.
 */
fileId?: (null | number)
/**
 * Gift List Type ID.
 */
giftListTypeId?: number
/**
 * Gift List Type name.
 */
giftListTypeName?: string
/**
 * Gift Card ID.
 */
giftCardId?: number
/**
 * Gift List message.
 */
message?: string
/**
 * Slug of the gift list that will be part of its URL.
 */
urlFolder?: string
/**
 * Date when the gift list was created.
 */
dateCreated?: string
/**
 * Name of the user's address.
 */
profileSystemUserAddressName?: string
/**
 * User ID on Profile System.
 */
profileSystemUserId?: string
/**
 * Date of the event associated with the Gift List.
 */
eventDate?: string
/**
 * Location of the event associated with the Gift List.
 */
eventLocation?: string
/**
 * City of the event associated with the Gift List.
 */
eventCity?: string
/**
 * State of the event associated with the Gift List.
 */
eventState?: string
/**
 * Telemarketing ID.
 */
telemarketingId?: (null | number)
/**
 * Telemarketing observation.
 */
telemarketingObservation?: string
/**
 * Defines if the gift list is public.
 */
IsPublic?: boolean
/**
 * Defines if the gift list is active.
 */
isActive?: boolean
/**
 * Defines if items purchased from the gift list will be shipped to the owner of the gift list.
 */
shipsToOwner?: boolean
/**
 * Validates the address of the gift list.
 */
isAddressOk?: boolean
/**
 * Version of the gift list.
 */
version?: number
/**
 * ID of the SKU that recharges the gift card.
 */
giftCardRechargeSkuId?: (null | number)
/**
 * Name of the members of the gift list.
 */
memberNames?: string
/**
 * Array of members of the gift list.
 */
giftListMembers?: {
/**
 * Gift List member ID.
 */
giftListMemberId?: number
/**
 * Gift List ID.
 */
giftListId?: number
/**
 * User ID.
 */
userId?: string
/**
 * Client ID.
 */
clientId?: (null | string)
/**
 * Title of the Gift List member.
 */
title?: (null | string)
/**
 * Name of the Gift List member.
 */
name?: string
/**
 * Surname of the Gift List member.
 */
surname?: string
/**
 * Defines if the Gift List member is an administrator of the Gift List or not.
 */
isAdmin?: boolean
/**
 * Defines if the Gift List user is active or not.
 */
isActive?: boolean
/**
 * Complementary text.
 */
text1?: (null | string)
/**
 * Complementary text.
 */
text2?: (null | string)
}[]
/**
 * Array with the IDs of SKUs that are part of the gift list.
 */
giftListSkuIds?: string[]
/**
 * Address of the gift list.
 */
address?: (null | string)
/**
 * File URL.
 */
fileUrl?: (null | string)
}
}
/**
 * This endpoint is used to simulate a cart in VTEX Checkout.
 * 
 * It receives an **SKU ID**, the **quantity** of items in the cart and the ID of the **Seller**.
 * 
 * It sends back all information about the cart, such as the selling price of each item, rates and benefits data, payment and logistics info.
 * 
 * This is useful whenever you need to know the availability of fulfilling an order for a specific cart setting, since the API response will let you know the updated price, inventory and shipping data.
 * 
 * **Important**: The fields (`sku id`, `quantity`, `seller`, `country`, `postalCode` and `geoCoordinates`) are just examples of content that you can simulate in your cart. You can add more fields to the request as per your need. Access the [orderForm](https://developers.vtex.com/docs/guides/orderform-fields) guide to check the available fields.
 */
"POST /api/checkout/pub/orderForms/simulation": {
searchParams: {
/**
 * This parameter defines which promotions apply to the simulation. Use `0` for simulations at cart stage, which means all promotions apply. In case of window simulation use `1`, which indicates promotions that apply nominal discounts over the total purchase value shouldn't be considered on the simulation.
 * 
 * Note that if this not sent, the parameter is `1`.
 */
RnbBehavior?: number
/**
 * Trade Policy (Sales Channel) identification.
 */
sc?: number
}
body: {
/**
 * Array containing information about the SKUs inside the cart to be simulated.
 */
items?: {
/**
 * The SKU ID.
 */
id?: string
/**
 * The quantity of items of this specific SKU in the cart to be simulated.
 */
quantity?: number
/**
 * The ID of the seller responsible for this SKU. This ID can be found in your VTEX Admin.
 */
seller?: string
}[]
marketingData?: {
[k: string]: any
}
priceTables?: string[]
/**
 * Three letter ISO code of the country of the shipping address. This value must be sent along with the `postalCode` or `geoCoordinates` values.
 */
country?: string
/**
 * Postal code.
 */
postalCode?: string
/**
 * Array containing two floats with geocoordinates, first longitude, then latitude.
 */
geoCoordinates?: number[]
minItems?: 0
}
response: {
/**
 * Information on each item in the cart.
 */
items?: {
/**
 * ID of the item.
 */
id?: string
/**
 * Request index information.
 */
requestIndex?: number
/**
 * The quantity of the item the cart.
 */
quantity?: number
/**
 * The seller responsible for the SKU.
 */
seller?: string
/**
 * Sellers involved in the chain. The list should contain only one seller, unless it is a [Multilevel Omnichannel Inventory](https://help.vtex.com/en/tutorial/multilevel-omnichannel-inventory--7M1xyCZWUyCB7PcjNtOyw4) order.
 */
sellerChain?: string[]
/**
 * Tax value in cents.
 */
tax?: number
/**
 * A unique identifier code assigned to a tax within the VTEX Admin.
 */
taxCode?: string
/**
 * Price expiration date and time.
 */
priceValidUntil?: string
/**
 * Price in cents.
 */
price?: number
/**
 * List price in cents.
 */
listPrice?: number
/**
 * Reward value in cents.
 */
rewardValue?: number
/**
 * Selling price in cents. Note that this field may be subject to rounding discrepancies. We recommend retrieving data from the `priceDefinition` data structure instead.
 */
sellingPrice?: number
/**
 * Array containing offering information.
 */
offerings?: any[]
/**
 * Array of price tags, each of which, modifies the price in some way, like discounts or rates that apply to the item in the context of the order.
 */
priceTags?: {
/**
 * Price tag name.
 */
name?: string
/**
 * Price tag value.
 */
value?: number
/**
 * Price tag raw value.
 */
rawValue?: number
/**
 * Indicates whether price tag value is applied through a percentage.
 */
isPercentual?: boolean
/**
 * Price tag identifier.
 */
identifier?: string
/**
 * Identification of the responsible for the price tag.
 */
owner?: string
}[]
/**
 * Measurement unit.
 */
measurementUnit?: string
/**
 * Unit multiplier.
 */
unitMultiplier?: number
/**
 * Parent item index.
 */
parentItemIndex?: (null | number)
/**
 * Parent assembly binding.
 */
parentAssemblyBinding?: (null | string)
/**
 * Availability.
 */
availability?: string
/**
 * Price information for all units of a specific item.
 */
priceDefinition?: {
/**
 * Item's calculated unitary selling price in cents.
 */
calculatedSellingPrice?: number
/**
 * Total value for all units of the item in cents.
 */
total?: number
/**
 * Array of objects, each containing value (in cents) and quantity for the different rounding instances that can be combined to form the correctly rounded total.
 */
sellingPrices?: {
/**
 * Value in cents for that specific rounding.
 */
value?: number
/**
 * Rounding quantity, meaning how many items are rounded to this value.
 */
quantity?: number
}[]
}
}[]
/**
 * Information on rates and benefits that apply to the order.
 */
ratesAndBenefitsData?: {
/**
 * List with rates and benefits identifiers.
 */
rateAndBenefitsIdentifiers?: any[]
/**
 * List with rates and benefits teasers.
 */
teaser?: any[]
}
/**
 * Payment data information.
 */
paymentData?: {
/**
 * Installment options information.
 */
installmentOptions?: any[]
/**
 * Information on payment systems.
 */
paymentSystems?: {
/**
 * Payment system ID.
 */
id?: number
/**
 * Payment system name.
 */
name?: string
/**
 * Payment group name.
 */
groupName?: string
/**
 * Payment system validator.
 */
validator?: (null | {

})
/**
 * String ID.
 */
stringId?: string
/**
 * Template.
 */
template?: string
/**
 * Indicates whether a document is required.
 */
requiresDocument?: boolean
/**
 * Indicates whether a document is shown.
 */
displayDocument?: boolean
/**
 * Indicates whether it is custom.
 */
isCustom?: boolean
/**
 * Description.
 */
description?: string
/**
 * Indicates whether a authentication is required.
 */
requiresAuthentication?: boolean
/**
 * Payment due date.
 */
dueDate?: string
/**
 * Availability of payment.
 */
availablePayments?: (null | string)
}[]
/**
 * Information on each payment.
 */
payments?: any[]
/**
 * Gift card information, if it applies to the order.
 */
giftCards?: any[]
/**
 * Array of gift card messages.
 */
giftCardMessages?: any[]
/**
 * Available accounts.
 */
availableAccounts?: any[]
/**
 * Available tokens.
 */
availableTokens?: any[]
/**
 * Available associations.
 */
availableAssociations?: {

}
}
/**
 * Array containing the data of the item selected as a gift.
 */
selectableGifts?: any[]
/**
 * Object containing promotion data such as coupon tracking information and internal or external UTMs.
 */
marketingData?: (null | {

})
/**
 * Postal Code.
 */
postalCode?: (null | string)
/**
 * Three letter ISO code of the country of the shipping address.
 */
country?: string
/**
 * Array with logistics information on each item of the `items` array in the `orderForm`.
 */
logisticsInfo?: {
/**
 * Index of item in items array.
 */
itemIndex?: number
/**
 * Address ID.
 */
addressId?: (null | string)
/**
 * Selected SLA. For example, `"normal"` or `"express"`.
 */
selectedSla?: (null | string)
/**
 * Delivery channel selected by the customer. For example, `"delivery"` or `"pickup-in-point"`.
 */
selectedDeliveryChannel?: (null | string)
/**
 * Quantity.
 */
quantity?: number
/**
 * List of countries that the item may be shipped to.
 */
shipsTo?: any[]
/**
 * Information on available SLAs.
 */
slas?: {
/**
 * SLA ID.
 */
id?: string
/**
 * Delivery channel.
 */
deliveryChannel?: string
/**
 * SLA name.
 */
name?: string
/**
 * Information on each delivery ID.
 */
deliveryIds?: {
/**
 * Courier ID.
 */
courierId?: string
/**
 * Warehouse ID.
 */
warehouseId?: string
/**
 * Warehouse ID.
 */
dockId?: string
/**
 * Courier name.
 */
courierName?: string
/**
 * Quantity.
 */
quantity?: number
}[]
/**
 * Shipping estimate. For instance, "three business days" will be represented as `3bd`.
 */
shippingEstimate?: string
/**
 * Shipping estimate date.
 */
shippingEstimateDate?: (null | string)
/**
 * Estimate date of delivery.
 */
lockTTL?: string
/**
 * This object contains information about the delivery window available to the shopper.
 */
availableDeliveryWindows?: {
/**
 * Delivery window starting day and time in UTC.
 */
startDateUtc?: string
/**
 * Delivery window ending day and time in UTC.
 */
endDateUtc?: string
/**
 * Delivery window price.
 */
price?: number
/**
 * Delivery window list price.
 */
lisPrice?: number
/**
 * Delivery window tax.
 */
tax?: number
}
/**
 * In case of scheduled delivery, this object will contain information on the delivery window selected by the shopper.
 */
deliveryWindow?: {
/**
 * Delivery window starting day and time in UTC.
 */
startDateUtc?: string
/**
 * Delivery window ending day and time in UTC.
 */
endDateUtc?: string
/**
 * Delivery window price.
 */
price?: number
/**
 * Delivery window list price.
 */
lisPrice?: number
/**
 * Delivery window tax.
 */
tax?: number
}
/**
 * Price in cents.
 */
price?: number
/**
 * List price in cents.
 */
listPrice?: number
/**
 * Tax in cents.
 */
tax?: number
/**
 * Information on the pickup store.
 */
pickupStoreInfo?: {
/**
 * Indicates whether it is the pickup store.
 */
isPickupStore?: boolean
/**
 * Friendly name.
 */
friendlyName?: (null | string)
/**
 * Address information.
 */
address?: (null | {

})
/**
 * Additional information.
 */
additionalInfo?: (null | string)
/**
 * Corresponding dock ID.
 */
dockId?: (null | string)
}
/**
 * Pickup point ID.
 */
pickupPointId?: (null | string)
/**
 * Pickup point distance.
 */
pickupDistance?: number
/**
 * Polygon name.
 */
polygonName?: (null | string)
/**
 * Transit time. For instance, "three business days" is represented as `3bd`.
 */
transitTime?: string
}[]
/**
 * List of available delivery channels.
 */
deliveryChannels?: {
/**
 * Delivery channel ID.
 */
id?: string
}[]
/**
 * Array containing an object for each message generated by our servers while processing the request.
 */
messages?: any[]
/**
 * Purchase conditions information.
 */
purchaseConditions?: {
/**
 * List of objects containing purchase condition information on each item in the order.
 */
itemPurchaseConditions?: {
/**
 * Item ID.
 */
id?: string
/**
 * Seller.
 */
seller?: string
/**
 * Sellers involved in the chain. The list should contain only one seller, unless it is a [Multilevel Omnichannel Inventory](https://help.vtex.com/en/tutorial/multilevel-omnichannel-inventory--7M1xyCZWUyCB7PcjNtOyw4) order.
 */
sellerChain?: any[]
/**
 * Information on available SLAs.
 */
slas?: {
/**
 * SLA ID.
 */
id?: string
/**
 * Delivery channel.
 */
deliveryChannel?: string
/**
 * SLA name.
 */
name?: string
/**
 * Information on each delivery ID.
 */
deliveryIds?: {
/**
 * Courier ID.
 */
courierId?: string
/**
 * Warehouse ID.
 */
warehouseId?: string
/**
 * Warehouse ID.
 */
dockId?: string
/**
 * Courier name.
 */
courierName?: string
/**
 * Quantity.
 */
quantity?: number
}[]
/**
 * Shipping estimate. For instance, "three business days" will be represented as `3bd`.
 */
shippingEstimate?: string
/**
 * Shipping estimate date.
 */
shippingEstimateDate?: (null | string)
/**
 * Estimate date of delivery.
 */
lockTTL?: string
/**
 * This object contains information about the delivery window available to the shopper.
 */
availableDeliveryWindows?: {
/**
 * Delivery window starting day and time in UTC.
 */
startDateUtc?: string
/**
 * Delivery window ending day and time in UTC.
 */
endDateUtc?: string
/**
 * Delivery window price.
 */
price?: number
/**
 * Delivery window list price.
 */
lisPrice?: number
/**
 * Delivery window tax.
 */
tax?: number
}
/**
 * In case of scheduled delivery, this object will contain information on the delivery window selected by the shopper.
 */
deliveryWindow?: {
/**
 * Delivery window starting day and time in UTC.
 */
startDateUtc?: string
/**
 * Delivery window ending day and time in UTC.
 */
endDateUtc?: string
/**
 * Delivery window price.
 */
price?: number
/**
 * Delivery window list price.
 */
lisPrice?: number
/**
 * Delivery window tax.
 */
tax?: number
}
/**
 * Price in cents.
 */
price?: number
/**
 * List price in cents.
 */
listPrice?: number
/**
 * Tax in cents.
 */
tax?: number
/**
 * Information on the pickup store.
 */
pickupStoreInfo?: {
/**
 * Indicates whether it is the pickup store.
 */
isPickupStore?: boolean
/**
 * Friendly name.
 */
friendlyName?: (null | string)
/**
 * Address information.
 */
address?: (null | {

})
/**
 * Additional information.
 */
additionalInfo?: (null | string)
/**
 * Corresponding dock ID.
 */
dockId?: (null | string)
}
/**
 * Pickup point ID.
 */
pickupPointId?: (null | string)
/**
 * Pickup point distance.
 */
pickupDistance?: number
/**
 * Polygon name.
 */
polygonName?: (null | string)
/**
 * Transit time. For instance, "three business days" is represented as `3bd`.
 */
transitTime?: string
}[]
/**
 * Price in cents.
 */
price?: number
/**
 * List price in cents.
 */
listPrice?: number
}[]
}
/**
 * Array containing pickup points information.
 */
pickupPoints?: any[]
/**
 * Subscription information.
 */
subscriptionData?: (null | {

})
/**
 * Information on order totals.
 */
totals?: {
/**
 * Total ID.
 */
id?: string
/**
 * Total name.
 */
name?: string
/**
 * Total value.
 */
value?: number
}[]
/**
 * Item metadata.
 */
itemMetadata?: {
/**
 * List of objects containing metadata on each item in the order.
 */
items?: {
/**
 * Item ID.
 */
id?: string
/**
 * Seller.
 */
seller?: string
/**
 * Assembly options information.
 */
assemblyOptions?: any[]
}[]
}
}[]
}
}
/**
 * You can use this request to get your current shopping cart information (`orderFormId`) or to create a new cart.
 * 
 * **Important**: To create a new empty shopping cart you need to send this request with the query param `forceNewCart=true`.
 * 
 * The [orderForm](https://developers.vtex.com/docs/guides/orderform-fields) is the data structure which represents a shopping cart and contains all information pertaining to it. Hence, the `orderFormId` obtained in response is the identification code of the newly created cart.
 * 
 * > This request has a time out of 45 seconds.
 */
"GET /api/checkout/pub/orderForm": {
searchParams: {
/**
 * Use this query parameter to create a new empty shopping cart.
 */
forceNewCart?: boolean
}
}
/**
 * Use this request to get all information associated to a given shopping  cart.
 * 
 * The [orderForm](https://developers.vtex.com/docs/guides/orderform-fields) is the data structure which represents a shopping cart and contains all information pertaining to it. Hence, the `orderFormId` is the identification code of a given cart.
 * 
 * > This request has a time out of 45 seconds.
 */
"GET /api/checkout/pub/orderForm/:orderFormId": {
searchParams: {
/**
 * It is possible to use the [Update cart items request](https://developers.vtex.com/vtex-rest-api/reference/cart-update#itemsupdate) so as to allow outdated information in the `orderForm`, which may improve performance in some cases. To guarantee that all cart information is updated, send this request with this parameter as `true`. We recommend doing this in the final stages of the shopping experience, starting from the checkout page.
 */
refreshOutdatedData?: boolean
}
}
/**
 * This request removes all items from a given cart, leaving it empty.
 * 
 * You must send an empty JSON in the body of the request.
 * 
 * The [orderForm](https://developers.vtex.com/docs/guides/orderform-fields) is the data structure which represents a shopping cart and contains all information pertaining to it. Hence, the `orderFormId` is the identification code of a given cart.
 * 
 * **Important**: **Request Body** must always be sent with empty value "{ }" in this endpoint.
 */
"POST /api/checkout/pub/orderForm/:orderFormId/items/removeAll": {
/**
 * This object must be empty.
 */
body: {

}
response: {

}
}
/**
 * This call removes all user information, making a cart anonymous while leaving the items.
 * 
 * The [orderForm](https://developers.vtex.com/docs/guides/orderform-fields) is the data structure that represents a shopping cart and contains all information about it. Hence, the `orderFormId` is the identification code of a given cart.
 * 
 * This call works by creating a new orderForm, setting a new cookie, and returning a redirect 302 to the cart URL (`/checkout/#/orderform`).
 */
"GET /checkout/changeToAnonymousUser/:orderFormId": {

}
/**
 * You can use this request to:
 * 
 * 1. Change the quantity of one or more items in a specific cart.
 * 2. Remove an item from the cart (by sending the `quantity` value = `0` in the request body).
 * 
 * **Important**: To remove all items from the cart at the same time, use the [Remove all items](https://developers.vtex.com/vtex-rest-api/reference/removeallitems) endpoint.
 * 
 * The [orderForm](https://developers.vtex.com/docs/guides/orderform-fields) is the data structure that represents a shopping cart and contains all information pertaining to it. Hence, the `orderFormId` is the identification code of a given cart.
 * 
 * > This request has a time out of 45 seconds.
 */
"POST /api/checkout/pub/orderForm/:orderFormId/items/update": {
searchParams: {
/**
 * In order to optimize performance, this parameter allows some information to not be updated when there are changes in the minicart. For instance, if a shopper adds another unit of a given SKU to the cart, it may not be necessary to recalculate payment information, which could impact performance.
 * 
 * This array accepts strings and currently the only possible value is `”paymentData”`.
 */
allowedOutdatedData?: any[]
}
body: {
/**
 * Array containing the cart items. Each object inside this array corresponds to a different item.
 */
orderItems?: {
/**
 * The quantity of the item in the cart.
 */
quantity: number
/**
 * The position of the item in the array.
 */
index: number
}[]
}
response: {
/**
 * ID of the orderForm corresponding to a specific cart.
 */
orderFormId?: string
/**
 * Attribute created by the seller, in their VTEX store configuration.
 */
salesChannel?: string
/**
 * Indicates whether the user is logged into the store.
 */
loggedIn?: boolean
/**
 * Indicates whether order is checked in.
 */
isCheckedIn?: boolean
/**
 * ID of the store.
 */
storeId?: (null | string)
/**
 * Permission to modify item price manually.
 */
allowManualPrice?: boolean
/**
 * Data can be edited.
 */
canEditData?: boolean
/**
 * Unique ID associated with the customer profile.
 */
userProfileId?: string
/**
 * Profile provider.
 */
profileProvider?: string
/**
 * Available accounts.
 */
availableAccounts?: string[]
/**
 * Information on each available address.
 */
availableAddresses?: {
/**
 * Address type.
 */
addressType?: string
/**
 * Name of the receiver.
 */
receiverName?: string
/**
 * Address ID.
 */
addressId?: string
/**
 * Indicates whether address is disposable.
 */
isDisposable?: boolean
/**
 * City of the address.
 */
city?: string
/**
 * State of the address.
 */
state?: string
/**
 * Country of the address. ISO three-letter code.
 */
country?: string
/**
 * Street of the address.
 */
street?: string
/**
 * Number of the address.
 */
number?: string
/**
 * Neighborhood of the address.
 */
neighborhood?: string
/**
 * Complement to the address.
 */
complement?: (null | string)
/**
 * Reference that may help in the location of the address.
 */
reference?: (null | string)
/**
 * List with the two geocoordinates.
 */
geoCoordinates?: string[]
}[]
/**
 * User type.
 */
userType?: (null | string)
/**
 * Ignore customer profile data.
 */
ignoreProfileData?: boolean
/**
 * Total value of the order without separating cents. For example, $24.99 is represented as `2499`.
 */
value?: number
/**
 * Array containing an object for each message generated by our servers while processing the request.
 */
messages?: any[]
/**
 * Information on each item in the order.
 */
items?: {
/**
 * Unique ID.
 */
uniqueId?: string
/**
 * ID of the item.
 */
id?: string
/**
 * Product ID.
 */
productId?: string
/**
 * Product Ref ID.
 */
productRefId?: string
/**
 * Ref ID.
 */
refId?: string
/**
 * European Article Number.
 */
ean?: (null | string)
/**
 * Product name.
 */
name?: string
/**
 * SKU name.
 */
skuName?: string
/**
 * Modal type.
 */
modalType?: (null | string)
/**
 * Parent item index.
 */
parentItemIndex?: (null | number)
/**
 * Parent assembly binding.
 */
parentAssemblyBinding?: (null | string)
/**
 * Price expiration date and time.
 */
priceValidUntil?: string
/**
 * Tax value in cents.
 */
tax?: number
/**
 * A unique identifier code assigned to a tax within the VTEX Admin.
 */
taxCode?: string
/**
 * Price in cents.
 */
price?: number
/**
 * List price in cents.
 */
listPrice?: number
/**
 * Manual price in cents.
 */
manualPrice?: (null | number)
/**
 * User that applied the manual price, if that is the case.
 */
manualPriceAppliedBy?: (null | string)
/**
 * Selling price in cents. Note that this field may be subject to rounding discrepancies. We recommend retrieving data from the `priceDefinition` data structure instead.
 */
sellingPrice?: number
/**
 * Reward value in cents.
 */
rewardValue?: number
/**
 * Indicates whether item is a gift.
 */
isGift?: boolean
/**
 * Additional information.
 */
additionalInfo?: {
/**
 * Dimension.
 */
dimension?: (null | string)
/**
 * Brand name.
 */
brandName?: string
/**
 * Brand ID.
 */
brandId?: string
/**
 * Offering information.
 */
offeringInfo?: (null | string)
/**
 * Offering type.
 */
offeringType?: (null | string)
/**
 * Offering type ID.
 */
offeringTypeId?: (null | string)
}
/**
 * Presale date.
 */
preSaleDate?: (null | string)
/**
 * Product category IDs.
 */
productCategoryIds?: string
/**
 * Object, where each field is an ID from `productCategoryIds`.
 */
productCategories?: {
/**
 * Product category corresponding to the ID in the field key.
 */
"{ID}"?: string
}
/**
 * Quantity.
 */
quantity?: number
/**
 * Seller.
 */
seller?: string
/**
 * Sellers involved in the chain. The list should contain only one seller, unless it is a [Multilevel Omnichannel Inventory](https://help.vtex.com/en/tutorial/multilevel-omnichannel-inventory--7M1xyCZWUyCB7PcjNtOyw4) order.
 */
sellerChain?: string[]
/**
 * Image URL.
 */
imageUrl?: string
/**
 * Detail URL.
 */
detailUrl?: string
/**
 * Information on services sold along with the SKU. Example: a gift package.
 */
bundleItems?: {
/**
 * Service type.
 */
type?: string
/**
 * Service identifier.
 */
id?: number
/**
 * Service name.
 */
name?: string
/**
 * Service price in cents.
 */
price?: number
}[]
/**
 * Array containing information on attachments.
 */
attachments?: string[]
/**
 * Array of price tags, each of which, modifies the price in some way, like discounts or rates that apply to the item in the context of the order.
 */
priceTags?: {
/**
 * Price tag identifier.
 */
identifier?: string
/**
 * Indicates whether price tag value is applied through a percentage.
 */
isPercentual?: boolean
/**
 * Price tag name.
 */
name?: string
/**
 * Price tag raw value.
 */
rawValue?: number
/**
 * Price tag value.
 */
value?: number
}[]
/**
 * Availability.
 */
availability?: string
/**
 * Measurement unit.
 */
measurementUnit?: string
/**
 * Unit multiplier.
 */
unitMultiplier?: number
/**
 * Manufacturer code.
 */
manufacturerCode?: (null | string)
/**
 * Price information for all units of a specific item.
 */
priceDefinition?: {
/**
 * Item's calculated unitary selling price in cents.
 */
calculatedSellingPrice?: number
/**
 * Total value for all units of the item in cents.
 */
total?: number
/**
 * Array of objects, each containing value (in cents) and quantity for the different rounding instances that can be combined to form the correctly rounded total.
 */
sellingPrices?: {
/**
 * Value in cents for that specific rounding.
 */
value?: number
/**
 * Rounding quantity, meaning how many items are rounded to this value.
 */
quantity?: number
}[]
}
}[]
/**
 * Array containing the data of the item selected as a gift.
 */
selectableGifts?: any[]
/**
 * Array containing an object for each totalizer for the purchase. Totalizers contain the sum of values for a specific part of the order (e.g. Total item value, Total shipping value).
 */
totalizers?: any[]
/**
 * Shipping information pertinent to the order.
 */
shippingData?: {
/**
 * Address information.
 */
address?: {
/**
 * Type of address. For example, `Residential` or `Pickup`.
 */
addressType?: string
/**
 * Name of the person who is going to receive the order.
 */
receiverName?: string
/**
 * Address ID.
 */
addressId?: string
/**
 * Indicates whether address is disposable.
 */
isDisposable?: boolean
/**
 * Postal code.
 */
postalCode?: string
/**
 * City of the shipping address.
 */
city?: string
/**
 * State of the shipping address.
 */
state?: string
/**
 * Three letter ISO code of the country of the shipping address.
 */
country?: string
/**
 * Street of the shipping address.
 */
street?: string
/**
 * Number of the building, house or apartment in the shipping address.
 */
number?: string
/**
 * Neighborhood of the shipping address.
 */
neighborhood?: string
/**
 * Complement to the shipping address, in case it applies.
 */
complement?: (null | string)
/**
 * Complement that might help locate the shipping address more precisely in case of delivery.
 */
reference?: (null | string)
/**
 * Array with two strings with geocoordinates, first latitude, then longitude.
 */
geoCoordinates?: string[]
}
/**
 * Array with logistics information. Each object in this array corresponds to an object in the `items` array, based on the respective `itemIndex`.
 */
logisticsInfo?: {
/**
 * Index corresponding to the position of the object in the `items` array.
 */
itemIndex?: number
/**
 * SLA selected by the customer.
 */
selectedSla?: string
/**
 * Delivery channel selected by the customer.
 */
selectedDeliveryChannel?: string
/**
 * Address ID.
 */
addressId?: string
/**
 * Information on available SLAs.
 */
slas?: {
/**
 * SLA ID.
 */
id?: string
/**
 * Delivery channel.
 */
deliveryChannel?: string
/**
 * SLA name.
 */
name?: string
/**
 * Information on each delivery ID.
 */
deliveryIds?: {
/**
 * Courier ID.
 */
courierId?: string
/**
 * Warehouse ID.
 */
warehouseId?: string
/**
 * Warehouse ID.
 */
dockId?: string
/**
 * Courier name.
 */
courierName?: string
/**
 * Quantity.
 */
quantity?: number
}[]
/**
 * Shipping estimate. For instance, "three business days" will be represented as `3bd`.
 */
shippingEstimate?: string
/**
 * Shipping estimate date.
 */
shippingEstimateDate?: (null | string)
/**
 * Estimate date of delivery.
 */
lockTTL?: string
/**
 * Price in cents.
 */
price?: number
/**
 * List price in cents.
 */
listPrice?: number
/**
 * Tax in cents.
 */
tax?: number
/**
 * Information on the pickup store.
 */
pickupStoreInfo?: {
/**
 * Indicates whether it is the pickup store.
 */
isPickupStore?: boolean
/**
 * Friendly name.
 */
friendlyName?: (null | string)
/**
 * Address information.
 */
address?: (null | {
/**
 * Type of address. For example, `Residential` or `Pickup`.
 */
addressType?: string
/**
 * Postal code.
 */
postalCode?: string
/**
 * City of the shipping address.
 */
city?: string
/**
 * State of the shipping address.
 */
state?: string
/**
 * Three letter ISO code of the country of the shipping address.
 */
country?: string
/**
 * Street of the shipping address.
 */
street?: string
/**
 * Number of the building, house or apartment in the shipping address.
 */
number?: string
/**
 * Neighborhood of the shipping address.
 */
neighborhood?: string
/**
 * Complement to the shipping address, in case it applies.
 */
complement?: (null | string)
/**
 * Complement that might help locate the shipping address more precisely in case of delivery.
 */
reference?: (null | string)
/**
 * Array with two strings with geocoordinates, first latitude, then longitude.
 */
geoCoordinates?: string[]
})
/**
 * Additional information.
 */
additionalInfo?: (null | string)
/**
 * Corresponding dock ID.
 */
dockId?: (null | string)
}
/**
 * Pickup point ID.
 */
pickupPointId?: (null | string)
/**
 * Pickup point distance.
 */
pickupDistance?: number
/**
 * Polygon name.
 */
polygonName?: (null | string)
/**
 * Transit time. For instance, "three business days" is represented as `3bd`.
 */
transitTime?: string
}[]
/**
 * List of countries that the item may be shipped to.
 */
shipsTo?: string[]
/**
 * Item ID.
 */
itemId?: string
/**
 * List of available delivery channels.
 */
deliveryChannels?: {
/**
 * Delivery channel ID.
 */
id?: string
}[]
}[]
/**
 * Array with information on the selected addresses for the order.
 */
selectedAddresses?: {
/**
 * Type of address. For example, `Residential` or `Pickup`.
 */
addressType?: string
/**
 * Name of the person who is going to receive the order.
 */
receiverName?: string
/**
 * Address ID.
 */
addressId?: string
/**
 * Indicates whether address is disposable.
 */
isDisposable?: boolean
/**
 * Postal code.
 */
postalCode?: string
/**
 * City of the shipping address.
 */
city?: string
/**
 * State of the shipping address.
 */
state?: string
/**
 * Three letter ISO code of the country of the shipping address.
 */
country?: string
/**
 * Street of the shipping address.
 */
street?: string
/**
 * Number of the building, house or apartment in the shipping address.
 */
number?: string
/**
 * Neighborhood of the shipping address.
 */
neighborhood?: string
/**
 * Complement to the shipping address, in case it applies.
 */
complement?: string
/**
 * Complement that might help locate the shipping address more precisely in case of delivery.
 */
reference?: (null | string)
/**
 * Array with two strings with geocoordinates, first latitude, then longitude.
 */
geoCoordinates?: string[]
}[]
/**
 * Array with information on the available addresses for the order.
 */
availableAddresses?: {
/**
 * Type of address. For example, `Residential` or `Pickup`.
 */
addressType?: string
/**
 * Name of the person who is going to receive the order.
 */
receiverName?: string
/**
 * Address ID.
 */
addressId?: string
/**
 * Indicates whether address is disposable.
 */
isDisposable?: boolean
/**
 * Postal code.
 */
postalCode?: string
/**
 * City of the shipping address.
 */
city?: string
/**
 * State of the shipping address.
 */
state?: string
/**
 * Three letter ISO code of the country of the shipping address.
 */
country?: string
/**
 * Street of the shipping address.
 */
street?: string
/**
 * Number of the building, house or apartment in the shipping address.
 */
number?: string
/**
 * Neighborhood of the shipping address.
 */
neighborhood?: string
/**
 * Complement to the shipping address, in case it applies.
 */
complement?: string
/**
 * Complement that might help locate the shipping address more precisely in case of delivery.
 */
reference?: (null | string)
/**
 * Array with two strings with geocoordinates, first latitude, then longitude.
 */
geoCoordinates?: string[]
}[]
}
/**
 * Customer's profile information.
 */
clientProfileData?: {
/**
 * Email address.
 */
email?: string
/**
 * First name.
 */
firstName?: string
/**
 * Last name.
 */
lastName?: string
/**
 * Type of the document informed by the customer.
 */
documentType?: string
/**
 * Document informed by the customer.
 */
document?: string
/**
 * Phone number.
 */
phone?: string
/**
 * Company name, if the customer is a legal entity.
 */
corporateName?: (null | string)
/**
 * Trade name, if the customer is a legal entity.
 */
tradeName?: (null | string)
/**
 * Corporate document, if the customer is a legal entity.
 */
corporateDocument?: (null | string)
/**
 * State inscription, if the customer is a legal entity.
 */
stateInscription?: (null | string)
/**
 * Corporate phone number, if the customer is a legal entity.
 */
corporatePhone?: (null | string)
/**
 * Indicates whether the customer is a legal entity.
 */
isCorporate?: boolean
/**
 * Indicates whether profile is complete on loading.
 */
profileCompleteOnLoading?: boolean
/**
 * Indicates whether profile presents error on loading.
 */
profileErrorOnLoading?: (null | boolean)
/**
 * Customer class.
 */
customerClass?: (null | string)
}
/**
 * Information on the order's payment.
 */
paymentData?: {
/**
 * Gift card information, if it applies to the order.
 */
giftCards?: {
/**
 * Gift card redemption code.
 */
redemptionCode?: string
/**
 * Gift card value in cents.
 */
value?: number
/**
 * Gift card balance in cents.
 */
balance?: number
/**
 * Gift card name.
 */
name?: string
/**
 * Gift card ID.
 */
id?: string
/**
 * Indicates whether gift card is in use.
 */
inUse?: boolean
/**
 * Indicates whether gift card is special.
 */
isSpecialCard?: boolean
}[]
/**
 * Information on each transaction pertinent to the order.
 */
transactions?: {
/**
 * Indicates whether transaction is active.
 */
isActive?: boolean
/**
 * Transaction ID.
 */
transactionId?: string
/**
 * Merchant name.
 */
merchantName?: string
/**
 * Information on each payment.
 */
payments?: {
/**
 * Account ID.
 */
accountId?: string
/**
 * Bin.
 */
bin?: string
/**
 * Number of installments.
 */
installments?: number
/**
 * Payment system.
 */
paymentSystem?: string
/**
 * Reference value for calculating interest rates, in case it applies. Displayed in cents.
 */
referenceValue?: number
/**
 * Value including interest, in case it applies. Displayed in cents.
 */
value?: number
}[]
/**
 * Indicates whather transaction is shared.
 */
sharedTransaction?: boolean
}[]
}
/**
 * Object containing promotion data such as coupon tracking information and internal or external UTMs.
 */
marketingData?: {
/**
 * Sending an existing coupon code in this field will return the corresponding discount in the purchase. Use the [cart simulation](https://developers.vtex.com/vtex-rest-api/reference/orderform#orderformsimulation) request to check which coupons might apply before placing the order.
 */
coupon?: string
/**
 * UTM source.
 */
utmSource?: string
/**
 * UTM medium.
 */
utmMedium?: string
/**
 * UTM campaign
 */
utmCampaign?: string
/**
 * utmi_page (internal utm).
 */
utmiPage?: (null | string)
/**
 * utmi_part (internal utm).
 */
utmiPart?: (null | string)
/**
 * utmi_campaign (internal utm).
 */
utmiCampaign?: (null | string)
}
/**
 * Information on each seller.
 */
sellers?: {
/**
 * Seller ID.
 */
id?: string
/**
 * Seller name.
 */
name?: string
/**
 * Seller logo.
 */
logo?: (null | string)
}[]
/**
 * Object containing preferences from the client who placed the order.
 */
clientPreferencesData?: {
/**
 * Client's locale. Examples: `pt-BR` and `en-US`.
 */
locale?: string
/**
 * `true` if the client opted to receive newsletter from the store.
 */
optinNewsLetter?: boolean
}
/**
 * Object containing commercial condition information.
 */
commercialConditionData?: (null | {

})
/**
 * Object containing data from the store's configuration (stored in VTEX's License Manager).
 */
storePreferencesData?: {

}
/**
 * Gift registry list information.
 */
giftRegistryData?: (null | {

})
/**
 * Optional field meant to hold additional information about the order. We recommend using this field for text, not data formats such as `JSON` even if escaped. For that purpose, see [Creating customizable fields](https://developers.vtex.com/vtex-rest-api/docs/creating-customizable-fields-in-the-cart-with-checkout-api-1).
 */
openTextField?: (null | string)
/**
 * Object containing information pertinent to the order's invoice.
 */
invoiceData?: (null | {

})
/**
 * Customer additional information.
 */
customData?: (null | {

})
/**
 * Item metadata.
 */
itemMetadata?: {
/**
 * List of objects containing metadata on each item in the order.
 */
items?: {
/**
 * Item ID.
 */
id?: string
/**
 * Seller.
 */
seller?: string
/**
 * Product name.
 */
name?: string
/**
 * SKU name.
 */
skuName?: string
/**
 * Product ID.
 */
productId?: string
/**
 * Ref ID.
 */
refId?: string
/**
 * European Article Number.
 */
ean?: (null | string)
/**
 * Image URL.
 */
imageUrl?: string
/**
 * Detail URL.
 */
detailUrl?: string
}[]
}
/**
 * Hooks information.
 */
hooksData?: (null | {

})
/**
 * Information on rates and benefits that apply to the order.
 */
ratesAndBenefitsData?: {
/**
 * List with rates and benefits identifiers.
 */
rateAndBenefitsIdentifiers?: string[]
/**
 * List with rates and benefits teasers.
 */
teaser?: string[]
}
/**
 * Subscription information.
 */
subscriptionData?: (null | {

})
/**
 * Object containing information about the ordering of items within the `orderForm`.
 */
itemsOrdination?: {
/**
 * Criteria adopted to order the items in the list.
 */
criteria?: string
/**
 * Indicates whether the ordering is ascending.
 */
ascending?: boolean
}
}
}
/**
 * Use this request to add a new item to the shopping cart.
 * 
 * The [orderForm](https://developers.vtex.com/docs/guides/orderform-fields) is the data structure which represents a shopping cart and contains all information pertaining to it. Hence, the `orderFormId` is the identification code of a given cart.
 * 
 * > This request has a time out of 45 seconds.
 */
"POST /api/checkout/pub/orderForm/:orderFormId/items": {
searchParams: {
/**
 * In order to optimize performance, this parameter allows some information to not be updated when there are changes in the minicart. For instance, if a shopper adds another unit of a given SKU to the cart, it may not be necessary to recalculate payment information, which could impact performance.
 * 
 * This array accepts strings and currently the only possible value is `”paymentData”`.
 */
allowedOutdatedData?: any[]
}
body: {
/**
 * Array containing the cart items. Each object inside this array corresponds to a different item.
 */
orderItems?: {
/**
 * The quantity of the item (SKU) in the cart.
 */
quantity: number
/**
 * The seller responsible for the SKU.
 */
seller: string
/**
 * The ID of the SKU in VTEX platform.
 */
id: string
/**
 * The position of the item in the array.
 */
index: number
/**
 * Price of the item in cents. Send this value in case you want to make a bulk price change.
 */
price?: number
}[]
}
response: {
/**
 * ID of the orderForm corresponding to a specific cart.
 */
orderFormId?: string
/**
 * Attribute created by the seller, in their VTEX store configuration.
 */
salesChannel?: string
/**
 * Indicates whether the user is logged into the store.
 */
loggedIn?: boolean
/**
 * Indicates whether order is checked in.
 */
isCheckedIn?: boolean
/**
 * ID of the store.
 */
storeId?: (null | string)
/**
 * Permission to modify item price manually.
 */
allowManualPrice?: boolean
/**
 * Data can be edited.
 */
canEditData?: boolean
/**
 * Unique ID associated with the customer profile.
 */
userProfileId?: string
/**
 * Profile provider.
 */
profileProvider?: string
/**
 * Available accounts.
 */
availableAccounts?: string[]
/**
 * Information on each available address.
 */
availableAddresses?: {
/**
 * Address type.
 */
addressType?: string
/**
 * Name of the receiver.
 */
receiverName?: string
/**
 * Address ID.
 */
addressId?: string
/**
 * Indicates whether address is disposable.
 */
isDisposable?: boolean
/**
 * City of the address.
 */
city?: string
/**
 * State of the address.
 */
state?: string
/**
 * Country of the address. ISO three-letter code.
 */
country?: string
/**
 * Street of the address.
 */
street?: string
/**
 * Number of the address.
 */
number?: string
/**
 * Neighborhood of the address.
 */
neighborhood?: string
/**
 * Complement to the address.
 */
complement?: (null | string)
/**
 * Reference that may help in the location of the address.
 */
reference?: (null | string)
/**
 * Array containing two floats with geocoordinates, first longitude, then latitude.
 */
geoCoordinates?: number[]
}[]
/**
 * User type.
 */
userType?: (null | string)
/**
 * Ignore customer profile data.
 */
ignoreProfileData?: boolean
/**
 * Total value of the order without separating cents. For example, $24.99 is represented `2499`.
 */
value?: number
/**
 * Array containing an object for each message generated by our servers while processing the request.
 */
messages?: any[]
/**
 * Information on each item in the order.
 */
items?: {
/**
 * Unique ID.
 */
uniqueId?: string
/**
 * ID of the item.
 */
id?: string
/**
 * Product ID.
 */
productId?: string
/**
 * Product Ref ID.
 */
productRefId?: string
/**
 * Ref ID.
 */
refId?: string
/**
 * European Article Number.
 */
ean?: (null | string)
/**
 * Product name.
 */
name?: string
/**
 * SKU name.
 */
skuName?: string
/**
 * Modal type.
 */
modalType?: (null | string)
/**
 * Parent item index.
 */
parentItemIndex?: (null | number)
/**
 * Parent assembly binding.
 */
parentAssemblyBinding?: (null | string)
/**
 * Price expiration date and time.
 */
priceValidUntil?: string
/**
 * Tax value in cents.
 */
tax?: number
/**
 * A unique identifier code assigned to a tax within the VTEX Admin.
 */
taxCode?: string
/**
 * Price in cents.
 */
price?: number
/**
 * List price in cents.
 */
listPrice?: number
/**
 * Manual price in cents.
 */
manualPrice?: (null | number)
/**
 * User that applied the manual price, if that is the case.
 */
manualPriceAppliedBy?: (null | string)
/**
 * Selling price in cents. Note that this field may be subject to rounding discrepancies. We recommend retrieving data from the `priceDefinition` data structure instead.
 */
sellingPrice?: number
/**
 * Reward value in cents.
 */
rewardValue?: number
/**
 * Indicates whether item is a gift.
 */
isGift?: boolean
/**
 * Additional information.
 */
additionalInfo?: {
/**
 * Dimension.
 */
dimension?: (null | string)
/**
 * Brand name.
 */
brandName?: string
/**
 * Brand ID.
 */
brandId?: string
/**
 * Offering information.
 */
offeringInfo?: (null | string)
/**
 * Offering type.
 */
offeringType?: (null | string)
/**
 * Offering type ID.
 */
offeringTypeId?: (null | string)
}
/**
 * Presale date.
 */
preSaleDate?: (null | string)
/**
 * Product category IDs.
 */
productCategoryIds?: string
/**
 * Object, where each field is an ID from `productCategoryIds`.
 */
productCategories?: {
/**
 * Product category corresponding to the ID in the field key.
 */
"{ID}"?: string
}
/**
 * Quantity.
 */
quantity?: number
/**
 * Seller.
 */
seller?: string
/**
 * Sellers involved in the chain. The list should contain only one seller, unless it is a [Multilevel Omnichannel Inventory](https://help.vtex.com/en/tutorial/multilevel-omnichannel-inventory--7M1xyCZWUyCB7PcjNtOyw4) order.
 */
sellerChain?: string[]
/**
 * Image URL.
 */
imageUrl?: string
/**
 * Detail URL.
 */
detailUrl?: string
/**
 * Information on services sold along with the SKU. Example: a gift package.
 */
bundleItems?: {
/**
 * Service type.
 */
type?: string
/**
 * Service identifier.
 */
id?: number
/**
 * Service name.
 */
name?: string
/**
 * Service price in cents.
 */
price?: number
}[]
/**
 * Array containing information on attachments.
 */
attachments?: string[]
/**
 * Array of price tags, each of which, modifies the price in some way, like discounts or rates that apply to the item in the context of the order.
 */
priceTags?: {
/**
 * Price tag identifier.
 */
identifier?: string
/**
 * Indicates whether price tag value is applied through a percentage.
 */
isPercentual?: boolean
/**
 * Price tag name.
 */
name?: string
/**
 * Price tag raw value.
 */
rawValue?: number
/**
 * Price tag value.
 */
value?: number
}[]
/**
 * Availability.
 */
availability?: string
/**
 * Measurement unit.
 */
measurementUnit?: string
/**
 * Unit multiplier.
 */
unitMultiplier?: number
/**
 * Manufacturer code.
 */
manufacturerCode?: (null | string)
/**
 * Price information for all units of a specific item.
 */
priceDefinition?: {
/**
 * Item's calculated unitary selling price in cents.
 */
calculatedSellingPrice?: number
/**
 * Total value for all units of the item in cents.
 */
total?: number
/**
 * Array of objects, each containing value (in cents) and quantity for the different rounding instances that can be combined to form the correctly rounded total.
 */
sellingPrices?: {
/**
 * Value in cents for that specific rounding.
 */
value?: number
/**
 * Rounding quantity, meaning how many items are rounded to this value.
 */
quantity?: number
}[]
}
}[]
/**
 * Array containing the data of the item selected as a gift.
 */
selectableGifts?: any[]
/**
 * Array containing an object for each totalizer for the purchase. Totalizers contain the sum of values for a specific part of the order (e.g. Total item value, Total shipping value).
 */
totalizers?: any[]
/**
 * Shipping information pertinent to the order.
 */
shippingData?: {
/**
 * Address information.
 */
address?: {
/**
 * Type of address. For example, `Residential` or `Pickup`.
 */
addressType?: string
/**
 * Name of the person who is going to receive the order.
 */
receiverName?: string
/**
 * Address ID.
 */
addressId?: string
/**
 * Indicates whether address is disposable.
 */
isDisposable?: boolean
/**
 * Postal code.
 */
postalCode?: string
/**
 * City of the shipping address.
 */
city?: string
/**
 * State of the shipping address.
 */
state?: string
/**
 * Three letter ISO code of the country of the shipping address.
 */
country?: string
/**
 * Street of the shipping address.
 */
street?: string
/**
 * Number of the building, house or apartment in the shipping address.
 */
number?: string
/**
 * Neighborhood of the shipping address.
 */
neighborhood?: string
/**
 * Complement to the shipping address, in case it applies.
 */
complement?: (null | string)
/**
 * Complement that might help locate the shipping address more precisely in case of delivery.
 */
reference?: (null | string)
/**
 * Array containing two floats with geocoordinates, first longitude, then latitude.
 */
geoCoordinates?: number[]
}
/**
 * Array with logistics information. Each object in this array corresponds to an object in the `items` array, based on the respective `itemIndex`.
 */
logisticsInfo?: {
/**
 * Index corresponding to the position of the object in the `items` array.
 */
itemIndex?: number
/**
 * SLA selected by the customer.
 */
selectedSla?: string
/**
 * Delivery channel selected by the customer.
 */
selectedDeliveryChannel?: string
/**
 * Address ID.
 */
addressId?: string
/**
 * Information on available SLAs.
 */
slas?: {
/**
 * SLA ID.
 */
id?: string
/**
 * Delivery channel.
 */
deliveryChannel?: string
/**
 * SLA name.
 */
name?: string
/**
 * Information on each delivery ID.
 */
deliveryIds?: {
/**
 * Courier ID.
 */
courierId?: string
/**
 * Warehouse ID.
 */
warehouseId?: string
/**
 * Warehouse ID.
 */
dockId?: string
/**
 * Courier name.
 */
courierName?: string
/**
 * Quantity.
 */
quantity?: number
}[]
/**
 * Shipping estimate. For instance, Three business days will be represented `3bd`.
 */
shippingEstimate?: string
/**
 * Shipping estimate date.
 */
shippingEstimateDate?: (null | string)
/**
 * Estimate date of delivery.
 */
lockTTL?: string
/**
 * Price in cents.
 */
price?: number
/**
 * List price in cents.
 */
listPrice?: number
/**
 * Tax in cents.
 */
tax?: number
/**
 * Information on the pickup store.
 */
pickupStoreInfo?: {
/**
 * Indicates whether it is the pickup store.
 */
isPickupStore?: boolean
/**
 * Friendly name.
 */
friendlyName?: (null | string)
/**
 * Address information.
 */
address?: (null | {
/**
 * Type of address. For example, `Residential` or `Pickup`.
 */
addressType?: string
/**
 * Postal code.
 */
postalCode?: string
/**
 * City of the shipping address.
 */
city?: string
/**
 * State of the shipping address.
 */
state?: string
/**
 * Three letter ISO code of the country of the shipping address.
 */
country?: string
/**
 * Street of the shipping address.
 */
street?: string
/**
 * Number of the building, house or apartment in the shipping address.
 */
number?: string
/**
 * Neighborhood of the shipping address.
 */
neighborhood?: string
/**
 * Complement to the shipping address, in case it applies.
 */
complement?: (null | string)
/**
 * Complement that might help locate the shipping address more precisely in case of delivery.
 */
reference?: (null | string)
/**
 * Array containing two floats with geocoordinates, first longitude, then latitude.
 */
geoCoordinates?: number[]
})
/**
 * Additional information.
 */
additionalInfo?: (null | string)
/**
 * Corresponding dock ID.
 */
dockId?: (null | string)
}
/**
 * Pickup point ID.
 */
pickupPointId?: (null | string)
/**
 * Pickup point distance.
 */
pickupDistance?: number
/**
 * Polygon name.
 */
polygonName?: (null | string)
/**
 * Transit time. For instance, "three business days" is represented `3bd`.
 */
transitTime?: string
}[]
/**
 * List of countries that the item may be shipped to.
 */
shipsTo?: string[]
/**
 * Item ID.
 */
itemId?: string
/**
 * List of available delivery channels.
 */
deliveryChannels?: {
/**
 * Delivery channel ID.
 */
id?: string
}[]
}[]
/**
 * Array with information on the selected addresses for the order.
 */
selectedAddresses?: {
/**
 * Type of address. For example, `Residential` or `Pickup`.
 */
addressType?: string
/**
 * Name of the person who is going to receive the order.
 */
receiverName?: string
/**
 * Address ID.
 */
addressId?: string
/**
 * Indicates whether address is disposable.
 */
isDisposable?: boolean
/**
 * Postal code.
 */
postalCode?: string
/**
 * City of the shipping address.
 */
city?: string
/**
 * State of the shipping address.
 */
state?: string
/**
 * Three letter ISO code of the country of the shipping address.
 */
country?: string
/**
 * Street of the shipping address.
 */
street?: string
/**
 * Number of the building, house or apartment in the shipping address.
 */
number?: string
/**
 * Neighborhood of the shipping address.
 */
neighborhood?: string
/**
 * Complement to the shipping address, in case it applies.
 */
complement?: string
/**
 * Complement that might help locate the shipping address more precisely in case of delivery.
 */
reference?: (null | string)
/**
 * Array containing two floats with geocoordinates, first longitude, then latitude.
 */
geoCoordinates?: number[]
}[]
/**
 * Array with information on the available addresses for the order.
 */
availableAddresses?: {
/**
 * Type of address. For example, `Residential` or `Pickup`.
 */
addressType?: string
/**
 * Name of the person who is going to receive the order.
 */
receiverName?: string
/**
 * Address ID.
 */
addressId?: string
/**
 * Indicates whether address is disposable.
 */
isDisposable?: boolean
/**
 * Postal code.
 */
postalCode?: string
/**
 * City of the shipping address.
 */
city?: string
/**
 * State of the shipping address.
 */
state?: string
/**
 * Three letter ISO code of the country of the shipping address.
 */
country?: string
/**
 * Street of the shipping address.
 */
street?: string
/**
 * Number of the building, house or apartment in the shipping address.
 */
number?: string
/**
 * Neighborhood of the shipping address.
 */
neighborhood?: string
/**
 * Complement to the shipping address, in case it applies.
 */
complement?: string
/**
 * Complement that might help locate the shipping address more precisely in case of delivery.
 */
reference?: (null | string)
/**
 * Array containing two floats with geocoordinates, first longitude, then latitude.
 */
geoCoordinates?: number[]
}[]
}
/**
 * Customer's profile information.
 */
clientProfileData?: {
/**
 * Email address.
 */
email?: string
/**
 * First name.
 */
firstName?: string
/**
 * Last name.
 */
lastName?: string
/**
 * Type of the document informed by the customer.
 */
documentType?: string
/**
 * Document informed by the customer.
 */
document?: string
/**
 * Phone number.
 */
phone?: string
/**
 * Company name, if the customer is a legal entity.
 */
corporateName?: (null | string)
/**
 * Trade name, if the customer is a legal entity.
 */
tradeName?: (null | string)
/**
 * Corporate document, if the customer is a legal entity.
 */
corporateDocument?: (null | string)
/**
 * State inscription, if the customer is a legal entity.
 */
stateInscription?: (null | string)
/**
 * Corporate phone number, if the customer is a legal entity.
 */
corporatePhone?: (null | string)
/**
 * Indicates whether the customer is a legal entity.
 */
isCorporate?: boolean
/**
 * Indicates whether profile is complete on loading.
 */
profileCompleteOnLoading?: boolean
/**
 * Indicates whether profile presents error on loading.
 */
profileErrorOnLoading?: (null | boolean)
/**
 * Customer class.
 */
customerClass?: (null | string)
}
/**
 * Information on the order's payment.
 */
paymentData?: {
/**
 * Gift card information, if it applies to the order.
 */
giftCards?: {
/**
 * Gift card redemption code.
 */
redemptionCode?: string
/**
 * Gift card value in cents.
 */
value?: number
/**
 * Gift card balance in cents.
 */
balance?: number
/**
 * Gift card name.
 */
name?: string
/**
 * Gift card ID.
 */
id?: string
/**
 * Indicates whether gift card is in use.
 */
inUse?: boolean
/**
 * Indicates whether gift card is special.
 */
isSpecialCard?: boolean
}[]
/**
 * Information on each transaction pertinent to the order.
 */
transactions?: {
/**
 * Indicates whether transaction is active.
 */
isActive?: boolean
/**
 * Transaction ID.
 */
transactionId?: string
/**
 * Merchant name.
 */
merchantName?: string
/**
 * Information on each payment.
 */
payments?: {
/**
 * Account ID.
 */
accountId?: string
/**
 * Bin.
 */
bin?: string
/**
 * Number of installments.
 */
installments?: number
/**
 * Payment system.
 */
paymentSystem?: string
/**
 * Reference value for calculating interest rates, in case it applies. Displayed in cents.
 */
referenceValue?: number
/**
 * Value including interest, in case it applies. Displayed in cents.
 */
value?: number
}[]
/**
 * Indicates whather transaction is shared.
 */
sharedTransaction?: boolean
}[]
}
/**
 * Object containing promotion data such as coupon tracking information and internal or external UTMs.
 */
marketingData?: {
/**
 * Sending an existing coupon code in this field will return the corresponding discount in the purchase. Use the [cart simulation](https://developers.vtex.com/vtex-rest-api/reference/orderform#orderformsimulation) request to check which coupons might apply before placing the order.
 */
coupon?: string
/**
 * UTM source.
 */
utmSource?: string
/**
 * UTM medium.
 */
utmMedium?: string
/**
 * UTM campaign
 */
utmCampaign?: string
/**
 * utmi_page (internal utm).
 */
utmiPage?: (null | string)
/**
 * utmi_part (internal utm).
 */
utmiPart?: (null | string)
/**
 * utmi_campaign (internal utm).
 */
utmiCampaign?: (null | string)
}
/**
 * Information on each seller.
 */
sellers?: {
/**
 * Seller ID.
 */
id?: string
/**
 * Seller name.
 */
name?: string
/**
 * Seller logo.
 */
logo?: (null | string)
}[]
/**
 * Object containing preferences from the client who placed the order.
 */
clientPreferencesData?: {
/**
 * Client's locale. Examples: `pt-BR` and `en-US`.
 */
locale?: string
/**
 * `true` if the client opted to receive newsletter from the store.
 */
optinNewsLetter?: boolean
}
/**
 * Object containing commercial condition information.
 */
commercialConditionData?: (null | {

})
/**
 * Object containing data from the store's configuration (stored in VTEX's License Manager).
 */
storePreferencesData?: {

}
/**
 * Gift registry list information.
 */
giftRegistryData?: (null | {

})
/**
 * Optional field meant to hold additional information about the order. We recommend using this field for text, not data formats such as `JSON` even if escaped. For that purpose, see [Creating customizable fields](https://developers.vtex.com/vtex-rest-api/docs/creating-customizable-fields-in-the-cart-with-checkout-api-1).
 */
openTextField?: (null | string)
/**
 * Object containing information pertinent to the order's invoice.
 */
invoiceData?: (null | {

})
/**
 * Customer additional information.
 */
customData?: (null | {

})
/**
 * Item metadata.
 */
itemMetadata?: {
/**
 * List of objects containing metadata on each item in the order.
 */
items?: {
/**
 * Item ID.
 */
id?: string
/**
 * Seller.
 */
seller?: string
/**
 * Product name.
 */
name?: string
/**
 * SKU name.
 */
skuName?: string
/**
 * Product ID.
 */
productId?: string
/**
 * Ref ID.
 */
refId?: string
/**
 * European Article Number.
 */
ean?: (null | string)
/**
 * Image URL.
 */
imageUrl?: string
/**
 * Detail URL.
 */
detailUrl?: string
}[]
}
/**
 * Hooks information.
 */
hooksData?: (null | {

})
/**
 * Information on rates and benefits that apply to the order.
 */
ratesAndBenefitsData?: {
/**
 * List with rates and benefits identifiers.
 */
rateAndBenefitsIdentifiers?: string[]
/**
 * List with rates and benefits teasers.
 */
teaser?: string[]
}
/**
 * Subscription information.
 */
subscriptionData?: (null | {

})
/**
 * Object containing information about the ordering of items within the orderForm.
 */
itemsOrdination?: {
/**
 * Criteria adopted to order the items in the list.
 */
criteria?: string
/**
 * Indicates whether the ordering is ascending.
 */
ascending?: boolean
}
}
}
/**
 * You can use this request to:
 * 
 * 1. Change the quantity or price of one or more items to the shopping cart.
 * 2. Add a new item to the shopping cart.
 * 
 * **Important**: To add a new item to the shopping cart, do not send the string `index` in the request body.
 * 
 * The [orderForm](https://developers.vtex.com/docs/guides/orderform-fields) is the data structure that represents a shopping cart and contains all information pertaining to it. Hence, the `orderFormId` is the identification code of a given cart.
 * 
 * > This request has a time out of 45 seconds.
 */
"PATCH /api/checkout/pub/orderForm/:orderFormId/items": {
body: {
/**
 * Array containing the cart items. Each object inside this array corresponds to a different item.
 */
orderItems?: {
/**
 * The ID of the SKU in VTEX platform.
 */
id: string
/**
 * The quantity of the item (SKU) in the cart.
 */
quantity: number
/**
 * The seller responsible for the SKU.
 */
seller: string
/**
 * The position of the item in the array. This string should be sent only to modify price or quantity of an item. NOTE: This string should not be sent when you are adding a new item to the cart.
 */
index?: number
/**
 * Price of the item in cents. Send this value in case you want to make a bulk price change.
 */
price?: number
/**
 * Array containing information on attachments.
 */
attachments?: {
/**
 * Attachment identification.
 */
name?: string
/**
 * Attachment content data. E.g. `"Do you want to receive packages?": "Yes"`.
 */
content?: (null | {

})
}[]
/**
 * Indicates whether the item can be splitted.
 */
noSplitItem?: boolean
/**
 * In order to optimize performance, this parameter allows some information to not be updated when there are changes in the minicart. For instance, if a shopper adds another unit of a given SKU to the cart, it may not be necessary to recalculate payment information, which could impact performance. This array accepts strings and currently the only possible value is `"paymentData"`.
 */
allowedOutdatedData?: string[]
}[]
}
response: {
/**
 * ID of the orderForm corresponding to a specific cart.
 */
orderFormId?: string
/**
 * Attribute created by the seller, in their VTEX store configuration.
 */
salesChannel?: string
/**
 * Indicates whether the user is logged into the store.
 */
loggedIn?: boolean
/**
 * Indicates whether order is checked in.
 */
isCheckedIn?: boolean
/**
 * ID of the store.
 */
storeId?: (null | string)
/**
 * Permission to modify item price manually.
 */
allowManualPrice?: boolean
/**
 * Data can be edited.
 */
canEditData?: boolean
/**
 * Unique ID associated with the customer profile.
 */
userProfileId?: string
/**
 * Profile provider.
 */
profileProvider?: string
/**
 * Available accounts.
 */
availableAccounts?: string[]
/**
 * Information on each available address.
 */
availableAddresses?: {
/**
 * Address type.
 */
addressType?: string
/**
 * Name of the receiver.
 */
receiverName?: string
/**
 * Address ID.
 */
addressId?: string
/**
 * Indicates whether address is disposable.
 */
isDisposable?: boolean
/**
 * City of the address.
 */
city?: string
/**
 * State of the address.
 */
state?: string
/**
 * Country of the address. ISO three-letter code.
 */
country?: string
/**
 * Street of the address.
 */
street?: string
/**
 * Number of the address.
 */
number?: string
/**
 * Neighborhood of the address.
 */
neighborhood?: string
/**
 * Complement to the address.
 */
complement?: (null | string)
/**
 * Reference that may help in the location of the address.
 */
reference?: (null | string)
/**
 * Array containing two floats with geocoordinates, first longitude, then latitude.
 */
geoCoordinates?: number[]
}[]
/**
 * User type.
 */
userType?: (null | string)
/**
 * Ignore customer profile data.
 */
ignoreProfileData?: boolean
/**
 * Total value of the order without separating cents. For example, $24.99 is represented `2499`.
 */
value?: number
/**
 * Array containing an object for each message generated by our servers while processing the request.
 */
messages?: any[]
/**
 * Information on each item in the order.
 */
items?: {
/**
 * Unique ID.
 */
uniqueId?: string
/**
 * ID of the item.
 */
id?: string
/**
 * Product ID.
 */
productId?: string
/**
 * Product Ref ID.
 */
productRefId?: string
/**
 * Ref ID.
 */
refId?: string
/**
 * European Article Number.
 */
ean?: (null | string)
/**
 * Product name.
 */
name?: string
/**
 * SKU name.
 */
skuName?: string
/**
 * Modal type.
 */
modalType?: (null | string)
/**
 * Parent item index.
 */
parentItemIndex?: (null | number)
/**
 * Parent assembly binding.
 */
parentAssemblyBinding?: (null | string)
/**
 * Price expiration date and time.
 */
priceValidUntil?: string
/**
 * Tax value in cents.
 */
tax?: number
/**
 * A unique identifier code assigned to a tax within the VTEX Admin.
 */
taxCode?: string
/**
 * Price in cents.
 */
price?: number
/**
 * List price in cents.
 */
listPrice?: number
/**
 * Manual price in cents.
 */
manualPrice?: (null | number)
/**
 * User that applied the manual price, if that is the case.
 */
manualPriceAppliedBy?: (null | string)
/**
 * Selling price in cents. Note that this field may be subject to rounding discrepancies. We recommend retrieving data from the `priceDefinition` data structure instead.
 */
sellingPrice?: number
/**
 * Reward value in cents.
 */
rewardValue?: number
/**
 * Indicates whether item is a gift.
 */
isGift?: boolean
/**
 * Additional information.
 */
additionalInfo?: {
/**
 * Dimension.
 */
dimension?: (null | string)
/**
 * Brand name.
 */
brandName?: string
/**
 * Brand ID.
 */
brandId?: string
/**
 * Offering information.
 */
offeringInfo?: (null | string)
/**
 * Offering type.
 */
offeringType?: (null | string)
/**
 * Offering type ID.
 */
offeringTypeId?: (null | string)
}
/**
 * Presale date.
 */
preSaleDate?: (null | string)
/**
 * Product category IDs.
 */
productCategoryIds?: string
/**
 * Object, where each field is an ID from `productCategoryIds`.
 */
productCategories?: {
/**
 * Product category corresponding to the ID in the field key.
 */
"{ID}"?: string
}
/**
 * Quantity.
 */
quantity?: number
/**
 * Seller.
 */
seller?: string
/**
 * Sellers involved in the chain. The list should contain only one seller, unless it is a [Multilevel Omnichannel Inventory](https://help.vtex.com/en/tutorial/multilevel-omnichannel-inventory--7M1xyCZWUyCB7PcjNtOyw4) order.
 */
sellerChain?: string[]
/**
 * Image URL.
 */
imageUrl?: string
/**
 * Detail URL.
 */
detailUrl?: string
/**
 * Information on services sold along with the SKU. Example: a gift package.
 */
bundleItems?: {
/**
 * Service type.
 */
type?: string
/**
 * Service identifier.
 */
id?: number
/**
 * Service name.
 */
name?: string
/**
 * Service price in cents.
 */
price?: number
}[]
/**
 * Array containing information on attachments.
 */
attachments?: string[]
/**
 * Array of price tags, each of which, modifies the price in some way, like discounts or rates that apply to the item in the context of the order.
 */
priceTags?: {
/**
 * Price tag identifier.
 */
identifier?: string
/**
 * Indicates whether price tag value is applied through a percentage.
 */
isPercentual?: boolean
/**
 * Price tag name.
 */
name?: string
/**
 * Price tag raw value.
 */
rawValue?: number
/**
 * Price tag value.
 */
value?: number
}[]
/**
 * Availability.
 */
availability?: string
/**
 * Measurement unit.
 */
measurementUnit?: string
/**
 * Unit multiplier.
 */
unitMultiplier?: number
/**
 * Manufacturer code.
 */
manufacturerCode?: (null | string)
/**
 * Price information for all units of a specific item.
 */
priceDefinition?: {
/**
 * Item's calculated unitary selling price in cents.
 */
calculatedSellingPrice?: number
/**
 * Total value for all units of the item in cents.
 */
total?: number
/**
 * Array of objects, each containing value (in cents) and quantity for the different rounding instances that can be combined to form the correctly rounded total.
 */
sellingPrices?: {
/**
 * Value in cents for that specific rounding.
 */
value?: number
/**
 * Rounding quantity, meaning how many items are rounded to this value.
 */
quantity?: number
}[]
}
}[]
/**
 * Array containing the data of the item selected as a gift.
 */
selectableGifts?: any[]
/**
 * Array containing an object for each totalizer for the purchase. Totalizers contain the sum of values for a specific part of the order (e.g. Total item value, Total shipping value).
 */
totalizers?: any[]
/**
 * Shipping information pertinent to the order.
 */
shippingData?: {
/**
 * Address information.
 */
address?: {
/**
 * Type of address. For example, `Residential` or `Pickup`.
 */
addressType?: string
/**
 * Name of the person who is going to receive the order.
 */
receiverName?: string
/**
 * Address ID.
 */
addressId?: string
/**
 * Indicates whether address is disposable.
 */
isDisposable?: boolean
/**
 * Postal code.
 */
postalCode?: string
/**
 * City of the shipping address.
 */
city?: string
/**
 * State of the shipping address.
 */
state?: string
/**
 * Three letter ISO code of the country of the shipping address.
 */
country?: string
/**
 * Street of the shipping address.
 */
street?: string
/**
 * Number of the building, house or apartment in the shipping address.
 */
number?: string
/**
 * Neighborhood of the shipping address.
 */
neighborhood?: string
/**
 * Complement to the shipping address, in case it applies.
 */
complement?: (null | string)
/**
 * Complement that might help locate the shipping address more precisely in case of delivery.
 */
reference?: (null | string)
/**
 * Array containing two floats with geocoordinates, first longitude, then latitude.
 */
geoCoordinates?: number[]
}
/**
 * Array with logistics information. Each object in this array corresponds to an object in the `items` array, based on the respective `itemIndex`.
 */
logisticsInfo?: {
/**
 * Index corresponding to the position of the object in the `items` array.
 */
itemIndex?: number
/**
 * SLA selected by the customer.
 */
selectedSla?: string
/**
 * Delivery channel selected by the customer.
 */
selectedDeliveryChannel?: string
/**
 * Address ID.
 */
addressId?: string
/**
 * Information on available SLAs.
 */
slas?: {
/**
 * SLA ID.
 */
id?: string
/**
 * Delivery channel.
 */
deliveryChannel?: string
/**
 * SLA name.
 */
name?: string
/**
 * Information on each delivery ID.
 */
deliveryIds?: {
/**
 * Courier ID.
 */
courierId?: string
/**
 * Warehouse ID.
 */
warehouseId?: string
/**
 * Warehouse ID.
 */
dockId?: string
/**
 * Courier name.
 */
courierName?: string
/**
 * Quantity.
 */
quantity?: number
}[]
/**
 * Shipping estimate. For instance, Three business days will be represented `3bd`.
 */
shippingEstimate?: string
/**
 * Shipping estimate date.
 */
shippingEstimateDate?: (null | string)
/**
 * Estimate date of delivery.
 */
lockTTL?: string
/**
 * Price in cents.
 */
price?: number
/**
 * List price in cents.
 */
listPrice?: number
/**
 * Tax in cents.
 */
tax?: number
/**
 * Information on the pickup store.
 */
pickupStoreInfo?: {
/**
 * Indicates whether it is the pickup store.
 */
isPickupStore?: boolean
/**
 * Friendly name.
 */
friendlyName?: (null | string)
/**
 * Address information.
 */
address?: (null | {
/**
 * Type of address. For example, `Residential` or `Pickup`.
 */
addressType?: string
/**
 * Postal code.
 */
postalCode?: string
/**
 * City of the shipping address.
 */
city?: string
/**
 * State of the shipping address.
 */
state?: string
/**
 * Three letter ISO code of the country of the shipping address.
 */
country?: string
/**
 * Street of the shipping address.
 */
street?: string
/**
 * Number of the building, house or apartment in the shipping address.
 */
number?: string
/**
 * Neighborhood of the shipping address.
 */
neighborhood?: string
/**
 * Complement to the shipping address, in case it applies.
 */
complement?: (null | string)
/**
 * Complement that might help locate the shipping address more precisely in case of delivery.
 */
reference?: (null | string)
/**
 * Array containing two floats with geocoordinates, first longitude, then latitude.
 */
geoCoordinates?: number[]
})
/**
 * Additional information.
 */
additionalInfo?: (null | string)
/**
 * Corresponding dock ID.
 */
dockId?: (null | string)
}
/**
 * Pickup point ID.
 */
pickupPointId?: (null | string)
/**
 * Pickup point distance.
 */
pickupDistance?: number
/**
 * Polygon name.
 */
polygonName?: (null | string)
/**
 * Transit time. For instance, "three business days" is represented `3bd`.
 */
transitTime?: string
}[]
/**
 * List of countries that the item may be shipped to.
 */
shipsTo?: string[]
/**
 * Item ID.
 */
itemId?: string
/**
 * List of available delivery channels.
 */
deliveryChannels?: {
/**
 * Delivery channel ID.
 */
id?: string
}[]
}[]
/**
 * Array with information on the selected addresses for the order.
 */
selectedAddresses?: {
/**
 * Type of address. For example, `Residential` or `Pickup`.
 */
addressType?: string
/**
 * Name of the person who is going to receive the order.
 */
receiverName?: string
/**
 * Address ID.
 */
addressId?: string
/**
 * Indicates whether address is disposable.
 */
isDisposable?: boolean
/**
 * Postal code.
 */
postalCode?: string
/**
 * City of the shipping address.
 */
city?: string
/**
 * State of the shipping address.
 */
state?: string
/**
 * Three letter ISO code of the country of the shipping address.
 */
country?: string
/**
 * Street of the shipping address.
 */
street?: string
/**
 * Number of the building, house or apartment in the shipping address.
 */
number?: string
/**
 * Neighborhood of the shipping address.
 */
neighborhood?: string
/**
 * Complement to the shipping address, in case it applies.
 */
complement?: string
/**
 * Complement that might help locate the shipping address more precisely in case of delivery.
 */
reference?: (null | string)
/**
 * Array containing two floats with geocoordinates, first longitude, then latitude.
 */
geoCoordinates?: number[]
}[]
/**
 * Array with information on the available addresses for the order.
 */
availableAddresses?: {
/**
 * Type of address. For example, `Residential` or `Pickup`.
 */
addressType?: string
/**
 * Name of the person who is going to receive the order.
 */
receiverName?: string
/**
 * Address ID.
 */
addressId?: string
/**
 * Indicates whether address is disposable.
 */
isDisposable?: boolean
/**
 * Postal code.
 */
postalCode?: string
/**
 * City of the shipping address.
 */
city?: string
/**
 * State of the shipping address.
 */
state?: string
/**
 * Three letter ISO code of the country of the shipping address.
 */
country?: string
/**
 * Street of the shipping address.
 */
street?: string
/**
 * Number of the building, house or apartment in the shipping address.
 */
number?: string
/**
 * Neighborhood of the shipping address.
 */
neighborhood?: string
/**
 * Complement to the shipping address, in case it applies.
 */
complement?: string
/**
 * Complement that might help locate the shipping address more precisely in case of delivery.
 */
reference?: (null | string)
/**
 * Array containing two floats with geocoordinates, first longitude, then latitude.
 */
geoCoordinates?: number[]
}[]
}
/**
 * Customer's profile information.
 */
clientProfileData?: {
/**
 * Email address.
 */
email?: string
/**
 * First name.
 */
firstName?: string
/**
 * Last name.
 */
lastName?: string
/**
 * Type of the document informed by the customer.
 */
documentType?: string
/**
 * Document informed by the customer.
 */
document?: string
/**
 * Phone number.
 */
phone?: string
/**
 * Company name, if the customer is a legal entity.
 */
corporateName?: (null | string)
/**
 * Trade name, if the customer is a legal entity.
 */
tradeName?: (null | string)
/**
 * Corporate document, if the customer is a legal entity.
 */
corporateDocument?: (null | string)
/**
 * State inscription, if the customer is a legal entity.
 */
stateInscription?: (null | string)
/**
 * Corporate phone number, if the customer is a legal entity.
 */
corporatePhone?: (null | string)
/**
 * Indicates whether the customer is a legal entity.
 */
isCorporate?: boolean
/**
 * Indicates whether profile is complete on loading.
 */
profileCompleteOnLoading?: boolean
/**
 * Indicates whether profile presents error on loading.
 */
profileErrorOnLoading?: (null | boolean)
/**
 * Customer class.
 */
customerClass?: (null | string)
}
/**
 * Information on the order's payment.
 */
paymentData?: {
/**
 * Gift card information, if it applies to the order.
 */
giftCards?: {
/**
 * Gift card redemption code.
 */
redemptionCode?: string
/**
 * Gift card value in cents.
 */
value?: number
/**
 * Gift card balance in cents.
 */
balance?: number
/**
 * Gift card name.
 */
name?: string
/**
 * Gift card ID.
 */
id?: string
/**
 * Indicates whether gift card is in use.
 */
inUse?: boolean
/**
 * Indicates whether gift card is special.
 */
isSpecialCard?: boolean
}[]
/**
 * Information on each transaction pertinent to the order.
 */
transactions?: {
/**
 * Indicates whether transaction is active.
 */
isActive?: boolean
/**
 * Transaction ID.
 */
transactionId?: string
/**
 * Merchant name.
 */
merchantName?: string
/**
 * Information on each payment.
 */
payments?: {
/**
 * Account ID.
 */
accountId?: string
/**
 * Bin.
 */
bin?: string
/**
 * Number of installments.
 */
installments?: number
/**
 * Payment system.
 */
paymentSystem?: string
/**
 * Reference value for calculating interest rates, in case it applies. Displayed in cents.
 */
referenceValue?: number
/**
 * Value including interest, in case it applies. Displayed in cents.
 */
value?: number
}[]
/**
 * Indicates whather transaction is shared.
 */
sharedTransaction?: boolean
}[]
}
/**
 * Object containing promotion data such as coupon tracking information and internal or external UTMs.
 */
marketingData?: {
/**
 * Sending an existing coupon code in this field will return the corresponding discount in the purchase. Use the [cart simulation](https://developers.vtex.com/docs/api-reference/checkout-api#post-/api/checkout/pub/orderForms/simulation) request to check which coupons might apply before placing the order.
 */
coupon?: string
/**
 * UTM source.
 */
utmSource?: string
/**
 * UTM medium.
 */
utmMedium?: string
/**
 * UTM campaign
 */
utmCampaign?: string
/**
 * utmi_page (internal utm).
 */
utmiPage?: (null | string)
/**
 * utmi_part (internal utm).
 */
utmiPart?: (null | string)
/**
 * utmi_campaign (internal utm).
 */
utmiCampaign?: (null | string)
}
/**
 * Information on each seller.
 */
sellers?: {
/**
 * Seller ID.
 */
id?: string
/**
 * Seller name.
 */
name?: string
/**
 * Seller logo.
 */
logo?: (null | string)
}[]
/**
 * Object containing preferences from the client who placed the order.
 */
clientPreferencesData?: {
/**
 * Client's locale. Examples: `pt-BR` and `en-US`.
 */
locale?: string
/**
 * `true` if the client opted to receive newsletter from the store.
 */
optinNewsLetter?: boolean
}
/**
 * Object containing commercial condition information.
 */
commercialConditionData?: (null | {

})
/**
 * Object containing data from the store's configuration (stored in VTEX's License Manager).
 */
storePreferencesData?: {

}
/**
 * Gift registry list information.
 */
giftRegistryData?: (null | {

})
/**
 * Optional field meant to hold additional information about the order. We recommend using this field for text, not data formats such as `JSON` even if escaped. For that purpose, see [Creating customizable fields](https://developers.vtex.com/docs/guides/customizable-fields-with-checkout-api).
 */
openTextField?: (null | string)
/**
 * Object containing information pertinent to the order's invoice.
 */
invoiceData?: (null | {

})
/**
 * Customer additional information.
 */
customData?: (null | {

})
/**
 * Item metadata.
 */
itemMetadata?: {
/**
 * List of objects containing metadata on each item in the order.
 */
items?: {
/**
 * Item ID.
 */
id?: string
/**
 * Seller.
 */
seller?: string
/**
 * Product name.
 */
name?: string
/**
 * SKU name.
 */
skuName?: string
/**
 * Product ID.
 */
productId?: string
/**
 * Ref ID.
 */
refId?: string
/**
 * European Article Number.
 */
ean?: (null | string)
/**
 * Image URL.
 */
imageUrl?: string
/**
 * Detail URL.
 */
detailUrl?: string
}[]
}
/**
 * Hooks information.
 */
hooksData?: (null | {

})
/**
 * Information on rates and benefits that apply to the order.
 */
ratesAndBenefitsData?: {
/**
 * List with rates and benefits identifiers.
 */
rateAndBenefitsIdentifiers?: string[]
/**
 * List with rates and benefits teasers.
 */
teaser?: string[]
}
/**
 * Subscription information.
 */
subscriptionData?: (null | {

})
/**
 * Object containing information about the ordering of items within the orderForm.
 */
itemsOrdination?: {
/**
 * Criteria adopted to order the items in the list.
 */
criteria?: string
/**
 * Indicates whether the ordering is ascending.
 */
ascending?: boolean
}
}
}
/**
 * This request changes the price of an SKU in a cart.
 * 
 * The [orderForm](https://developers.vtex.com/docs/guides/orderform-fields) is the data structure which represents a shopping cart and contains all information pertaining to it. Hence, the `orderFormId` is the identification code of a given cart.
 * 
 * You need to inform which cart you are referring to, by sending its `orderFormId` and what is the item whose price you want to change, by sending its `itemIndex`.
 * 
 * You also need to pass the new price value in the body.
 * 
 * Remember that, to use this endpoint, the feature of *manual price* must be active. To check if it's active, use the [Get orderForm configuration](https://developers.vtex.com/docs/api-reference/checkout-api#get-/api/checkout/pvt/configuration/orderForm) endpoint. To make it active, use the [Update orderForm configuration](https://developers.vtex.com/docs/api-reference/checkout-api#post-/api/checkout/pvt/configuration/orderForm) endpoint, making the `allowManualPrice` field `true`.
 * 
 * > Whenever you use this request to change the price of an item, all items in that cart with the same SKU are affected by this change. This applies even to items that share the SKU but have been separated into different objects in the `items` array due to customizations or attachments, for example.
 */
"PUT /api/checkout/pub/orderForm/:orderFormId/items/:itemIndex/price": {
body: PriceChangeRequest
}
/**
 * When a shopper provides an email address at Checkout, the platform tries to retrieve existing profile information for that email and add it to the shopping cart information. Use this request if you want to change this behavior for a given cart, meaning profile information will not be included in the order automattically.
 * 
 * The [orderForm](https://developers.vtex.com/docs/guides/orderform-fields) is the data structure which represents a shopping cart and contains all information pertaining to it. Hence, the `orderFormId` is the identification code of a given cart.
 * 
 * Note that this request will only work if you have not sent the `clientProfileData` to the cart yet. Sending it to a cart that already has a `clientProfileData` should return a status `403 Forbidden` error, with an `Access denied` message.
 */
"PATCH /api/checkout/pub/orderForm/:orderFormId/profile": {
body: {
/**
 * Indicates whether profile data should be ignored.
 */
ignoreProfileData?: boolean
}
}
/**
 * Retrieve a client's profile information by providing an email address.
 * 
 * If the response body fields are empty, the following situations may have occurred:
 * 
 * 1. There is no client registered with the email address provided in your store, or;
 * 2. Client profile is invalid or incomplete. However, you can use the query parameter `ensureComplete=false` to get incomplete profiles. For more information, see [SmartCheckout - Customer information automatic fill-in](https://help.vtex.com/en/tutorial/smartcheckout-customer-information-automatic-fill-in--2Nuu3xAFzdhIzJIldAdtan).
 * 
 * >⚠️ The authentication of this endpoint can change depending on the customer context. If you are consulting information from a customer with a complete profile on the store, the response will return the customer's data masked. You can only access the customer data with an authenticated request.
 */
"GET /api/checkout/pub/profiles": {
searchParams: {
/**
 * Client's email address to be searched.
 */
email: string
/**
 * Indicates whether the returned profiles must be complete or not.
 */
ensureComplete?: boolean
}
response: {
/**
 * Unique ID associated with the customer profile.
 */
userProfileId?: string
/**
 * Profile provider.
 */
profileProvider?: string
/**
 * Available accounts.
 */
availableAccounts?: string[]
/**
 * Information on each available address.
 */
availableAddresses?: {
/**
 * Address type.
 */
addressType?: string
/**
 * Name of the receiver.
 */
receiverName?: string
/**
 * Address ID.
 */
addressId?: string
/**
 * Indicates whether address is disposable.
 */
isDisposable?: boolean
/**
 * City of the address.
 */
city?: string
/**
 * State of the address.
 */
state?: string
/**
 * Country of the address. ISO three-letter code.
 */
country?: string
/**
 * Street of the address.
 */
street?: string
/**
 * Number of the address.
 */
number?: string
/**
 * Neighborhood of the address.
 */
neighborhood?: string
/**
 * Complement to the address.
 */
complement?: (null | string)
/**
 * Reference that may help in the location of the address.
 */
reference?: (null | string)
/**
 * Array containing two floats with geocoordinates, first longitude, then latitude.
 */
geoCoordinates?: number[]
}[]
/**
 * Customer profile information.
 */
userProfile?: {
/**
 * Email address.
 */
email?: string
/**
 * First name.
 */
firstName?: string
/**
 * Last name.
 */
lastName?: string
/**
 * Document.
 */
document?: string
/**
 * Document type.
 */
documentType?: string
/**
 * Telephone number.
 */
phone?: string
/**
 * Name of the company. Used for corporate clients.
 */
corporateName?: (null | string)
/**
 * Trade name. Used for corporate clients.
 */
tradeName?: (null | string)
/**
 * Document. Used for corporate clients.
 */
corporateDocument?: (null | string)
/**
 * State inscription. Used for corporate clients.
 */
stateInscription?: (null | string)
/**
 * Telephone number. Used for corporate clients.
 */
corporatePhone?: (null | string)
/**
 * Indicates whether client is corporate.
 */
isCorporate?: boolean
/**
 * Profile complete when loading.
 */
profileCompleteOnLoading?: (null | string)
/**
 * Profile error when loading.
 */
profileErrorOnLoading?: (null | string)
/**
 * Customer class.
 */
customerClass?: (null | string)
}
/**
 * Indicates whether customer profile is complete.
 */
isComplete?: boolean
}
}
/**
 * Use this request to include client profile information to a given shopping cart.
 * 
 * The [orderForm](https://developers.vtex.com/docs/guides/orderform-fields) is the data structure which represents a shopping cart and contains all information pertaining to it. Hence, the `orderFormId` is the identification code of a given cart.
 * 
 * > This request has a time out of 12 seconds.
 * 
 * >⚠️ The authentication of this endpoint can change depending on the customer context. If you are modifying information from a customer with a complete profile on the store, the response will return the customer's data masked. You can only access the customer data with an authenticated request.
 */
"POST /api/checkout/pub/orderForm/:orderFormId/attachments/clientProfileData": {
/**
 * Customer's profile information.
 */
body: {
/**
 * Customer's email address.
 */
email: string
/**
 * Customer's first name.
 */
firstName: string
/**
 * Customer's last name.
 */
lastName: string
/**
 * Type of the document informed by the customer.
 */
documentType: string
/**
 * Document number informed by the customer.
 */
document: string
/**
 * Customer's phone number.
 */
phone?: string
/**
 * Company name, if the customer is a legal entity.
 */
corporateName?: string
/**
 * Trade name, if the customer is a legal entity.
 */
tradeName?: string
/**
 * Corporate document, if the customer is a legal entity.
 */
corporateDocument?: string
/**
 * State inscription, if the customer is a legal entity.
 */
stateInscription?: string
/**
 * Corporate phone number, if the customer is a legal entity.
 */
corporatePhone?: string
/**
 * `true` if the customer is a legal entity.
 */
isCorporate?: boolean
}
}
/**
 * Use this request to include shipping information and/or selected delivery option to a given shopping cart.
 * 
 * To add shipping addresses send the `selectedAddresses` array. For delivery option use the `logisticsInfo` array.
 * 
 * The [orderForm](https://developers.vtex.com/docs/guides/orderform-fields) is the data structure which represents a shopping cart and contains all information pertaining to it. Hence, the `orderFormId` is the identification code of a given cart.
 * 
 * > This request has a time out of 12 seconds.
 * 
 * >⚠️ The authentication of this endpoint can change depending on the customer context. If you are modifying information from a customer with a complete profile on the store, the response will return the customer's data masked. You can only access the customer data with an authenticated request.
 */
"POST /api/checkout/pub/orderForm/:orderFormId/attachments/shippingData": {
body: {
/**
 * This field should be sent as `false` to prevent the address information from being filled in automatically based on the `postalCode` information.
 */
clearAddressIfPostalCodeNotFound?: boolean
/**
 * List of objects with addresses information.
 */
selectedAddresses?: {
/**
 * Type of address. For example, `Residential` or `Pickup`, among others.
 */
addressType?: string
/**
 * Name of the person who is going to receive the order.
 */
receiverName?: string
/**
 * Address ID.
 */
addressId?: string
/**
 * Postal Code.
 */
postalCode?: string
/**
 * City of the shipping address.
 */
city?: string
/**
 * State of the shipping address.
 */
state?: string
/**
 * Three letter ISO code of the country of the shipping address.
 */
country?: string
/**
 * Street of the shipping address.
 */
street?: string
/**
 * Number of the building, house or apartment in the shipping address.
 */
number?: string
/**
 * Neighborhood of the shipping address.
 */
neighborhood?: string
/**
 * Complement to the shipping address in case it applies.
 */
complement?: string
/**
 * Complement that might help locate the shipping address more precisely in case of delivery.
 */
reference?: string
/**
 * Array containing two floats with geocoordinates, first longitude, then latitude.
 */
geoCoordinates?: number[]
}[]
/**
 * Array with logistics information on each item of the `items` array in the `orderForm`.
 */
logisticsInfo?: {
/**
 * Index of item in items array
 */
itemIndex?: number
/**
 * Delivery channel selected by the customer. For example, `"delivery"` or `"pickup-in-point"`.
 */
selectedDeliveryChannel?: string
/**
 * Selected SLA. For example, `"normal"` or `"express"`.
 */
selectedSla?: string
}[]
}
response: {
/**
 * ID of the `orderForm` corresponding to a specific cart.
 */
orderFormId?: string
/**
 * Attribute created by the seller, in their VTEX store configuration.
 */
salesChannel?: string
/**
 * Indicates whether the user is logged into the store.
 */
loggedIn?: boolean
/**
 * Indicates whether order is checked in.
 */
isCheckedIn?: boolean
/**
 * ID of the store.
 */
storeId?: (null | string)
/**
 * Checked in pickuppoint identification.
 */
checkedInPickupPointId?: (null | string)
/**
 * Permission to modify item price manually.
 */
allowManualPrice?: boolean
/**
 * Data can be edited.
 */
canEditData?: boolean
/**
 * Unique ID associated with the customer profile.
 */
userProfileId?: (null | string)
/**
 * User type.
 */
userType?: (null | string)
/**
 * Ignore customer profile data.
 */
ignoreProfileData?: boolean
/**
 * Total value of the order without separating cents. For example, $24.99 is represented `2499`.
 */
value?: number
/**
 * Array containing an object for each message generated by our servers while processing the request.
 */
messages?: any[]
/**
 * Information on each item in the order.
 */
items?: {
/**
 * Unique ID.
 */
uniqueId?: string
/**
 * ID of the item.
 */
id?: string
/**
 * Product ID.
 */
productId?: string
/**
 * Product Ref ID.
 */
productRefId?: string
/**
 * Ref ID.
 */
refId?: string
/**
 * European Article Number.
 */
ean?: (null | string)
/**
 * Product name.
 */
name?: string
/**
 * SKU name.
 */
skuName?: string
/**
 * Modal type.
 */
modalType?: (null | string)
/**
 * Parent item index.
 */
parentItemIndex?: (null | number)
/**
 * Parent assembly binding.
 */
parentAssemblyBinding?: (null | string)
/**
 * Price expiration date and time.
 */
priceValidUntil?: string
/**
 * Tax value in cents.
 */
tax?: number
/**
 * Price in cents.
 */
price?: number
/**
 * List price in cents.
 */
listPrice?: number
/**
 * Manual price in cents.
 */
manualPrice?: (null | number)
/**
 * User that applied the manual price, if that is the case.
 */
manualPriceAppliedBy?: (null | string)
/**
 * Selling price in cents. Note that this field may be subject to rounding discrepancies. We recommend retrieving data from the `priceDefinition` data structure instead.
 */
sellingPrice?: number
/**
 * Reward value in cents.
 */
rewardValue?: number
/**
 * Indicates whether item is a gift.
 */
isGift?: boolean
/**
 * Additional information.
 */
additionalInfo?: {
/**
 * Dimension.
 */
dimension?: (null | string)
/**
 * Brand name.
 */
brandName?: string
/**
 * Brand ID.
 */
brandId?: string
/**
 * Offering information.
 */
offeringInfo?: (null | string)
/**
 * Offering type.
 */
offeringType?: (null | string)
/**
 * Offering type ID.
 */
offeringTypeId?: (null | string)
}
/**
 * Presale date.
 */
preSaleDate?: (null | string)
/**
 * Product category IDs.
 */
productCategoryIds?: string
/**
 * Object, where each field is an ID from `productCategoryIds`.
 */
productCategories?: {
/**
 * Product category corresponding to the ID in the field key.
 */
"{ID}"?: string
}
/**
 * Quantity.
 */
quantity?: number
/**
 * Seller.
 */
seller?: string
/**
 * Sellers involved in the chain. The list should contain only one seller, unless it is a [Multilevel Omnichannel Inventory](https://help.vtex.com/en/tutorial/multilevel-omnichannel-inventory--7M1xyCZWUyCB7PcjNtOyw4) order.
 */
sellerChain?: string[]
/**
 * Image URL.
 */
imageUrl?: string
/**
 * Detail URL.
 */
detailUrl?: string
/**
 * Information on services sold along with the SKU. Example: a gift package.
 */
bundleItems?: {
/**
 * Service type.
 */
type?: string
/**
 * Service identifier.
 */
id?: number
/**
 * Service name.
 */
name?: string
/**
 * Service price in cents.
 */
price?: number
}[]
/**
 * Array containing information on attachments.
 */
attachments?: string[]
/**
 * Array of price tags, each of which, modifies the price in some way, like discounts or rates that apply to the item in the context of the order.
 */
priceTags?: {
/**
 * Price tag identifier.
 */
identifier?: string
/**
 * Indicates whether price tag value is applied through a percentage.
 */
isPercentual?: boolean
/**
 * Price tag name.
 */
name?: string
/**
 * Price tag raw value.
 */
rawValue?: number
/**
 * Price tag value.
 */
value?: number
}[]
/**
 * Availability.
 */
availability?: string
/**
 * Measurement unit.
 */
measurementUnit?: string
/**
 * Unit multiplier.
 */
unitMultiplier?: number
/**
 * Manufacturer code.
 */
manufacturerCode?: (null | string)
/**
 * Price information for all units of a specific item.
 */
priceDefinition?: {
/**
 * Item's calculated unitary selling price in cents.
 */
calculatedSellingPrice?: number
/**
 * Total value for all units of the item in cents.
 */
total?: number
/**
 * Array of objects, each containing value (in cents) and quantity for the different rounding instances that can be combined to form the correctly rounded total.
 */
sellingPrices?: {
/**
 * Value in cents for that specific rounding.
 */
value?: number
/**
 * Rounding quantity, meaning how many items are rounded to this value.
 */
quantity?: number
}[]
}
}[]
/**
 * Array containing the data of the item selected as a gift.
 */
selectableGifts?: any[]
/**
 * Array containing an object for each totalizer for the purchase. Totalizers contain the sum of values for a specific part of the order (e.g. Total item value, Total shipping value).
 */
totalizers?: any[]
/**
 * Shipping information pertinent to the order.
 */
shippingData?: {
/**
 * Address information.
 */
address?: {
/**
 * Type of address. For example, `Residential` or `Pickup`.
 */
addressType?: string
/**
 * Name of the person who is going to receive the order.
 */
receiverName?: string
/**
 * Address ID.
 */
addressId?: string
/**
 * Indicates whether address is disposable.
 */
isDisposable?: boolean
/**
 * Postal code.
 */
postalCode?: string
/**
 * City of the shipping address.
 */
city?: string
/**
 * State of the shipping address.
 */
state?: string
/**
 * Three letter ISO code of the country of the shipping address.
 */
country?: string
/**
 * Street of the shipping address.
 */
street?: string
/**
 * Number of the building, house or apartment in the shipping address.
 */
number?: string
/**
 * Neighborhood of the shipping address.
 */
neighborhood?: string
/**
 * Complement to the shipping address, in case it applies.
 */
complement?: (null | string)
/**
 * Complement that might help locate the shipping address more precisely in case of delivery.
 */
reference?: (null | string)
/**
 * Array containing two floats with geocoordinates, first longitude, then latitude.
 */
geoCoordinates?: number[]
}
/**
 * Array with logistics information. Each object in this array corresponds to an object in the `items` array, based on the respective `itemIndex`.
 */
logisticsInfo?: {
/**
 * Index corresponding to the position of the object in the `items` array.
 */
itemIndex?: number
/**
 * SLA selected by the customer.
 */
selectedSla?: (null | string)
/**
 * Delivery channel selected by the customer.
 */
selectedDeliveryChannel?: (null | string)
/**
 * Address ID.
 */
addressId?: string
/**
 * Information on available SLAs.
 */
slas?: {
/**
 * SLA ID.
 */
id?: string
/**
 * Delivery channel.
 */
deliveryChannel?: string
/**
 * SLA name.
 */
name?: string
/**
 * Information on each delivery ID.
 */
deliveryIds?: {
/**
 * Courier ID.
 */
courierId?: string
/**
 * Warehouse ID.
 */
warehouseId?: string
/**
 * Warehouse ID.
 */
dockId?: string
/**
 * Courier name.
 */
courierName?: string
/**
 * Quantity.
 */
quantity?: number
}[]
/**
 * Shipping estimate. For instance, Three business days will be represented `3bd`.
 */
shippingEstimate?: string
/**
 * Shipping estimate date.
 */
shippingEstimateDate?: (null | string)
/**
 * Estimate date of delivery.
 */
lockTTL?: (null | string)
/**
 * This object contains information about the delivery window available to the shopper.
 */
availableDeliveryWindows?: {
/**
 * Delivery window starting day and time in UTC.
 */
startDateUtc?: string
/**
 * Delivery window ending day and time in UTC.
 */
endDateUtc?: string
/**
 * Delivery window price.
 */
price?: number
/**
 * Delivery window list price.
 */
lisPrice?: number
/**
 * Delivery window tax.
 */
tax?: number
}
/**
 * In case of scheduled delivery, this object will contain information on the delivery window selected by the shopper.
 */
deliveryWindow?: {
/**
 * Delivery window starting day and time in UTC.
 */
startDateUtc?: string
/**
 * Delivery window ending day and time in UTC.
 */
endDateUtc?: string
/**
 * Delivery window price.
 */
price?: number
/**
 * Delivery window list price.
 */
lisPrice?: number
/**
 * Delivery window tax.
 */
tax?: number
}
/**
 * Price in cents.
 */
price?: number
/**
 * List price in cents.
 */
listPrice?: number
/**
 * Tax in cents.
 */
tax?: number
/**
 * Information on the pickup store.
 */
pickupStoreInfo?: {
/**
 * Indicates whether it is the pickup store.
 */
isPickupStore?: boolean
/**
 * Friendly name.
 */
friendlyName?: (null | string)
/**
 * Address information.
 */
address?: (null | {
/**
 * Type of address. For example, `Residential` or `Pickup`.
 */
addressType?: string
/**
 * Name of the person who is going to receive the order.
 */
receiverName?: string
/**
 * Address ID.
 */
addressId?: string
/**
 * Indicates whether address is disposable.
 */
isDisposable?: boolean
/**
 * Postal code.
 */
postalCode?: string
/**
 * City of the shipping address.
 */
city?: string
/**
 * State of the shipping address.
 */
state?: string
/**
 * Three letter ISO code of the country of the shipping address.
 */
country?: string
/**
 * Street of the shipping address.
 */
street?: string
/**
 * Number of the building, house or apartment in the shipping address.
 */
number?: string
/**
 * Neighborhood of the shipping address.
 */
neighborhood?: string
/**
 * Complement to the shipping address, in case it applies.
 */
complement?: (null | string)
/**
 * Complement that might help locate the shipping address more precisely in case of delivery.
 */
reference?: (null | string)
/**
 * Array containing two floats with geocoordinates, first longitude, then latitude.
 */
geoCoordinates?: number[]
})
/**
 * Additional information.
 */
additionalInfo?: (null | string)
/**
 * Corresponding dock ID.
 */
dockId?: (null | string)
}
/**
 * Pickup point ID.
 */
pickupPointId?: (null | string)
/**
 * Pickup point distance.
 */
pickupDistance?: number
/**
 * Polygon name.
 */
polygonName?: (null | string)
/**
 * Transit time. For instance, "three business days" is represented `3bd`.
 */
transitTime?: string
}[]
/**
 * List of countries that the item may be shipped to.
 */
shipsTo?: string[]
/**
 * Item ID.
 */
itemId?: string
/**
 * List of available delivery channels.
 */
deliveryChannels?: {
/**
 * Delivery channel ID.
 */
id?: string
}[]
}[]
/**
 * Array with information on the selected addresses for the order.
 */
selectedAddresses?: {
/**
 * Type of address. For example, `Residential` or `Pickup`.
 */
addressType?: string
/**
 * Name of the person who is going to receive the order.
 */
receiverName?: string
/**
 * Address ID.
 */
addressId?: string
/**
 * Indicates whether address is disposable.
 */
isDisposable?: boolean
/**
 * Postal code.
 */
postalCode?: string
/**
 * City of the shipping address.
 */
city?: string
/**
 * State of the shipping address.
 */
state?: string
/**
 * Three letter ISO code of the country of the shipping address.
 */
country?: string
/**
 * Street of the shipping address.
 */
street?: string
/**
 * Number of the building, house or apartment in the shipping address.
 */
number?: string
/**
 * Neighborhood of the shipping address.
 */
neighborhood?: string
/**
 * Complement to the shipping address, in case it applies.
 */
complement?: (null | string)
/**
 * Complement that might help locate the shipping address more precisely in case of delivery.
 */
reference?: (null | string)
/**
 * Array containing two floats with geocoordinates, first longitude, then latitude.
 */
geoCoordinates?: number[]
}[]
/**
 * Information on each available address.
 */
availableAddresses?: {
/**
 * Address type.
 */
addressType?: string
/**
 * Name of the receiver.
 */
receiverName?: string
/**
 * Address ID.
 */
addressId?: string
/**
 * Indicates whether address is disposable.
 */
isDisposable?: boolean
/**
 * City of the address.
 */
city?: string
/**
 * State of the address.
 */
state?: string
/**
 * Country of the address. ISO three-letter code.
 */
country?: string
/**
 * Street of the address.
 */
street?: string
/**
 * Number of the address.
 */
number?: string
/**
 * Neighborhood of the address.
 */
neighborhood?: string
/**
 * Complement to the address.
 */
complement?: (null | string)
/**
 * Reference that may help in the location of the address.
 */
reference?: (null | string)
/**
 * Array containing two floats with geocoordinates, first longitude, then latitude.
 */
geoCoordinates?: number[]
}[]
/**
 * Array containing pickup points information.
 */
pickupPoints?: any[]
}
/**
 * Customer's profile information.
 */
clientProfileData?: {
/**
 * Email address.
 */
email?: string
/**
 * First name.
 */
firstName?: string
/**
 * Last name.
 */
lastName?: string
/**
 * Type of the document informed by the customer.
 */
documentType?: string
/**
 * Document informed by the customer.
 */
document?: string
/**
 * Phone number.
 */
phone?: string
/**
 * Company name, if the customer is a legal entity.
 */
corporateName?: (null | string)
/**
 * Trade name, if the customer is a legal entity.
 */
tradeName?: (null | string)
/**
 * Corporate document, if the customer is a legal entity.
 */
corporateDocument?: (null | string)
/**
 * State inscription, if the customer is a legal entity.
 */
stateInscription?: (null | string)
/**
 * Corporate phone number, if the customer is a legal entity.
 */
corporatePhone?: (null | string)
/**
 * Indicates whether the customer is a legal entity.
 */
isCorporate?: boolean
/**
 * Indicates whether profile is complete on loading.
 */
profileCompleteOnLoading?: boolean
/**
 * Indicates whether profile presents error on loading.
 */
profileErrorOnLoading?: (null | boolean)
/**
 * Customer class.
 */
customerClass?: (null | string)
}
/**
 * Payment data information.
 */
paymentData?: {
/**
 * Indicate whether this object's information is up to date according to the order's items. An order can not be placed if `"outdated"`
 */
updateStatus?: string
/**
 * Installment options information.
 */
installmentOptions?: any[]
/**
 * Information on payment systems.
 */
paymentSystems?: {
/**
 * Payment system ID.
 */
id?: number
/**
 * Payment system name.
 */
name?: string
/**
 * Payment group name.
 */
groupName?: string
/**
 * Payment system validator.
 */
validator?: (null | {

})
/**
 * String ID.
 */
stringId?: string
/**
 * Template.
 */
template?: string
/**
 * Indicates whether a document is required.
 */
requiresDocument?: boolean
/**
 * Indicates whether a document is shown.
 */
displayDocument?: boolean
/**
 * Indicates whether it is custom.
 */
isCustom?: boolean
/**
 * Description.
 */
description?: string
/**
 * Indicates whether a authentication is required.
 */
requiresAuthentication?: boolean
/**
 * Payment due date.
 */
dueDate?: string
/**
 * Availability of payment.
 */
availablePayments?: (null | string)
}[]
/**
 * Information on each payment.
 */
payments?: any[]
/**
 * Gift card information, if it applies to the order.
 */
giftCards?: any[]
/**
 * Array of gift card messages.
 */
giftCardMessages?: any[]
/**
 * Available accounts.
 */
availableAccounts?: any[]
/**
 * Available tokens.
 */
availableTokens?: any[]
/**
 * Available associations.
 */
availableAssociations?: {

}
}
/**
 * Object containing promotion data such as coupon tracking information and internal or external UTMs.
 */
marketingData?: (null | {

})
/**
 * Information on each seller.
 */
sellers?: {
/**
 * Seller ID.
 */
id?: string
/**
 * Seller name.
 */
name?: string
/**
 * Seller logo.
 */
logo?: (null | string)
}[]
/**
 * Object containing preferences from the client who placed the order.
 */
clientPreferencesData?: {
/**
 * Client's locale. Examples: `pt-BR` and `en-US`.
 */
locale?: string
/**
 * `true` if the client opted to receive newsletter from the store.
 */
optinNewsLetter?: boolean
}
/**
 * Object containing commercial condition information.
 */
commercialConditionData?: (null | {

})
/**
 * Object containing data from the store's configuration (stored in VTEX's License Manager).
 */
storePreferencesData?: {
/**
 * Three letters ISO code of the country (ISO 3166 ALPHA-3).
 */
countryCode?: string
/**
 * Defines whether the customer want the store to keep their personal and payment data saved.
 */
saveUserData?: boolean
/**
 * Time zone from where the order was made.
 */
timeZone?: string
/**
 * Currency code in ISO 4217. For example, `BRL`.
 */
currencyCode?: string
/**
 * Currency Locale Code in LCID in decimal.
 */
currencyLocale?: number
/**
 * Currency symbol.
 */
currencySymbol?: string
/**
 * Object with currency format details.
 */
CurrencyFormatInfo?: {
/**
 * Quantity of currency decimal digits.
 */
CurrencyDecimalDigits?: number
/**
 * Defines what currency decimal separator will be applied.
 */
CurrencyDecimalSeparator?: string
/**
 * Defines what currency group separator will be applied.
 */
CurrencyGroupSeparator?: string
/**
 * Defines how many characters will be grouped.
 */
CurrencyGroupSize?: number
/**
 * Defines if all prices will be initiated with the currency symbol (`true`) or not (`false`).
 */
StartsWithCurrencySymbol?: boolean
}
}
/**
 * Gift registry list information.
 */
giftRegistryData?: (null | {

})
/**
 * Optional field meant to hold additional information about the order. We recommend using this field for text, not data formats such as `JSON` even if escaped. For that purpose, see [Creating customizable fields](https://developers.vtex.com/vtex-rest-api/docs/creating-customizable-fields-in-the-cart-with-checkout-api-1).
 */
openTextField?: (null | string)
/**
 * Object containing information pertinent to the order's invoice.
 */
invoiceData?: (null | {

})
/**
 * Customer additional information.
 */
customData?: (null | {

})
/**
 * Item metadata.
 */
itemMetadata?: (null | {

})
/**
 * Hooks information.
 */
hooksData?: (null | {

})
/**
 * Information on rates and benefits that apply to the order.
 */
ratesAndBenefitsData?: (null | {

})
/**
 * Subscription information.
 */
subscriptionData?: (null | {

})
/**
 * Object containing information about the ordering of items within the orderForm.
 */
itemsOrdination?: (null | {

})
}
}
/**
 * Use this request to include client preferences information to a given shopping cart.
 * 
 * The [orderForm](https://developers.vtex.com/docs/guides/orderform-fields) is the data structure which represents a shopping cart and contains all information pertaining to it. Hence, the `orderFormId` is the identification code of a given cart.
 * 
 * > This request has a time out of 12 seconds.
 */
"POST /api/checkout/pub/orderForm/:orderFormId/attachments/clientPreferencesData": {
body: {
/**
 * Locale chosen by the shopper. Determines website language.
 */
locale?: string
/**
 * Indicates whether the shopper opted in to receive the store's news letter.
 */
optinNewsLetter?: boolean
}
response: any
}
/**
 * Use this request to include marketing information to a given shopping cart.
 * 
 * The [orderForm](https://developers.vtex.com/docs/guides/orderform-fields) is the data structure which represents a shopping cart and contains all information pertaining to it. Hence, the `orderFormId` is the identification code of a given cart.
 * 
 * > This request has a time out of 12 seconds.
 */
"POST /api/checkout/pub/orderForm/:orderFormId/attachments/marketingData": {
body: {
/**
 * Sending an existing coupon code in this field will return the corresponding discount in the purchase. Use the [cart simulation](https://developers.vtex.com/vtex-rest-api/reference/orderform#orderformsimulation) request to check which coupons might apply before placing the order.
 * 
 * To send more than one coupon code to the same cart, use commas. E.g.`"sales25, blackfriday30"`.
 */
coupon?: string
/**
 * Marketing tags. Limited to a maximum of 50 items.
 */
marketingTags?: string[]
/**
 * UTM source.
 */
utmSource?: string
/**
 * UTM medium.
 */
utmMedium?: string
/**
 * UTM campaign
 */
utmCampaign?: string
/**
 * utmi_page (internal utm)
 */
utmiPage?: string
/**
 * utmi_part (internal utm)
 */
utmiPart?: string
/**
 * utmi_campaign (internal utm)
 */
utmiCampaign?: string
}
}
/**
 * Use this request to include payment information to a given shopping cart. The payment information attachment in the shopping cart does not determine the final order payment method in itself. However, it allows tha platform to update any relevant information that may be impacted by the payment method.
 * 
 * The [orderForm](https://developers.vtex.com/docs/guides/orderform-fields) is the data structure which represents a shopping cart and contains all information pertaining to it. Hence, the `orderFormId` is the identification code of a given cart.
 * 
 * > This request has a time out of 12 seconds.
 */
"POST /api/checkout/pub/orderForm/:orderFormId/attachments/paymentData": {
body: {
/**
 * Array with information on each payment chosen by the shopper.
 */
payments?: {
/**
 * Payment system ID.
 */
paymentSystem?: number
/**
 * Payment system name.
 */
paymentSystemName?: string
/**
 * Payment system group.
 */
group?: string
/**
 * Selected number of installments.
 */
installments?: number
/**
 * Installments' interest rate.
 */
installmentsInterestRate?: number
/**
 * Value of the installments.
 */
installmentsValue?: number
/**
 * Total value assigned to this payment.
 */
value?: number
/**
 * Reference value used to calculate total order value with interest.
 */
referenceValue?: number
/**
 * Indicates whether billing address for this payment is the default address.
 */
hasDefaultBillingAddress?: boolean
}[]
}
}
/**
 * This endpoint is used for the merchant to add to the cart any relevant information that is related to the context of a specific order.
 * 
 * The [orderForm](https://developers.vtex.com/docs/guides/orderform-fields) is the data structure which represents a shopping cart and contains all information pertaining to it. Hence, the `orderFormId` is the identification code of a given cart.
 * 
 * > This request has a time out of 12 seconds.
 */
"POST /api/checkout/pub/orderForm/:orderFormId/attachments/merchantContextData": {
body: {
/**
 * Sales Associate information.
 */
salesAssociateData: {
/**
 * Sales Associate (Seller) identification code. All information should be registered by the merchant. Maximum of 100 characters.
 */
salesAssociateId?: string
}
}
response: {
/**
 * Sales Associate (Seller) identification code.
 */
salesAssociateId?: string
}
}
/**
 * Your account may create `apps`, which contain custom fields, through the [Update orderForm configuration](https://developers.vtex.com/docs/api-reference/checkout-api#post-/api/checkout/pvt/configuration/orderForm) request. The values of these custom fields can then be updated by this request.
 * 
 * To do that, you need to inform the ID of the app you created with the configuration API (`appId`).
 * 
 * In the body of the request, for each field created in this app (`appFieldName`) you will inform a value (`appFieldValue`).
 * 
 * The [orderForm](https://developers.vtex.com/docs/guides/orderform-fields) is the data structure which represents a shopping cart and contains all information pertaining to it. Hence, the `orderFormId` is the identification code of a given cart.
 */
"PUT /api/checkout/pub/orderForm/:orderFormId/customData/:appId": {
/**
 * Here you must add the pairs of Field Name and Field Value.
 */
body: {
[k: string]: any
}
response: any
}
/**
 * Your account may create `apps`, which contain custom fields, through the [Update orderForm configuration](https://developers.vtex.com/docs/api-reference/checkout-api#post-/api/checkout/pvt/configuration/orderForm) request. The value of a specific custom field can then be updated by this request.
 * 
 * To do that, you need to inform in the URL the ID of the app you created with the configuration API (`appId`).
 * 
 * In the body of the request, you will inform the new value (`appFieldValue`, passed through the body) of the specific field created in this app (identified by the `appFieldName` parameter, passed through the URL).
 * 
 * The [orderForm](https://developers.vtex.com/docs/guides/orderform-fields) is the data structure which represents a shopping cart and contains all information pertaining to it. Hence, the `orderFormId` is the identification code of a given cart.
 */
"PUT /api/checkout/pub/orderForm/:orderFormId/customData/:appId/:appFieldName": {
body: SetsinglecustomfieldvalueRequest
}
/**
 * Your account may create `apps`, which contain custom fields, through the [Update orderForm configuration](https://developers.vtex.com/docs/api-reference/checkout-api#post-/api/checkout/pvt/configuration/orderForm) request. The value of a specific custom field can be removed by this request.
 * 
 * To do that, you need to inform in the URL the ID of the app you created with the configuration API (`appId`).
 * 
 * You also need to iform the specific field created in this app (identified by the `appFieldName` parameter, also passed through the URL) whose value you want to remove.
 */
"DELETE /api/checkout/pub/orderForm/:orderFormId/customData/:appId/:appFieldName": {

}
/**
 * Retrieves the settings that are currently applied to every orderForm in the account.
 * 
 * These settings are defined by the request [Update orderForm configuration](https://developers.vtex.com/docs/api-reference/checkout-api#post-/api/checkout/pvt/configuration/orderForm).
 * 
 * Always use this request to retrieve the current configuration before performing an update. By doing so you ensure that you are modifying only the properties you want.
 */
"GET /api/checkout/pvt/configuration/orderForm": {
response: {
/**
 * Payment configuration information.
 */
paymentConfiguration?: {
/**
 * Determines whether pre-authorized payments require authentication.
 */
requiresAuthenticationForPreAuthorizedPaymentOption?: boolean
/**
 * By default (when `false`), on a multi-seller purchase is on the run, a simple intersection with installment options configured by every seller will be available. When indicated as `true`, this option allows a more complex but flexible installment option, since it considers max installments of every seller configuration, even if those do not match. Installment values may not be equal in this case.
 */
allowInstallmentsMerge?: boolean
}
/**
 * External tax service configuration information.
 */
taxConfiguration?: (null | {
/**
 * Endpoint URL.
 */
url?: (null | string)
/**
 * Authorization header.
 */
authorizationHeader?: (null | string)
/**
 * Custom data ID sent to the tax system.
 */
appId?: string
})
/**
 * Minimum SKU quantity by cart.
 */
minimumQuantityAccumulatedForItems?: number
/**
 * Number of price digits.
 */
decimalDigitsPrecision?: number
/**
 * Minimum cart value.
 */
minimumValueAccumulated?: (null | number)
/**
 * Array of objects containing Apps configuration information.
 */
apps?: (null | {
/**
 * App ID.
 */
id?: string
/**
 * Array of fields available to the app.
 */
fields?: string[]
/**
 * App major version.
 */
major?: number
}[])
/**
 * On the same purchase, allows the selection of items from multiple delivery channels.
 */
allowMultipleDeliveries?: (null | boolean)
/**
 * Allows the editing of SKU prices right in the cart.
 */
allowManualPrice?: (null | boolean)
/**
 * Allows users to select whether they want the store to keep their personal and payment data saved.
 */
savePersonalDataAsOptIn?: (null | boolean)
/**
 * Allows the input of a limit of white label sellers involved on the cart.
 */
maxNumberOfWhiteLabelSellers?: (null | number)
/**
 * Allows, on a first purchase, masking client's data. It could be useful when a shared cart is used and the client does not want to share its data.
 */
maskFirstPurchaseData?: (null | boolean)
/**
 * Configures reCAPTCHA validation for the account, defining in which situations the shopper will be prompted to validate a purchase with reCAPTCHA. Learn more about [reCAPTCHA validation for VTEX stores](https://help.vtex.com/en/tutorial/using-recaptcha-at-checkout--18Te3oDd7f4qcjKu9jhNzP)
 * 
 * Possible values are:
 * - `"never"`: no purchases are validated with reCAPTCHA.
 * - `"always"`: every purchase is validated with reCAPTCHA.
 * - `"vtexCriteria"`: only some purchases are validated with reCAPTCHA in order to minimize friction and improve shopping experience. VTEX's algorithm determines which sessions are trustworthy and which should be validated with reCAPTCHA. This is the recommended option.
 */
recaptchaValidation?: string
/**
 * Indicates whether authentication is required for completing purchases.
 */
requiresLoginToPlaceOrder?: boolean
/**
 * Minimum interval (in seconds) between successive purchases.
 */
minimumPurchaseDowntimeSeconds?: number
/**
 * Minimum cart existence period (in seconds) before allowing the use of a new credit card.
 */
cartAgeToUseNewCardSeconds?: number
}
}
/**
 * Determines settings that will apply to every orderForm in the account.
 * 
 * For example, if you create an app using this request, every orderForm of this account will have the custom fields created though it.
 * 
 * >ℹ️ Always retrieve the current configuration before performing an update to ensure that you are modifying only the properties you want. Otherwise, old values can be overwritten. To retrieve the current configuration, use the request [Get orderForm configuration](https://developers.vtex.com/docs/api-reference/checkout-api#get-/api/checkout/pvt/configuration/orderForm).
 */
"POST /api/checkout/pvt/configuration/orderForm": {
body: UpdateorderFormconfigurationRequest
}
/**
 * Retrieves a marketplace’s window to change seller, that is, the period when it is possible to choose another seller to fulfill a given order after the original seller has canceled it.
 * 
 * The default period for this window is of 2 days, but it can be configured by the request Update window to change seller.
 */
"GET /api/checkout/pvt/configuration/window-to-change-seller": {

}
/**
 * Updates a marketplace’s window to change seller, that is, the period when it is possible to choose another seller to fulfill a given order after the original seller has canceled it.
 * 
 * It is possible to check the current window using the request Get window to change seller.
 */
"POST /api/checkout/pvt/configuration/window-to-change-seller": {
body: WaitingTime
}
/**
 * This request removes all messages from the `messages` field of the orderForm , leaving it empty.
 * 
 * You must send an empty JSON in the body of the request.
 * 
 * The [orderForm](https://developers.vtex.com/docs/guides/orderform-fields) is the data structure which represents a shopping cart and contains all information pertaining to it. Hence, the `orderFormId` is the identification code of a given cart.
 * 
 * **Important**: **Request Body** must always be sent with empty value "{ }" in this endpoint.
 */
"POST /api/checkout/pub/orderForm/:orderFormId/messages/clear": {
/**
 * This object must be empty.
 */
body: {

}
response: {
/**
 * ID of the orderForm corresponding to a specific cart.
 */
orderFormId?: string
/**
 * Attribute created by the seller, in their VTEX store configuration.
 */
salesChannel?: string
/**
 * Indicates whether the user is logged into the store.
 */
loggedIn?: boolean
/**
 * Indicates whether order is checked in.
 */
isCheckedIn?: boolean
/**
 * ID of the store.
 */
storeId?: (null | string)
/**
 * Permission to modify item price manually.
 */
allowManualPrice?: boolean
/**
 * Data can be edited.
 */
canEditData?: boolean
/**
 * Unique ID associated with the customer profile.
 */
userProfileId?: string
/**
 * Profile provider.
 */
profileProvider?: string
/**
 * Available accounts.
 */
availableAccounts?: string[]
/**
 * Information on each available address.
 */
availableAddresses?: {
/**
 * Address type.
 */
addressType?: string
/**
 * Name of the receiver.
 */
receiverName?: string
/**
 * Address ID.
 */
addressId?: string
/**
 * Indicates whether address is disposable.
 */
isDisposable?: boolean
/**
 * City of the address.
 */
city?: string
/**
 * State of the address.
 */
state?: string
/**
 * Country of the address. ISO three-letter code.
 */
country?: string
/**
 * Street of the address.
 */
street?: string
/**
 * Number of the address.
 */
number?: string
/**
 * Neighborhood of the address.
 */
neighborhood?: string
/**
 * Complement to the address.
 */
complement?: (null | string)
/**
 * Reference that may help in the location of the address.
 */
reference?: (null | string)
/**
 * Array containing two floats with geocoordinates, first longitude, then latitude.
 */
geoCoordinates?: number[]
}[]
/**
 * User type.
 */
userType?: (null | string)
/**
 * Ignore customer profile data.
 */
ignoreProfileData?: boolean
/**
 * Total value of the order without separating cents. For example, $24.99 is represented `2499`.
 */
value?: number
/**
 * Array containing an object for each message generated by our servers while processing the request.
 */
messages?: any[]
/**
 * Information on each item in the order.
 */
items?: {
/**
 * Unique ID.
 */
uniqueId?: string
/**
 * ID of the item.
 */
id?: string
/**
 * Product ID.
 */
productId?: string
/**
 * Product Ref ID.
 */
productRefId?: string
/**
 * Ref ID.
 */
refId?: string
/**
 * European Article Number.
 */
ean?: (null | string)
/**
 * Product name.
 */
name?: string
/**
 * SKU name.
 */
skuName?: string
/**
 * Modal type.
 */
modalType?: (null | string)
/**
 * Parent item index.
 */
parentItemIndex?: (null | number)
/**
 * Parent assembly binding.
 */
parentAssemblyBinding?: (null | string)
/**
 * Price expiration date and time.
 */
priceValidUntil?: string
/**
 * Tax value in cents.
 */
tax?: number
/**
 * Price in cents.
 */
price?: number
/**
 * List price in cents.
 */
listPrice?: number
/**
 * Manual price in cents.
 */
manualPrice?: (null | number)
/**
 * User that applied the manual price, if that is the case.
 */
manualPriceAppliedBy?: (null | string)
/**
 * Selling price in cents. Note that this field may be subject to rounding discrepancies. We recommend retrieving data from the `priceDefinition` data structure instead.
 */
sellingPrice?: number
/**
 * Reward value in cents.
 */
rewardValue?: number
/**
 * Indicates whether item is a gift.
 */
isGift?: boolean
/**
 * Additional information.
 */
additionalInfo?: {
/**
 * Dimension.
 */
dimension?: (null | string)
/**
 * Brand name.
 */
brandName?: string
/**
 * Brand ID.
 */
brandId?: string
/**
 * Offering information.
 */
offeringInfo?: (null | string)
/**
 * Offering type.
 */
offeringType?: (null | string)
/**
 * Offering type ID.
 */
offeringTypeId?: (null | string)
}
/**
 * Presale date.
 */
preSaleDate?: (null | string)
/**
 * Product category IDs.
 */
productCategoryIds?: string
/**
 * Object, where each field is an ID from `productCategoryIds`.
 */
productCategories?: {
/**
 * Product category corresponding to the ID in the field key.
 */
"{ID}"?: string
}
/**
 * Quantity.
 */
quantity?: number
/**
 * Seller.
 */
seller?: string
/**
 * Sellers involved in the chain. The list should contain only one seller, unless it is a [Multilevel Omnichannel Inventory](https://help.vtex.com/en/tutorial/multilevel-omnichannel-inventory--7M1xyCZWUyCB7PcjNtOyw4) order.
 */
sellerChain?: string[]
/**
 * Image URL.
 */
imageUrl?: string
/**
 * Detail URL.
 */
detailUrl?: string
/**
 * Information on services sold along with the SKU. Example: a gift package.
 */
bundleItems?: {
/**
 * Service type.
 */
type?: string
/**
 * Service identifier.
 */
id?: number
/**
 * Service name.
 */
name?: string
/**
 * Service price in cents.
 */
price?: number
}[]
/**
 * Array containing information on attachments.
 */
attachments?: string[]
/**
 * Array of price tags, each of which, modifies the price in some way, like discounts or rates that apply to the item in the context of the order.
 */
priceTags?: {
/**
 * Price tag identifier.
 */
identifier?: string
/**
 * Indicates whether price tag value is applied through a percentage.
 */
isPercentual?: boolean
/**
 * Price tag name.
 */
name?: string
/**
 * Price tag raw value.
 */
rawValue?: number
/**
 * Price tag value.
 */
value?: number
}[]
/**
 * Availability.
 */
availability?: string
/**
 * Measurement unit.
 */
measurementUnit?: string
/**
 * Unit multiplier.
 */
unitMultiplier?: number
/**
 * Manufacturer code.
 */
manufacturerCode?: (null | string)
/**
 * Price information for all units of a specific item.
 */
priceDefinition?: {
/**
 * Item's calculated unitary selling price in cents.
 */
calculatedSellingPrice?: number
/**
 * Total value for all units of the item in cents.
 */
total?: number
/**
 * Array of objects, each containing value (in cents) and quantity for the different rounding instances that can be combined to form the correctly rounded total.
 */
sellingPrices?: {
/**
 * Value in cents for that specific rounding.
 */
value?: number
/**
 * Rounding quantity, meaning how many items are rounded to this value.
 */
quantity?: number
}[]
}
}[]
/**
 * Array containing the data of the item selected as a gift.
 */
selectableGifts?: any[]
/**
 * Array containing an object for each totalizer for the purchase. Totalizers contain the sum of values for a specific part of the order (e.g. Total item value, Total shipping value).
 */
totalizers?: any[]
/**
 * Shipping information pertinent to the order.
 */
shippingData?: {
/**
 * Address information.
 */
address?: {
/**
 * Type of address. For example, `Residential` or `Pickup`.
 */
addressType?: string
/**
 * Name of the person who is going to receive the order.
 */
receiverName?: string
/**
 * Address ID.
 */
addressId?: string
/**
 * Indicates whether address is disposable.
 */
isDisposable?: boolean
/**
 * Postal code.
 */
postalCode?: string
/**
 * City of the shipping address.
 */
city?: string
/**
 * State of the shipping address.
 */
state?: string
/**
 * Three letter ISO code of the country of the shipping address.
 */
country?: string
/**
 * Street of the shipping address.
 */
street?: string
/**
 * Number of the building, house or apartment in the shipping address.
 */
number?: string
/**
 * Neighborhood of the shipping address.
 */
neighborhood?: string
/**
 * Complement to the shipping address, in case it applies.
 */
complement?: (null | string)
/**
 * Complement that might help locate the shipping address more precisely in case of delivery.
 */
reference?: (null | string)
/**
 * Array containing two floats with geocoordinates, first longitude, then latitude.
 */
geoCoordinates?: number[]
}
/**
 * Array with logistics information. Each object in this array corresponds to an object in the `items` array, based on the respective `itemIndex`.
 */
logisticsInfo?: {
/**
 * Index corresponding to the position of the object in the `items` array.
 */
itemIndex?: number
/**
 * SLA selected by the customer.
 */
selectedSla?: string
/**
 * Delivery channel selected by the customer.
 */
selectedDeliveryChannel?: string
/**
 * Address ID.
 */
addressId?: string
/**
 * Information on available SLAs.
 */
slas?: {
/**
 * SLA ID.
 */
id?: string
/**
 * Delivery channel.
 */
deliveryChannel?: string
/**
 * SLA name.
 */
name?: string
/**
 * Information on each delivery ID.
 */
deliveryIds?: {
/**
 * Courier ID.
 */
courierId?: string
/**
 * Warehouse ID.
 */
warehouseId?: string
/**
 * Warehouse ID.
 */
dockId?: string
/**
 * Courier name.
 */
courierName?: string
/**
 * Quantity.
 */
quantity?: number
}[]
/**
 * Shipping estimate. For instance, Three business days will be represented `3bd`.
 */
shippingEstimate?: string
/**
 * Shipping estimate date.
 */
shippingEstimateDate?: (null | string)
/**
 * Estimate date of delivery.
 */
lockTTL?: string
/**
 * Price in cents.
 */
price?: number
/**
 * List price in cents.
 */
listPrice?: number
/**
 * Tax in cents.
 */
tax?: number
/**
 * Information on the pickup store.
 */
pickupStoreInfo?: {
/**
 * Indicates whether it is the pickup store.
 */
isPickupStore?: boolean
/**
 * Friendly name.
 */
friendlyName?: (null | string)
/**
 * Address information.
 */
address?: (null | {
/**
 * Type of address. For example, `Residential` or `Pickup`.
 */
addressType?: string
/**
 * Postal code.
 */
postalCode?: string
/**
 * City of the shipping address.
 */
city?: string
/**
 * State of the shipping address.
 */
state?: string
/**
 * Three letter ISO code of the country of the shipping address.
 */
country?: string
/**
 * Street of the shipping address.
 */
street?: string
/**
 * Number of the building, house or apartment in the shipping address.
 */
number?: string
/**
 * Neighborhood of the shipping address.
 */
neighborhood?: string
/**
 * Complement to the shipping address, in case it applies.
 */
complement?: (null | string)
/**
 * Complement that might help locate the shipping address more precisely in case of delivery.
 */
reference?: (null | string)
/**
 * Array containing two floats with geocoordinates, first longitude, then latitude.
 */
geoCoordinates?: number[]
})
/**
 * Additional information.
 */
additionalInfo?: (null | string)
/**
 * Corresponding dock ID.
 */
dockId?: (null | string)
}
/**
 * Pickup point ID.
 */
pickupPointId?: (null | string)
/**
 * Pickup point distance.
 */
pickupDistance?: number
/**
 * Polygon name.
 */
polygonName?: (null | string)
/**
 * Transit time. For instance, "three business days" is represented `3bd`.
 */
transitTime?: string
}[]
/**
 * List of countries that the item may be shipped to.
 */
shipsTo?: string[]
/**
 * Item ID.
 */
itemId?: string
/**
 * List of available delivery channels.
 */
deliveryChannels?: {
/**
 * Delivery channel ID.
 */
id?: string
}[]
}[]
/**
 * Array with information on the selected addresses for the order.
 */
selectedAddresses?: {
/**
 * Type of address. For example, `Residential` or `Pickup`.
 */
addressType?: string
/**
 * Name of the person who is going to receive the order.
 */
receiverName?: string
/**
 * Address ID.
 */
addressId?: string
/**
 * Indicates whether address is disposable.
 */
isDisposable?: boolean
/**
 * Postal code.
 */
postalCode?: string
/**
 * City of the shipping address.
 */
city?: string
/**
 * State of the shipping address.
 */
state?: string
/**
 * Three letter ISO code of the country of the shipping address.
 */
country?: string
/**
 * Street of the shipping address.
 */
street?: string
/**
 * Number of the building, house or apartment in the shipping address.
 */
number?: string
/**
 * Neighborhood of the shipping address.
 */
neighborhood?: string
/**
 * Complement to the shipping address, in case it applies.
 */
complement?: string
/**
 * Complement that might help locate the shipping address more precisely in case of delivery.
 */
reference?: (null | string)
/**
 * Array containing two floats with geocoordinates, first longitude, then latitude.
 */
geoCoordinates?: number[]
}[]
/**
 * Array with information on the available addresses for the order.
 */
availableAddresses?: {
/**
 * Type of address. For example, `Residential` or `Pickup`.
 */
addressType?: string
/**
 * Name of the person who is going to receive the order.
 */
receiverName?: string
/**
 * Address ID.
 */
addressId?: string
/**
 * Indicates whether address is disposable.
 */
isDisposable?: boolean
/**
 * Postal code.
 */
postalCode?: string
/**
 * City of the shipping address.
 */
city?: string
/**
 * State of the shipping address.
 */
state?: string
/**
 * Three letter ISO code of the country of the shipping address.
 */
country?: string
/**
 * Street of the shipping address.
 */
street?: string
/**
 * Number of the building, house or apartment in the shipping address.
 */
number?: string
/**
 * Neighborhood of the shipping address.
 */
neighborhood?: string
/**
 * Complement to the shipping address, in case it applies.
 */
complement?: string
/**
 * Complement that might help locate the shipping address more precisely in case of delivery.
 */
reference?: (null | string)
/**
 * Array containing two floats with geocoordinates, first longitude, then latitude.
 */
geoCoordinates?: number[]
}[]
}
/**
 * Customer's profile information.
 */
clientProfileData?: {
/**
 * Email address.
 */
email?: string
/**
 * First name.
 */
firstName?: string
/**
 * Last name.
 */
lastName?: string
/**
 * Type of the document informed by the customer.
 */
documentType?: string
/**
 * Document informed by the customer.
 */
document?: string
/**
 * Phone number.
 */
phone?: string
/**
 * Company name, if the customer is a legal entity.
 */
corporateName?: (null | string)
/**
 * Trade name, if the customer is a legal entity.
 */
tradeName?: (null | string)
/**
 * Corporate document, if the customer is a legal entity.
 */
corporateDocument?: (null | string)
/**
 * State inscription, if the customer is a legal entity.
 */
stateInscription?: (null | string)
/**
 * Corporate phone number, if the customer is a legal entity.
 */
corporatePhone?: (null | string)
/**
 * Indicates whether the customer is a legal entity.
 */
isCorporate?: boolean
/**
 * Indicates whether profile is complete on loading.
 */
profileCompleteOnLoading?: boolean
/**
 * Indicates whether profile presents error on loading.
 */
profileErrorOnLoading?: (null | boolean)
/**
 * Customer class.
 */
customerClass?: (null | string)
}
/**
 * Information on the order's payment.
 */
paymentData?: {
/**
 * Gift card information, if it applies to the order.
 */
giftCards?: {
/**
 * Gift card redemption code.
 */
redemptionCode?: string
/**
 * Gift card value in cents.
 */
value?: number
/**
 * Gift card balance in cents.
 */
balance?: number
/**
 * Gift card name.
 */
name?: string
/**
 * Gift card ID.
 */
id?: string
/**
 * Indicates whether gift card is in use.
 */
inUse?: boolean
/**
 * Indicates whether gift card is special.
 */
isSpecialCard?: boolean
}[]
/**
 * Information on each transaction pertinent to the order.
 */
transactions?: {
/**
 * Indicates whether transaction is active.
 */
isActive?: boolean
/**
 * Transaction ID.
 */
transactionId?: string
/**
 * Merchant name.
 */
merchantName?: string
/**
 * Information on each payment.
 */
payments?: {
/**
 * Account ID.
 */
accountId?: string
/**
 * Bin.
 */
bin?: string
/**
 * Number of installments.
 */
installments?: number
/**
 * Payment system.
 */
paymentSystem?: string
/**
 * Reference value for calculating interest rates, in case it applies. Displayed in cents.
 */
referenceValue?: number
/**
 * Value including interest, in case it applies. Displayed in cents.
 */
value?: number
}[]
/**
 * Indicates whather transaction is shared.
 */
sharedTransaction?: boolean
}[]
}
/**
 * Object containing promotion data such as coupon tracking information and internal or external UTMs.
 */
marketingData?: {
/**
 * Sending an existing coupon code in this field will return the corresponding discount in the purchase. Use the [cart simulation](https://developers.vtex.com/vtex-rest-api/reference/orderform#orderformsimulation) request to check which coupons might apply before placing the order.
 */
coupon?: string
/**
 * UTM source.
 */
utmSource?: string
/**
 * UTM medium.
 */
utmMedium?: string
/**
 * UTM campaign
 */
utmCampaign?: string
/**
 * utmi_page (internal utm)
 */
utmiPage?: (null | string)
/**
 * utmi_part (internal utm).
 */
utmiPart?: (null | string)
/**
 * utmi_campaign (internal utm).
 */
utmiCampaign?: (null | string)
}
/**
 * Information on each seller.
 */
sellers?: {
/**
 * Seller ID.
 */
id?: string
/**
 * Seller name.
 */
name?: string
/**
 * Seller logo.
 */
logo?: (null | string)
}[]
/**
 * Object containing preferences from the client who placed the order.
 */
clientPreferencesData?: {
/**
 * Client's locale. Examples: `pt-BR` and `en-US`.
 */
locale?: string
/**
 * `true` if the client opted to receive newsletter from the store.
 */
optinNewsLetter?: boolean
}
/**
 * Object containing commercial condition information.
 */
commercialConditionData?: (null | {

})
/**
 * Object containing data from the store's configuration (stored in VTEX's License Manager).
 */
storePreferencesData?: {

}
/**
 * Gift registry list information.
 */
giftRegistryData?: (null | {

})
/**
 * Optional field meant to hold additional information about the order. We recommend using this field for text, not data formats such as `JSON` even if escaped. For that purpose, see [Creating customizable fields](https://developers.vtex.com/vtex-rest-api/docs/creating-customizable-fields-in-the-cart-with-checkout-api-1).
 */
openTextField?: (null | string)
/**
 * Object containing information pertinent to the order's invoice.
 */
invoiceData?: (null | {

})
/**
 * Customer additional information.
 */
customData?: (null | {

})
/**
 * Item metadata.
 */
itemMetadata?: {
/**
 * List of objects containing metadata on each item in the order.
 */
items?: {
/**
 * Item ID.
 */
id?: string
/**
 * Seller.
 */
seller?: string
/**
 * Product name.
 */
name?: string
/**
 * SKU name.
 */
skuName?: string
/**
 * Product ID.
 */
productId?: string
/**
 * Ref ID.
 */
refId?: string
/**
 * European Article Number.
 */
ean?: (null | string)
/**
 * Image URL.
 */
imageUrl?: string
/**
 * Detail URL.
 */
detailUrl?: string
}[]
}
/**
 * Hooks information.
 */
hooksData?: (null | {

})
/**
 * Information on rates and benefits that apply to the order.
 */
ratesAndBenefitsData?: {
/**
 * List with rates and benefits identifiers.
 */
rateAndBenefitsIdentifiers?: string[]
/**
 * List with rates and benefits teasers.
 */
teaser?: string[]
}
/**
 * Subscription information.
 */
subscriptionData?: (null | {

})
/**
 * Object containing information about the ordering of items within the orderForm.
 */
itemsOrdination?: {
/**
 * Criteria adopted to order the items in the list.
 */
criteria?: string
/**
 * Indicates whether the ordering is ascending.
 */
ascending?: boolean
}
}
}
/**
 * Retrieves possible amount of installments and respective values for a given cart with a given payment method.
 * 
 * The [orderForm](https://developers.vtex.com/docs/guides/orderform-fields) is the data structure which represents a shopping cart and contains all information pertaining to it. Hence, the `orderFormId` is the identification code of a given cart.
 * 
 * This endpoint can be used to get the installment options for only one payment method at a time.
 * 
 * This endpoint should be called only after the selected `orderForm` already has a `paymentData`.
 */
"GET /api/checkout/pub/orderForm/:orderFormId/installments": {
searchParams: {
/**
 * ID of the payment method to be consulted for installments.
 */
paymentSystem: number
}
}
/**
 * Use this request to add coupons to a given shopping cart.
 * 
 * To add multiple coupons to the same cart, you need to:
 * 
 * 1. Request the activation of this feature through the [Support VTEX](https://help.vtex.com/support) if this is the first time you perform this action on your store.
 * 2. Submit all coupon codes in the same requisition separated by commas. E.g.: {"text": "freeshipping, discount10, holiday30"}.
 * 
 * For more information on multiple coupons, access the [coupons tutorial](https://help.vtex.com/en/tutorial/creating-a-coupon-beta--7lMk3MmhNp2IEccyGApxU).
 */
"POST /api/checkout/pub/orderForm/:orderFormId/coupons": {
body: {
/**
 * Sending an existing coupon code in this field will return the corresponding discount in the purchase.
 */
text?: string
}
response: {
/**
 * ID of the orderForm corresponding to a specific cart.
 */
orderFormId?: string
/**
 * Attribute created by the seller, in their VTEX store configuration.
 */
salesChannel?: string
/**
 * Indicates whether the user is logged into the store.
 */
loggedIn?: boolean
/**
 * Indicates whether order is checked in.
 */
isCheckedIn?: boolean
/**
 * ID of the store.
 */
storeId?: (null | string)
/**
 * Permission to modify item price manually.
 */
allowManualPrice?: boolean
/**
 * Data can be edited.
 */
canEditData?: boolean
/**
 * Unique ID associated with the customer profile.
 */
userProfileId?: string
/**
 * Profile provider.
 */
profileProvider?: string
/**
 * Available accounts.
 */
availableAccounts?: string[]
/**
 * Information on each available address.
 */
availableAddresses?: {
/**
 * Address type.
 */
addressType?: string
/**
 * Name of the receiver.
 */
receiverName?: string
/**
 * Address ID.
 */
addressId?: string
/**
 * Indicates whether address is disposable.
 */
isDisposable?: boolean
/**
 * City of the address.
 */
city?: string
/**
 * State of the address.
 */
state?: string
/**
 * Country of the address. ISO three-letter code.
 */
country?: string
/**
 * Street of the address.
 */
street?: string
/**
 * Number of the address.
 */
number?: string
/**
 * Neighborhood of the address.
 */
neighborhood?: string
/**
 * Complement to the address.
 */
complement?: (null | string)
/**
 * Reference that may help in the location of the address.
 */
reference?: (null | string)
/**
 * Array containing two floats with geocoordinates, first longitude, then latitude.
 */
geoCoordinates?: number[]
}[]
/**
 * User type.
 */
userType?: (null | string)
/**
 * Ignore customer profile data.
 */
ignoreProfileData?: boolean
/**
 * Total value of the order without separating cents. For example, $24.99 is represented `2499`.
 */
value?: number
/**
 * Array containing an object for each message generated by our servers while processing the request.
 */
messages?: any[]
/**
 * Information on each item in the order.
 */
items?: {
/**
 * Unique ID.
 */
uniqueId?: string
/**
 * ID of the item.
 */
id?: string
/**
 * Product ID.
 */
productId?: string
/**
 * Product Ref ID.
 */
productRefId?: string
/**
 * Ref ID.
 */
refId?: string
/**
 * European Article Number.
 */
ean?: (null | string)
/**
 * Product name.
 */
name?: string
/**
 * SKU name.
 */
skuName?: string
/**
 * Modal type.
 */
modalType?: (null | string)
/**
 * Parent item index.
 */
parentItemIndex?: (null | number)
/**
 * Parent assembly binding.
 */
parentAssemblyBinding?: (null | string)
/**
 * Price expiration date and time.
 */
priceValidUntil?: string
/**
 * Tax value in cents.
 */
tax?: number
/**
 * Price in cents.
 */
price?: number
/**
 * List price in cents.
 */
listPrice?: number
/**
 * Manual price in cents.
 */
manualPrice?: (null | number)
/**
 * User that applied the manual price, if that is the case.
 */
manualPriceAppliedBy?: (null | string)
/**
 * Selling price in cents. Note that this field may be subject to rounding discrepancies. We recommend retrieving data from the `priceDefinition` data structure instead.
 */
sellingPrice?: number
/**
 * Reward value in cents.
 */
rewardValue?: number
/**
 * Indicates whether item is a gift.
 */
isGift?: boolean
/**
 * Additional information.
 */
additionalInfo?: {
/**
 * Dimension.
 */
dimension?: (null | string)
/**
 * Brand name.
 */
brandName?: string
/**
 * Brand ID.
 */
brandId?: string
/**
 * Offering information.
 */
offeringInfo?: (null | string)
/**
 * Offering type.
 */
offeringType?: (null | string)
/**
 * Offering type ID.
 */
offeringTypeId?: (null | string)
}
/**
 * Presale date.
 */
preSaleDate?: (null | string)
/**
 * Product category IDs.
 */
productCategoryIds?: string
/**
 * Object, where each field is an ID from `productCategoryIds`.
 */
productCategories?: {
/**
 * Product category corresponding to the ID in the field key.
 */
"{ID}"?: string
}
/**
 * Quantity.
 */
quantity?: number
/**
 * Seller.
 */
seller?: string
/**
 * Sellers involved in the chain. The list should contain only one seller, unless it is a [Multilevel Omnichannel Inventory](https://help.vtex.com/en/tutorial/multilevel-omnichannel-inventory--7M1xyCZWUyCB7PcjNtOyw4) order.
 */
sellerChain?: string[]
/**
 * Image URL.
 */
imageUrl?: string
/**
 * Detail URL.
 */
detailUrl?: string
/**
 * Information on services sold along with the SKU. Example: a gift package.
 */
bundleItems?: {
/**
 * Service type.
 */
type?: string
/**
 * Service identifier.
 */
id?: number
/**
 * Service name.
 */
name?: string
/**
 * Service price in cents.
 */
price?: number
}[]
/**
 * Array containing information on attachments.
 */
attachments?: string[]
/**
 * Array of price tags, each of which, modifies the price in some way, like discounts or rates that apply to the item in the context of the order.
 */
priceTags?: {
/**
 * Price tag identifier.
 */
identifier?: string
/**
 * Indicates whether price tag value is applied through a percentage.
 */
isPercentual?: boolean
/**
 * Price tag name.
 */
name?: string
/**
 * Price tag raw value.
 */
rawValue?: number
/**
 * Price tag value.
 */
value?: number
}[]
/**
 * Availability
 */
availability?: string
/**
 * Measurement unit
 */
measurementUnit?: string
/**
 * Unit multiplier
 */
unitMultiplier?: number
/**
 * Manufacturer code.
 */
manufacturerCode?: (null | string)
/**
 * Price information for all units of a specific item.
 */
priceDefinition?: {
/**
 * Item's calculated unitary selling price in cents.
 */
calculatedSellingPrice?: number
/**
 * Total value for all units of the item in cents.
 */
total?: number
/**
 * Array of objects, each containing value (in cents) and quantity for the different rounding instances that can be combined to form the correctly rounded total.
 */
sellingPrices?: {
/**
 * Value in cents for that specific rounding.
 */
value?: number
/**
 * Rounding quantity, meaning how many items are rounded to this value.
 */
quantity?: number
}[]
}
}[]
/**
 * Array containing the data of the item selected as a gift.
 */
selectableGifts?: any[]
/**
 * Array containing an object for each totalizer for the purchase. Totalizers contain the sum of values for a specific part of the order (e.g. Total item value, Total shipping value).
 */
totalizers?: any[]
/**
 * Shipping information pertinent to the order.
 */
shippingData?: {
/**
 * Address information.
 */
address?: {
/**
 * Type of address. For example, `Residential` or `Pickup`.
 */
addressType?: string
/**
 * Name of the person who is going to receive the order.
 */
receiverName?: string
/**
 * Address ID.
 */
addressId?: string
/**
 * Indicates whether address is disposable.
 */
isDisposable?: boolean
/**
 * Postal code.
 */
postalCode?: string
/**
 * City of the shipping address.
 */
city?: string
/**
 * State of the shipping address.
 */
state?: string
/**
 * Three letter ISO code of the country of the shipping address.
 */
country?: string
/**
 * Street of the shipping address.
 */
street?: string
/**
 * Number of the building, house or apartment in the shipping address.
 */
number?: string
/**
 * Neighborhood of the shipping address.
 */
neighborhood?: string
/**
 * Complement to the shipping address, in case it applies.
 */
complement?: (null | string)
/**
 * Complement that might help locate the shipping address more precisely in case of delivery.
 */
reference?: (null | string)
/**
 * Array containing two floats with geocoordinates, first longitude, then latitude.
 */
geoCoordinates?: number[]
}
/**
 * Array with logistics information. Each object in this array corresponds to an object in the `items` array, based on the respective `itemIndex`.
 */
logisticsInfo?: {
/**
 * Index corresponding to the position of the object in the `items` array.
 */
itemIndex?: number
/**
 * SLA selected by the customer.
 */
selectedSla?: string
/**
 * Delivery channel selected by the customer.
 */
selectedDeliveryChannel?: string
/**
 * Address ID.
 */
addressId?: string
/**
 * Information on available SLAs.
 */
slas?: {
/**
 * SLA ID.
 */
id?: string
/**
 * Delivery channel.
 */
deliveryChannel?: string
/**
 * SLA name.
 */
name?: string
/**
 * Information on each delivery ID.
 */
deliveryIds?: {
/**
 * Courier ID.
 */
courierId?: string
/**
 * Warehouse ID.
 */
warehouseId?: string
/**
 * Warehouse ID.
 */
dockId?: string
/**
 * Courier name.
 */
courierName?: string
/**
 * Quantity.
 */
quantity?: number
}[]
/**
 * Shipping estimate. For instance, Three business days will be represented `3bd`.
 */
shippingEstimate?: string
/**
 * Shipping estimate date.
 */
shippingEstimateDate?: (null | string)
/**
 * Estimate date of delivery.
 */
lockTTL?: string
/**
 * Price in cents.
 */
price?: number
/**
 * List price in cents.
 */
listPrice?: number
/**
 * Tax in cents.
 */
tax?: number
/**
 * Information on the pickup store.
 */
pickupStoreInfo?: {
/**
 * Indicates whether it is the pickup store.
 */
isPickupStore?: boolean
/**
 * Friendly name.
 */
friendlyName?: (null | string)
/**
 * Address information.
 */
address?: (null | {
/**
 * Type of address. For example, `Residential` or `Pickup`.
 */
addressType?: string
/**
 * Postal code.
 */
postalCode?: string
/**
 * City of the shipping address.
 */
city?: string
/**
 * State of the shipping address.
 */
state?: string
/**
 * Three letter ISO code of the country of the shipping address.
 */
country?: string
/**
 * Street of the shipping address.
 */
street?: string
/**
 * Number of the building, house or apartment in the shipping address.
 */
number?: string
/**
 * Neighborhood of the shipping address.
 */
neighborhood?: string
/**
 * Complement to the shipping address, in case it applies.
 */
complement?: (null | string)
/**
 * Complement that might help locate the shipping address more precisely in case of delivery.
 */
reference?: (null | string)
/**
 * Array containing two floats with geocoordinates, first longitude, then latitude.
 */
geoCoordinates?: number[]
})
/**
 * Additional information.
 */
additionalInfo?: (null | string)
/**
 * Corresponding dock ID.
 */
dockId?: (null | string)
}
/**
 * Pickup point ID.
 */
pickupPointId?: (null | string)
/**
 * Pickup point distance.
 */
pickupDistance?: number
/**
 * Polygon name.
 */
polygonName?: (null | string)
/**
 * Transit time. For instance, "three business days" is represented `3bd`.
 */
transitTime?: string
}[]
/**
 * List of countries that the item may be shipped to.
 */
shipsTo?: string[]
/**
 * Item ID.
 */
itemId?: string
/**
 * List of available delivery channels.
 */
deliveryChannels?: {
/**
 * Delivery channel ID.
 */
id?: string
}[]
}[]
/**
 * Array with information on the selected addresses for the order.
 */
selectedAddresses?: {
/**
 * Type of address. For example, `Residential` or `Pickup`.
 */
addressType?: string
/**
 * Name of the person who is going to receive the order.
 */
receiverName?: string
/**
 * Address ID.
 */
addressId?: string
/**
 * Indicates whether address is disposable.
 */
isDisposable?: boolean
/**
 * Postal code.
 */
postalCode?: string
/**
 * City of the shipping address.
 */
city?: string
/**
 * State of the shipping address.
 */
state?: string
/**
 * Three letter ISO code of the country of the shipping address.
 */
country?: string
/**
 * Street of the shipping address.
 */
street?: string
/**
 * Number of the building, house or apartment in the shipping address.
 */
number?: string
/**
 * Neighborhood of the shipping address.
 */
neighborhood?: string
/**
 * Complement to the shipping address, in case it applies.
 */
complement?: string
/**
 * Complement that might help locate the shipping address more precisely in case of delivery.
 */
reference?: (null | string)
/**
 * Array containing two floats with geocoordinates, first longitude, then latitude.
 */
geoCoordinates?: number[]
}[]
/**
 * Array with information on the available addresses for the order.
 */
availableAddresses?: {
/**
 * Type of address. For example, `Residential` or `Pickup`.
 */
addressType?: string
/**
 * Name of the person who is going to receive the order.
 */
receiverName?: string
/**
 * Address ID.
 */
addressId?: string
/**
 * Indicates whether address is disposable.
 */
isDisposable?: boolean
/**
 * Postal code.
 */
postalCode?: string
/**
 * City of the shipping address.
 */
city?: string
/**
 * State of the shipping address.
 */
state?: string
/**
 * Three letter ISO code of the country of the shipping address.
 */
country?: string
/**
 * Street of the shipping address.
 */
street?: string
/**
 * Number of the building, house or apartment in the shipping address.
 */
number?: string
/**
 * Neighborhood of the shipping address.
 */
neighborhood?: string
/**
 * Complement to the shipping address, in case it applies.
 */
complement?: string
/**
 * Complement that might help locate the shipping address more precisely in case of delivery.
 */
reference?: (null | string)
/**
 * Array containing two floats with geocoordinates, first longitude, then latitude.
 */
geoCoordinates?: number[]
}[]
}
/**
 * Customer's profile information.
 */
clientProfileData?: {
/**
 * Email address.
 */
email?: string
/**
 * First name.
 */
firstName?: string
/**
 * Last name.
 */
lastName?: string
/**
 * Type of the document informed by the customer.
 */
documentType?: string
/**
 * Document informed by the customer.
 */
document?: string
/**
 * Phone number.
 */
phone?: string
/**
 * Company name, if the customer is a legal entity.
 */
corporateName?: (null | string)
/**
 * Trade name, if the customer is a legal entity.
 */
tradeName?: (null | string)
/**
 * Corporate document, if the customer is a legal entity.
 */
corporateDocument?: (null | string)
/**
 * State inscription, if the customer is a legal entity.
 */
stateInscription?: (null | string)
/**
 * Corporate phone number, if the customer is a legal entity.
 */
corporatePhone?: (null | string)
/**
 * Indicates whether the customer is a legal entity.
 */
isCorporate?: boolean
/**
 * Indicates whether profile is complete on loading.
 */
profileCompleteOnLoading?: boolean
/**
 * Indicates whether profile presents error on loading.
 */
profileErrorOnLoading?: (null | boolean)
/**
 * Customer class.
 */
customerClass?: (null | string)
}
/**
 * Information on the order's payment.
 */
paymentData?: {
/**
 * Gift card information, if it applies to the order.
 */
giftCards?: {
/**
 * Gift card redemption code.
 */
redemptionCode?: string
/**
 * Gift card value in cents.
 */
value?: number
/**
 * Gift card balance in cents.
 */
balance?: number
/**
 * Gift card name.
 */
name?: string
/**
 * Gift card ID.
 */
id?: string
/**
 * Indicates whether gift card is in use.
 */
inUse?: boolean
/**
 * Indicates whether gift card is special.
 */
isSpecialCard?: boolean
}[]
/**
 * Information on each transaction pertinent to the order.
 */
transactions?: {
/**
 * Indicates whether transaction is active.
 */
isActive?: boolean
/**
 * Transaction ID.
 */
transactionId?: string
/**
 * Merchant name.
 */
merchantName?: string
/**
 * Information on each payment.
 */
payments?: {
/**
 * Account ID.
 */
accountId?: string
/**
 * Bin.
 */
bin?: string
/**
 * Number of installments.
 */
installments?: number
/**
 * Payment system.
 */
paymentSystem?: string
/**
 * Reference value for calculating interest rates, in case it applies. Displayed in cents.
 */
referenceValue?: number
/**
 * Value including interest, in case it applies. Displayed in cents.
 */
value?: number
}[]
/**
 * Indicates whather transaction is shared.
 */
sharedTransaction?: boolean
}[]
}
/**
 * Object containIng promotion data such as coupon tracking information and internal or external UTMs.
 */
marketingData?: {
/**
 * Sending an existing coupon code in this field will return the corresponding discount in the purchase. Use the [cart simulation](https://developers.vtex.com/vtex-rest-api/reference/orderform#orderformsimulation) request to check which coupons might apply before placing the order.
 */
coupon?: string
/**
 * UTM source.
 */
utmSource?: (null | string)
/**
 * UTM medium.
 */
utmMedium?: (null | string)
/**
 * UTM campaign.
 */
utmCampaign?: (null | string)
/**
 * utmi_page (internal utm).
 */
utmiPage?: (null | string)
/**
 * utmi_part (internal utm).
 */
utmiPart?: (null | string)
/**
 * utmi_campaign (internal utm).
 */
utmiCampaign?: (null | string)
}
/**
 * Information on each seller.
 */
sellers?: {
/**
 * Seller ID.
 */
id?: string
/**
 * Seller name.
 */
name?: string
/**
 * Seller logo.
 */
logo?: (null | string)
}[]
/**
 * Object containing preferences from the client who placed the order.
 */
clientPreferencesData?: {
/**
 * Client's locale. Examples: `pt-BR` and `en-US`.
 */
locale?: string
/**
 * `true` if the client opted to receive newsletter from the store.
 */
optinNewsLetter?: boolean
}
/**
 * Object containing commercial condition information.
 */
commercialConditionData?: (null | {

})
/**
 * Object containing data from the store's configuration (stored in VTEX's License Manager).
 */
storePreferencesData?: {

}
/**
 * Gift registry list information.
 */
giftRegistryData?: (null | {

})
/**
 * Optional field meant to hold additional information about the order. We recommend using this field for text, not data formats such as `JSON` even if escaped. For that purpose, see [Creating customizable fields](https://developers.vtex.com/vtex-rest-api/docs/creating-customizable-fields-in-the-cart-with-checkout-api-1)
 */
openTextField?: (null | string)
/**
 * Object containing information pertinent to the order's invoice.
 */
invoiceData?: (null | {

})
/**
 * Customer additional information.
 */
customData?: (null | {

})
/**
 * Item metadata.
 */
itemMetadata?: {
/**
 * List of objects containing metadata on each item in the order.
 */
items?: {
/**
 * Item ID.
 */
id?: string
/**
 * Seller.
 */
seller?: string
/**
 * Product name.
 */
name?: string
/**
 * SKU name.
 */
skuName?: string
/**
 * Product ID.
 */
productId?: string
/**
 * Ref ID.
 */
refId?: string
/**
 * European Article Number.
 */
ean?: (null | string)
/**
 * Image URL.
 */
imageUrl?: string
/**
 * Detail URL.
 */
detailUrl?: string
}[]
}
/**
 * Hooks information.
 */
hooksData?: (null | {

})
/**
 * Information on rates and benefits that apply to the order.
 */
ratesAndBenefitsData?: {
/**
 * List with rates and benefits identifiers.
 */
rateAndBenefitsIdentifiers?: string[]
/**
 * List with rates and benefits teasers.
 */
teaser?: string[]
}
/**
 * Subscription information.
 */
subscriptionData?: (null | {

})
/**
 * Object containing information about the ordering of items within the orderForm.
 */
itemsOrdination?: {
/**
 * Criteria adopted to order the items in the list.
 */
criteria?: string
/**
 * Indicates whether the ordering is ascending.
 */
ascending?: boolean
}
}
}
/**
 * Retrieves information on pickup points close to a given location determined by geocoordinates or postal code.
 * 
 * The pickup points returned are not necessarily all active ones. Make sure to validate the information consumed by integrations.
 */
"GET /api/checkout/pub/pickup-points": {
searchParams: {
/**
 * Geocoordinates (first longitude, then latitude) around which to search for pickup points. If you use this type of search, do not pass postal and country codes.
 */
geoCoordinates?: number[]
/**
 * Postal code around which to search for pickup points. If you use this type of search, make sure to pass a `countryCode` and do not pass `geoCoordinates`.
 */
postalCode?: string
/**
 * Three letter country code refering to the `postalCode` field. Pass the country code only if you are searching pickup points by postal code.
 */
countryCode?: string
}
}
/**
 * Retrieves address information for a given postal code and country.
 * 
 * This request can be used to implement auto complete functionality when a customer needs to fill in an address.
 */
"GET /api/checkout/pub/postal-code/:countryCode/:postalCode": {

}
/**
 * This endpoint places an order from an existing `orderForm` object, meaning an existing cart.
 * 
 * After the creation of an order with this request, you have five minutes to send payment information and then request payment processing.
 */
"POST /api/checkout/pub/orderForm/:orderFormId/transaction": {
body: {
referenceId: ReferenceId
savePersonalData?: SavePersonalData
optinNewsLetter?: OptinNewsLetter
/**
 * Total value of the order without separating cents. For example, $24.99 is represented `2499`.
 */
value: number
/**
 * Reference value of the order for calculating interest if that is the case. Can be equal to the total value and does not separate cents. For example, $24.99 is represented `2499`.
 */
referenceValue: number
/**
 * Interest rate to be used in case it applies.
 */
interestValue: number
}
response: {

}
}
/**
 * Places order without having any prior cart information. This means all information on items, client, payment and shipping must be sent in the body.
 * 
 * >⚠️ The authentication of this endpoint is required if you are creating an order with an item that has an attachment that creates a Subscription. For more information, access [Subscriptions API](https://developers.vtex.com/docs/api-reference/subscriptions-api-v3).
 */
"PUT /api/checkout/pub/orders": {
searchParams: {
/**
 * Trade Policy (Sales Channel) identification. This query can be used to create an order for a specific sales channel.
 */
sc?: number
}
body: {
/**
 * Array of objects containing information on each of the order's items.
 */
items: {
/**
 * The SKU ID.
 */
id: string
/**
 * The quantity of items of this specific SKU in the cart to be simulated.
 */
quantity: number
/**
 * The ID of the seller responsible for this SKU. This ID can be found in your VTEX Admin.
 */
seller: string
/**
 * Comission.
 */
commission?: number
/**
 * Freight comission
 */
freightCommission?: number
/**
 * Item price within the context of the order without separating cents. For example, $24.99 is represented `2499`.
 */
price?: number
/**
 * Information on services sold along with the SKU. Example: a gift package.
 */
bundleItems?: {
/**
 * Service type.
 */
type?: string
/**
 * Service identifier.
 */
id?: string
/**
 * Service name.
 */
name?: string
/**
 * Service price. The last two digits are the cents.
 */
price?: number
}[]
/**
 * Item attachment.
 */
itemAttachment?: {
/**
 * Attachment name.
 */
name?: string
/**
 * Content referring to the customization requested by the customer.
 */
content?: string
}
/**
 * Array containing information on attachments.
 */
attachments?: string[]
/**
 * Array of price tags, each of which, modifies the price in some way, like discounts or rates that apply to the item in the context of the order.
 */
priceTags?: {
/**
 * Price tag identifier.
 */
identifier?: string
/**
 * `true` if price tag value is applied through a percentage.
 */
isPercentual?: boolean
/**
 * Price tag name.
 */
name?: string
/**
 * Price tag raw value.
 */
rawValue?: number
/**
 * Price tag value.
 */
value?: number
}[]
/**
 * SKU measurement unit.
 */
measurementUnit?: string
/**
 * SKU unit multiplier.
 */
unitMultiplier?: number
/**
 * Indicates whether the order is a gift.
 */
isGift?: boolean
}[]
/**
 * Customer's profile information. The `email` functions as a customer's ID.
 * 
 * For customers already in your database, sending only the email address is enough to register the order to the shopper’s existing account.
 * 
 * > If the shopper exists in you database but is not logged in, sending other profile information along with the email will cause the platform to fail placing the order. This happens because this action is interpreted as an attempt to edit profile data, which is not possible unless the customer is logged in to the store.
 */
clientProfileData: {
/**
 * Customer's email address.
 */
email: string
/**
 * Customer's first name.
 */
firstName?: string
/**
 * Customer's last name.
 */
lastName?: string
/**
 * Type of the document informed by the customer.
 */
documentType?: string
/**
 * Document number informed by the customer.
 */
document?: string
/**
 * Customer's phone number.
 */
phone?: string
/**
 * Company name, if the customer is a legal entity.
 */
corporateName?: string
/**
 * Trade name, if the customer is a legal entity.
 */
tradeName?: string
/**
 * Corporate document, if the customer is a legal entity.
 */
corporateDocument?: string
/**
 * State inscription, if the customer is a legal entity.
 */
stateInscription?: string
/**
 * Corporate phone number, if the customer is a legal entity.
 */
corporatePhone?: string
/**
 * `true` if the customer is a legal entity.
 */
isCorporate?: boolean
}
/**
 * Shipping information.
 */
shippingData: {
/**
 * Shipping address.
 * 
 * For customers already in your data base, it is enough to send this object only with an `addressId`, which you may obtain from a [Cart simulation request](https://developers.vtex.com/vtex-rest-api/reference/shopping-cart#cartsimulation), for example.
 */
address?: {
/**
 * Type of address. For example, `Residential` or `Pickup`, among others.
 */
addressType?: string
/**
 * Name of the person who is going to receive the order.
 */
receiverName?: string
/**
 * Address ID.
 */
addressId?: string
/**
 * Postal Code.
 */
postalCode?: string
/**
 * City of the shipping address.
 */
city?: string
/**
 * State of the shipping address.
 */
state?: string
/**
 * Three letter ISO code of the country of the shipping address.
 */
country?: string
/**
 * Street of the shipping address.
 */
street?: string
/**
 * Number of the building, house or apartment in the shipping address.
 */
number?: string
/**
 * Neighborhood of the shipping address.
 */
neighborhood?: string
/**
 * Complement to the shipping address in case it applies.
 */
complement?: string
/**
 * Complement that might help locate the shipping address more precisely in case of delivery.
 */
reference?: string
/**
 * Array containing two floats with geocoordinates, first longitude, then latitude.
 */
geoCoordinates?: number[]
}
/**
 * Array of objects containing logistics information of each item.
 */
logisticsInfo?: {
/**
 * Index of the item in the `items` array, starting from 0.
 */
itemIndex: number
/**
 * Selected shipping option
 */
selectedSla: string
/**
 * String with the selected delivery channel. This field supports the following values:  
 * 
 * - `delivery`,  
 * 
 * - `pickup-in-point`.
 */
selectedDeliveryChannel?: string
/**
 * Logistics reservation waiting time.
 */
lockTTL?: string
/**
 * Estimated time until delivery for the item.
 */
shippingEstimate?: string
/**
 * Shipping price for the item. Does not account for the whole order's shipping price.
 */
price: number
/**
 * In case of scheduled delivery, this object will contain information on the delivery window selected by the shopper.
 */
deliveryWindow?: {
/**
 * Delivery window starting day and time in UTC.
 */
startDateUtc?: string
/**
 * Delivery window ending day and time in UTC.
 */
endDateUtc?: string
/**
 * Delivery window price.
 */
price?: number
/**
 * Delivery window list price.
 */
lisPrice?: number
/**
 * Delivery window tax.
 */
tax?: number
}
}[]
/**
 * Indicate whether this object's information is up to date according to the order's items. An order can not be placed if `"outdated"`
 */
updateStatus?: string
}
/**
 * Payment infomation.
 */
paymentData: {
/**
 * Gift card information, if it applies to the order.
 */
giftCards?: {
/**
 * Gift card redemption code.
 */
redemptionCode: string
/**
 * Gift card value.
 */
value: number
/**
 * Gift card balance.
 */
balance?: number
/**
 * Gift card name.
 */
name?: string
/**
 * Gift card ID.
 */
id?: string
/**
 * Indicates whether gift card is in use.
 */
inUse?: boolean
/**
 * Indicates whether gift card is special.
 */
isSpecialCard?: boolean
}[]
/**
 * Array of gift card messages.
 */
giftCardMessages?: string[]
/**
 * Information on payment systems.
 */
paymentSystems?: {
/**
 * Payment system ID.
 */
id?: number
/**
 * Payment system name.
 */
name?: string
/**
 * Payment group name.
 */
groupName?: string
/**
 * Payment system validator.
 */
validator?: {
regex?: string
/**
 * Validator mask.
 */
mask?: string
/**
 * Card code regular expression.
 */
cardCodeRegex?: string
/**
 * Card code mask.
 */
cardCodeMask?: string
/**
 * Weights.
 */
weights?: number[]
}
/**
 * String ID.
 */
stringId?: string
/**
 * Template.
 */
template?: string
/**
 * Indicates whether a document is required.
 */
requiresDocument?: boolean
/**
 * Indicates whether this payment system has been selected.
 */
selected?: boolean
/**
 * Indicates whether it is custom.
 */
isCustom?: boolean
/**
 * Description.
 */
description?: string
}[]
/**
 * Payment information.
 */
payments: {
/**
 * Account ID.
 */
accountId?: string
/**
 * Payment bin.
 */
bin?: string
/**
 * Number of installments.
 */
installments: number
/**
 * Payment system.
 */
paymentSystem: string
/**
 * Reference value for calculating interest rates, in case it applies.
 */
referenceValue: number
/**
 * Value including interest, in case it applies.
 */
value: number
}[]
/**
 * Indicates whether this object's information is up to date according to the order's items. An order can not be placed if `"outdated"`
 */
updateStatus?: string
}
marketingData?: {
/**
 * Sending an existing coupon code in this field will return the corresponding discount in the purchase. Use the [cart simulation](https://developers.vtex.com/vtex-rest-api/reference/orderform#orderformsimulation) request to check which coupons might apply before placing the order.
 */
coupon?: string
/**
 * UTM source.
 */
utmSource?: string
/**
 * UTM medium.
 */
utmMedium?: string
/**
 * UTM campaign
 */
utmCampaign?: string
/**
 * utmi_page (internal utm)
 */
utmiPage?: string
/**
 * utmi_part (internal utm)
 */
utmiPart?: string
/**
 * utmi_campaign (internal utm)
 */
utmiCampaign?: string
}
/**
 * Optional field meant to hold additional information about the order. We recommend using this field for text, not data formats such as `JSON` even if escaped. For that purpose, see [Creating customizable fields](https://developers.vtex.com/vtex-rest-api/docs/creating-customizable-fields-in-the-cart-with-checkout-api-1)
 */
openTextField?: string
/**
 * Sales Associate information.
 */
salesAssociateData?: {
/**
 * Sales Associate (Seller) identification code. All information should be registered by the merchant. Maximum of 100 characters.
 */
salesAssociateId?: string
}
minItems?: 0
}
response: {
/**
 * This is `null` since this request does not depend on any previously existing orderForm information in the platform.
 */
orderForm?: (null | string)
/**
 * Information on each transaction pertinent to the order placed.
 */
transactionData?: {
/**
 * Information on each merchant transaction.
 */
merchantTransactions?: {
/**
 * ID of the seller.
 */
id?: string
/**
 * ID of the transaction in the platform.
 */
transactionId?: string
/**
 * Name of the merchant responsible for the sale.
 */
merchantName?: string
/**
 * Information on each payment pertinent to the transaction.
 */
payments?: {
/**
 * Payment system.
 */
paymentSystem?: string
/**
 * Payment bin.
 */
bin?: (null | string)
/**
 * Account ID.
 */
accountId?: (null | string)
/**
 * Token ID.
 */
tokenId?: (null | string)
/**
 * Total value to be paid in this payment.
 */
value?: number
/**
 * Reference value over which interests may be applied.
 */
referenceValue?: number
/**
 * Gift card redemption code.
 */
giftCardRedemptionCode?: (null | string)
/**
 * Gift card provider.
 */
giftCardProvider?: (null | string)
/**
 * Gift card ID.
 */
giftCardId?: (null | string)
}[]
}[]
/**
 * Receiver URI.
 */
receiverUri?: string
/**
 * Template of the gateway callback path, which may later be used to send information about the transaction.
 */
gatewayCallbackTemplatePath?: string
}
/**
 * Information on each of the orders created.
 */
orders?: {
/**
 * ID of the order in the Order Management System (OMS).
 */
orderId?: string
/**
 * Order group. Orders that involve different sellers are split into different orders of a same order group.
 */
orderGroup?: string
/**
 * State.
 */
state?: (null | string)
/**
 * Indicates whether order is checked in.
 */
isCheckedIn?: boolean
/**
 * ID of the order in the seller.
 */
sellerOrderId?: (null | string)
/**
 * Store ID.
 */
storeId?: (null | string)
/**
 * Checked in pickuppoint.
 */
checkedInPickupPointId?: (null | string)
/**
 * Value of the order.
 */
value?: number
/**
 * Information on each item in the order.
 */
items?: {
/**
 * Unique ID.
 */
uniqueId?: string
/**
 * ID of the item.
 */
id?: string
/**
 * Product ID.
 */
productId?: string
/**
 * Product Ref ID.
 */
productRefId?: string
/**
 * Ref ID.
 */
refId?: string
/**
 * European Article Number.
 */
ean?: (null | string)
/**
 * Product name.
 */
name?: string
/**
 * SKU name.
 */
skuName?: string
/**
 * Modal type.
 */
modalType?: (null | string)
/**
 * Parent item index.
 */
parentItemIndex?: (null | number)
/**
 * Parent assembly binding.
 */
parentAssemblyBinding?: (null | string)
/**
 * Price expiration date and time.
 */
priceValidUntil?: string
/**
 * Tax value in cents.
 */
tax?: number
/**
 * Price in cents.
 */
price?: number
/**
 * List price in cents.
 */
listPrice?: number
/**
 * Manual price in cents.
 */
manualPrice?: (null | number)
/**
 * User that applied the manual price, if that is the case.
 */
manualPriceAppliedBy?: (null | string)
/**
 * Selling price in cents. Note that this field may be subject to rounding discrepancies. We recommend retrieving data from the `priceDefinition` data structure instead.
 */
sellingPrice?: number
/**
 * Reward value in cents.
 */
rewardValue?: number
/**
 * Indicates whether item is a gift.
 */
isGift?: boolean
/**
 * Additional information.
 */
additionalInfo?: {
/**
 * Dimension.
 */
dimension?: (null | string)
/**
 * Brand name.
 */
brandName?: string
/**
 * Brand ID.
 */
brandId?: string
/**
 * Offering information.
 */
offeringInfo?: (null | string)
/**
 * Offering type.
 */
offeringType?: (null | string)
/**
 * Offering type ID.
 */
offeringTypeId?: (null | string)
}
/**
 * Presale date.
 */
preSaleDate?: (null | string)
/**
 * Product category IDs.
 */
productCategoryIds?: string
/**
 * Object, where each field is an ID from `productCategoryIds`.
 */
productCategories?: {
/**
 * Product category corresponding to the ID in the field key.
 */
"{ID}"?: string
}
/**
 * Quantity.
 */
quantity?: number
/**
 * Seller.
 */
seller?: string
/**
 * Sellers involved in the chain. The list should contain only one seller, unless it is a [Multilevel Omnichannel Inventory](https://help.vtex.com/pt/tutorial/multilevel-omnichannel-inventory--7M1xyCZWUyCB7PcjNtOyw4) order.
 */
sellerChain?: string[]
/**
 * Image URL.
 */
imageUrl?: string
/**
 * Detail URL.
 */
detailUrl?: string
/**
 * Information on services sold along with the SKU. Example: a gift package.
 */
bundleItems?: {
/**
 * Service type.
 */
type?: string
/**
 * Service identifier.
 */
id?: number
/**
 * Service name.
 */
name?: string
/**
 * Service price in cents.
 */
price?: number
}[]
/**
 * Array containing information on attachments.
 */
attachments?: string[]
/**
 * Array of price tags, each of which, modifies the price in some way, like discounts or rates that apply to the item in the context of the order.
 */
priceTags?: {
/**
 * Price tag identifier.
 */
identifier?: string
/**
 * Indicates whether price tag value is applied through a percentage.
 */
isPercentual?: boolean
/**
 * Price tag name.
 */
name?: string
/**
 * Price tag raw value.
 */
rawValue?: number
/**
 * Price tag value.
 */
value?: number
}[]
/**
 * Availability
 */
availability?: string
/**
 * Measurement unit
 */
measurementUnit?: string
/**
 * Unit multiplier
 */
unitMultiplier?: number
/**
 * Manufacturer code.
 */
manufacturerCode?: (null | string)
/**
 * Price information for all units of a specific item.
 */
priceDefinition?: {
/**
 * Item's calculated unitary selling price in cents.
 */
calculatedSellingPrice?: number
/**
 * Total value for all units of the item in cents.
 */
total?: number
/**
 * Array of objects, each containing value (in cents) and quantity for the different rounding instances that can be combined to form the correctly rounded total.
 */
sellingPrices?: {
/**
 * Value in cents for that specific rounding.
 */
value?: number
/**
 * Rounding quantity, meaning how many items are rounded to this value.
 */
quantity?: number
}[]
}
}[]
/**
 * Information on each seller.
 */
sellers?: {
/**
 * Seller ID.
 */
id?: string
/**
 * Seller name.
 */
name?: string
/**
 * Seller logo.
 */
logo?: (null | string)
}[]
/**
 * Information on order totals.
 */
totals?: {
/**
 * Total ID.
 */
id?: string
/**
 * Total name.
 */
name?: string
/**
 * Total value.
 */
value?: number
}[]
/**
 * Customer's profile information.
 */
clientProfileData?: {
/**
 * Email address.
 */
email?: string
/**
 * First name.
 */
firstName?: string
/**
 * Last name.
 */
lastName?: string
/**
 * Type of the document informed by the customer.
 */
documentType?: string
/**
 * Document informed by the customer.
 */
document?: string
/**
 * Phone number.
 */
phone?: string
/**
 * Company name, if the customer is a legal entity.
 */
corporateName?: (null | string)
/**
 * Trade name, if the customer is a legal entity.
 */
tradeName?: (null | string)
/**
 * Corporate document, if the customer is a legal entity.
 */
corporateDocument?: (null | string)
/**
 * State inscription, if the customer is a legal entity.
 */
stateInscription?: (null | string)
/**
 * Corporate phone number, if the customer is a legal entity.
 */
corporatePhone?: (null | string)
/**
 * Indicates whether the customer is a legal entity.
 */
isCorporate?: boolean
/**
 * Indicates whether profile is complete on loading.
 */
profileCompleteOnLoading?: boolean
/**
 * Indicates whether profile presents error on loading.
 */
profileErrorOnLoading?: (null | boolean)
/**
 * Customer class.
 */
customerClass?: (null | string)
}
/**
 * Information on rates and benefits that apply to the order.
 */
ratesAndBenefitsData?: {
/**
 * List with rates and benefits identifiers.
 */
rateAndBenefitsIdentifiers?: string[]
/**
 * List with rates and benefits teasers.
 */
teaser?: string[]
}
/**
 * Shipping information pertinent to the order.
 */
shippingData?: {
/**
 * Address information.
 */
address?: {
/**
 * Type of address. For example, `Residential` or `Pickup`.
 */
addressType?: string
/**
 * Name of the person who is going to receive the order.
 */
receiverName?: string
/**
 * Address ID.
 */
addressId?: string
/**
 * Indicates whether address is disposable.
 */
isDisposable?: boolean
/**
 * Postal code.
 */
postalCode?: string
/**
 * City of the shipping address.
 */
city?: string
/**
 * State of the shipping address.
 */
state?: string
/**
 * Three letter ISO code of the country of the shipping address.
 */
country?: string
/**
 * Street of the shipping address.
 */
street?: string
/**
 * Number of the building, house or apartment in the shipping address.
 */
number?: string
/**
 * Neighborhood of the shipping address.
 */
neighborhood?: string
/**
 * Complement to the shipping address, in case it applies.
 */
complement?: (null | string)
/**
 * Complement that might help locate the shipping address more precisely in case of delivery.
 */
reference?: (null | string)
/**
 * Array containing two floats with geocoordinates, first longitude, then latitude.
 */
geoCoordinates?: number[]
}
/**
 * Array with logistics information. Each object in this array corresponds to an object in the `items` array, based on the respective `itemIndex`.
 */
logisticsInfo?: {
/**
 * Index corresponding to the position of the object in the `items` array.
 */
itemIndex?: number
/**
 * SLA selected by the customer.
 */
selectedSla?: string
/**
 * Delivery channel selected by the customer. For example, `"delivery"` or `"pickup-in-point"`.
 */
selectedDeliveryChannel?: string
/**
 * Address ID.
 */
addressId?: string
/**
 * Information on available SLAs.
 */
slas?: {
/**
 * SLA ID.
 */
id?: string
/**
 * Delivery channel.
 */
deliveryChannel?: string
/**
 * SLA name.
 */
name?: string
/**
 * Information on each delivery ID.
 */
deliveryIds?: {
/**
 * Courier ID.
 */
courierId?: string
/**
 * Warehouse ID.
 */
warehouseId?: string
/**
 * Warehouse ID.
 */
dockId?: string
/**
 * Courier name.
 */
courierName?: string
/**
 * Quantity.
 */
quantity?: number
}[]
/**
 * Shipping estimate. For instance, Three business days will be represented `3bd`.
 */
shippingEstimate?: string
/**
 * Shipping estimate date.
 */
shippingEstimateDate?: (null | string)
/**
 * Estimate date of delivery.
 */
lockTTL?: string
/**
 * Price in cents.
 */
price?: number
/**
 * List price in cents.
 */
listPrice?: number
/**
 * Tax in cents.
 */
tax?: number
/**
 * Information on the pickup store.
 */
pickupStoreInfo?: {
/**
 * Indicates whether it is the pickup store.
 */
isPickupStore?: boolean
/**
 * Friendly name.
 */
friendlyName?: (null | string)
/**
 * Address information.
 */
address?: (null | {
/**
 * Type of address. For example, `Residential` or `Pickup`.
 */
addressType?: string
/**
 * Postal code.
 */
postalCode?: string
/**
 * City of the shipping address.
 */
city?: string
/**
 * State of the shipping address.
 */
state?: string
/**
 * Three letter ISO code of the country of the shipping address.
 */
country?: string
/**
 * Street of the shipping address.
 */
street?: string
/**
 * Number of the building, house or apartment in the shipping address.
 */
number?: string
/**
 * Neighborhood of the shipping address.
 */
neighborhood?: string
/**
 * Complement to the shipping address, in case it applies.
 */
complement?: (null | string)
/**
 * Complement that might help locate the shipping address more precisely in case of delivery.
 */
reference?: (null | string)
/**
 * Array containing two floats with geocoordinates, first longitude, then latitude.
 */
geoCoordinates?: number[]
})
/**
 * Additional information.
 */
additionalInfo?: (null | string)
/**
 * Corresponding dock ID.
 */
dockId?: (null | string)
}
/**
 * Pickup point ID.
 */
pickupPointId?: (null | string)
/**
 * Pickup point distance.
 */
pickupDistance?: number
/**
 * Polygon name.
 */
polygonName?: (null | string)
/**
 * Transit time. For instance, "three business days" is represented `3bd`.
 */
transitTime?: string
}[]
/**
 * List of countries that the item may be shipped to.
 */
shipsTo?: string[]
/**
 * Item ID.
 */
itemId?: string
/**
 * List of available delivery channels.
 */
deliveryChannels?: {
/**
 * Delivery channel ID.
 */
id?: string
}[]
}[]
/**
 * Array with information on the selected addresses for the order.
 */
selectedAddresses?: {
/**
 * Type of address. For example, `Residential` or `Pickup`.
 */
addressType?: string
/**
 * Name of the person who is going to receive the order.
 */
receiverName?: string
/**
 * Address ID.
 */
addressId?: string
/**
 * Indicates whether address is disposable.
 */
isDisposable?: boolean
/**
 * Postal code.
 */
postalCode?: string
/**
 * City of the shipping address.
 */
city?: string
/**
 * State of the shipping address.
 */
state?: string
/**
 * Three letter ISO code of the country of the shipping address.
 */
country?: string
/**
 * Street of the shipping address.
 */
street?: string
/**
 * Number of the building, house or apartment in the shipping address.
 */
number?: string
/**
 * Neighborhood of the shipping address.
 */
neighborhood?: string
/**
 * Complement to the shipping address, in case it applies.
 */
complement?: string
/**
 * Complement that might help locate the shipping address more precisely in case of delivery.
 */
reference?: (null | string)
/**
 * Array containing two floats with geocoordinates, first longitude, then latitude.
 */
geoCoordinates?: number[]
}[]
/**
 * Array with information on the available addresses for the order.
 */
availableAddresses?: {
/**
 * Type of address. For example, `Residential` or `Pickup`.
 */
addressType?: string
/**
 * Name of the person who is going to receive the order.
 */
receiverName?: string
/**
 * Address ID.
 */
addressId?: string
/**
 * Indicates whether address is disposable.
 */
isDisposable?: boolean
/**
 * Postal code.
 */
postalCode?: string
/**
 * City of the shipping address.
 */
city?: string
/**
 * State of the shipping address.
 */
state?: string
/**
 * Three letter ISO code of the country of the shipping address.
 */
country?: string
/**
 * Street of the shipping address.
 */
street?: string
/**
 * Number of the building, house or apartment in the shipping address.
 */
number?: string
/**
 * Neighborhood of the shipping address.
 */
neighborhood?: string
/**
 * Complement to the shipping address, in case it applies.
 */
complement?: string
/**
 * Complement that might help locate the shipping address more precisely in case of delivery.
 */
reference?: (null | string)
/**
 * Array containing two floats with geocoordinates, first longitude, then latitude.
 */
geoCoordinates?: number[]
}[]
}
/**
 * Information on the order's payment.
 */
paymentData?: {
/**
 * Gift card information, if it applies to the order.
 */
giftCards?: {
/**
 * Gift card redemption code.
 */
redemptionCode?: string
/**
 * Gift card value in cents.
 */
value?: number
/**
 * Gift card balance in cents.
 */
balance?: number
/**
 * Gift card name.
 */
name?: string
/**
 * Gift card ID.
 */
id?: string
/**
 * Indicates whether gift card is in use.
 */
inUse?: boolean
/**
 * Indicates whether gift card is special.
 */
isSpecialCard?: boolean
}[]
/**
 * Information on each transaction pertinent to the order.
 */
transactions?: {
/**
 * Indicates whether transaction is active.
 */
isActive?: boolean
/**
 * Transaction ID.
 */
transactionId?: string
/**
 * Merchant name.
 */
merchantName?: string
/**
 * Information on each payment.
 */
payments?: {
/**
 * Account ID.
 */
accountId?: string
/**
 * Bin.
 */
bin?: string
/**
 * Number of installments.
 */
installments?: number
/**
 * Payment system.
 */
paymentSystem?: string
/**
 * Reference value for calculating interest rates, in case it applies. Displayed in cents.
 */
referenceValue?: number
/**
 * Value including interest, in case it applies. Displayed in cents.
 */
value?: number
}[]
/**
 * Indicates whather transaction is shared.
 */
sharedTransaction?: boolean
}[]
}
/**
 * Item metadata.
 */
itemMetadata?: {
/**
 * List of objects containing metadata on each item in the order.
 */
items?: {
/**
 * Item ID.
 */
id?: string
/**
 * Seller.
 */
seller?: string
/**
 * Product name.
 */
name?: string
/**
 * SKU name.
 */
skuName?: string
/**
 * Product ID.
 */
productId?: string
/**
 * Ref ID.
 */
refId?: string
/**
 * European Article Number.
 */
ean?: (null | string)
/**
 * Image URL.
 */
imageUrl?: string
/**
 * Detail URL.
 */
detailUrl?: string
}[]
}
/**
 * Sales channel.
 */
salesChannel?: string
/**
 * Follow up email address.
 */
followUpEmail?: string
/**
 * Creation date.
 */
creationDate?: string
/**
 * Last change.
 */
lastChange?: string
/**
 * Time zone creation date.
 */
timeZoneCreationDate?: string
/**
 * Time zone last change.
 */
timeZoneLastChange?: string
/**
 * Indicates whether order is completed.
 */
isCompleted?: boolean
/**
 * Host name.
 */
hostName?: string
/**
 * Merchant name.
 */
merchantName?: (null | string)
/**
 * User type.
 */
userType?: string
/**
 * Rounding error.
 */
roundingError?: number
/**
 * Indicates whether edition is allowed.
 */
allowEdition?: boolean
/**
 * Indicates whether cancelation is allowed.
 */
allowCancelation?: boolean
/**
 * Indicates whether seller changing is allowed.
 */
allowChangeSeller?: boolean
/**
 * Indicates whether user data is visible.
 */
isUserDataVisible?: boolean
/**
 * `orderForm` creation date.
 */
orderFormCreationDate?: string
/**
 * Sales Associate (Seller) identification code.
 */
salesAssociateId?: string
}[]
}
}
/**
 * Order processing callback request, which is made after an order's payment is approved.
 * 
 * > This request has to be made within five minutes after the [Place order](https://developers.vtex.com/docs/api-reference/checkout-api#put-/api/checkout/pub/orders) or [Place order from existing cart](https://developers.vtex.com/docs/api-reference/checkout-api#post-/api/checkout/pub/orderForm/-orderFormId-/transaction) request has been made, or else, the order will not be processed.
 */
"POST /api/checkout/pub/gatewayCallback/:orderGroup": {

}
/**
 * Retrieves a list of sellers that cater to a specific region or address, according to your setup of our [regionalization feature](https://help.vtex.com/en/tutorial/setting-up-price-and-availability-of-skus-by-region--12ne58BmvYsYuGsimmugoc#). Learn more about [Region v2](https://developers.vtex.com/docs/guides/region-v2-release).
 * 
 * To access the list of sellers, you must choose one of the following methods:
 * 
 * 1. Send the identification of the list of sellers (`regionId`) as a path parameter through the URL. Or;
 * 2. Send the `country` (3-digit ISO code) and at least one of the two values (`postal Code` or `geo Coordinates`) as query parameters through the URL. For this method, it is also allowed to send both values (`postalCode` or `geoCoordinates`) in the same request.
 * 
 * > The `regionId` and `country` parameters are indicated as required in this documentation. However, only one of them should be sent in the request according to one of the methods mentioned above.
 */
"GET /api/checkout/pub/regions/:regionId": {
searchParams: {
/**
 * Three letter country code refering to the `postalCode` field.
 */
country: string
/**
 * Postal code corresponding to the shopper's location.
 */
postalCode?: string
/**
 * Geocoordinates (first longitude, semicolon, then latitude) corresponding to the shopper's location.
 */
geoCoordinates?: number[]
}
response: {
/**
 * Region ID.
 */
id?: string
/**
 * Array with information on each seller retrieved for the given region.
 */
sellers?: {
/**
 * Seller ID.
 */
id?: string
/**
 * Seller name.
 */
name?: string
/**
 * Seller logo.
 */
logo?: (null | string)
}[]
}
}
}
export interface GetorUpdateProductSpecification {
/**
 * Array with Specification values.
 */
Value: string[]
/**
 * Specification field ID, which is the same as `FieldId` in other specification endpoints.
 */
Id?: number
/**
 * Name of the Specification.
 */
Name?: string
}
export interface GetSKUandContext {
/**
 * SKU ID.
 */
Id: number
/**
 * ID of the related Product.
 */
ProductId: number
/**
 * Product Name and SKU Name concatenated.
 */
NameComplete: string
/**
 * Product Complement Name.
 */
ComplementName?: string
/**
 * Product Name.
 */
ProductName: string
/**
 * Product Description. HTML is allowed.
 */
ProductDescription: string
/**
 * Reference ID of the related Product.
 */
ProductRefId?: string
/**
 * SKU Tax Code.
 */
TaxCode?: string
/**
 * SKU Name.
 */
SkuName: string
/**
 * Defines if the SKU is active or not.
 */
IsActive: boolean
/**
 * @deprecated
 */
IsTransported: boolean
/**
 * @deprecated
 */
IsInventoried: boolean
/**
 * Defines if the purchase will generate a reward.
 */
IsGiftCardRecharge: boolean
/**
 * SKU image URL.
 */
ImageUrl: string
/**
 * Product URL.
 */
DetailUrl: string
/**
 * SKU Seller identification.
 */
CSCIdentification: string
/**
 * Product Brand ID.
 */
BrandId: string
/**
 * Product Brand Name.
 */
BrandName: string
Dimension: Dimension
RealDimension: RealDimension
/**
 * Product Supplier ID.
 */
ManufacturerCode: string
/**
 * Defines if the SKU is part of a bundle.
 */
IsKit: boolean
/**
 * Array with SKU IDs of bundle components.
 */
KitItems: string[]
/**
 * Array with Service IDs that are related to the SKU.
 */
Services: string[]
/**
 * Array with Categories from the related Product.
 */
Categories: string[]
/**
 * Array with Attachments ID that are related to the SKU.
 */
Attachments: Attachment[]
/**
 * Array with Collections ID that are related to the Product.
 */
Collections: string[]
/**
 * Array with SKU Sellers data.
 */
SkuSellers: SkuSeller[]
/**
 * Array with the ID of all the Sales Channels that are related to the product.
 */
SalesChannels: number[]
/**
 * Array with SKU images.
 */
Images: Image[]
/**
 * Array with related SKU Specifications.
 */
SkuSpecifications: SkuSpecification[]
/**
 * Array with related Product Specifications.
 */
ProductSpecifications: ProductSpecification[]
ProductClusterNames?: {
/**
 * Collection ID
 */
[k: string]: string
}
/**
 * Product Clusters IDs.
 */
ProductClustersIds: string
/**
 * Category Hierarchy with Category IDs.
 */
ProductCategoryIds: string
/**
 * Global Category ID.
 */
ProductGlobalCategoryId: number
/**
 * Object containing product categories. Structure: "{CategoryID}": "{CategoryName}".
 */
ProductCategories: {
/**
 * Category ID.
 */
[k: string]: string
}
/**
 * SKU Commercial Condition ID.
 */
CommercialConditionId: number
/**
 * Reward value related to the SKU.
 */
RewardValue: number
AlternateIds: AlternateIds
/**
 * Array with values of alternative SKU IDs.
 */
AlternateIdValues: string[]
/**
 * To add the product as pre-sale, enter the product estimated arrival date in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) format. You must take into consideration both the launch date and the freight calculation for the arrival date.
 */
EstimatedDateArrival: string
/**
 * SKU Measurement Unit.
 */
MeasurementUnit: string
/**
 * This is the multiple number of SKU. If the Multiplier is 5.0000, the product can be added in multiple quantities of 5, 10, 15, 20, onward.
 */
UnitMultiplier: number
/**
 * Information Source.
 */
InformationSource: string
/**
 * Modal Type.
 */
ModalType: string
/**
 * Keywords related to the product.
 */
KeyWords?: string
/**
 * Release date of the product.
 */
ReleaseDate?: string
/**
 * Defines if the product is visible or not.
 */
ProductIsVisible?: boolean
/**
 * Defines if the product will be shown if it is not available.
 */
ShowIfNotAvailable?: boolean
/**
 * Defines if the product is active or not.
 */
IsProductActive?: boolean
/**
 * Product Final Score.
 */
ProductFinalScore?: number
}
/**
 * Object containing the SKU dimensions to be used on the shipping calculation.
 */
export interface Dimension {
/**
 * SKU Cubic Weight.
 */
cubicweight: number
/**
 * SKU Height.
 */
height: number
/**
 * SKU Length.
 */
length: number
/**
 * SKU Weight.
 */
weight: number
/**
 * SKU Width.
 */
width: number
}
/**
 * Object containing the real SKU dimensions, which appear in the product page.
 */
export interface RealDimension {
/**
 * Real SKU Cubic Weight.
 */
realCubicWeight: number
/**
 * Real SKU Height.
 */
realHeight: number
/**
 * Real SKU Length.
 */
realLength: number
/**
 * Real SKU Weight.
 */
realWeight: number
/**
 * Real SKU Width.
 */
realWidth: number
}
/**
 * Object containing information about SKU attachments.
 */
export interface Attachment {
/**
 * Attachment ID.
 */
Id: number
/**
 * Attachment Name.
 */
Name: string
/**
 * Attachment Keys.
 */
Keys: string[]
/**
 * Array containing Attachment fields.
 */
Fields: Field[]
/**
 * Defines if the Attachment is active or not.
 */
IsActive: boolean
/**
 * Defines if the Attachment is required or not.
 */
IsRequired: boolean
}
export interface Field {
/**
 * Attachment field name.
 */
FieldName: string
/**
 * Maximum number of characters accepted in the attachment field.
 */
MaxCaracters: string
/**
 * Allowed key values.
 */
DomainValues: string
}
/**
 * Object containing related SKU Sellers data.
 */
export interface SkuSeller {
/**
 * SKU Seller ID. This is the ID that identifies the seller in the marketplace. It can be the same as the seller name or a unique number. Check the **Sellers management** section in the Admin to get the correct ID.
 */
SellerId: string
/**
 * SKU ID.
 */
StockKeepingUnitId: number
/**
 * SKU ID for the SKU Seller.
 */
SellerStockKeepingUnitId: string
/**
 * Defines if the SKU is active.
 */
IsActive: boolean
/**
 * Registered value for Seller Freight Commission.
 */
FreightCommissionPercentage: number
/**
 * Registered value for Seller Product Commission.
 */
ProductCommissionPercentage: number
}
/**
 * Object containing SKU images details.
 */
export interface Image {
/**
 * Image URL.
 */
ImageUrl: string
/**
 * Image label.
 */
ImageName: string
/**
 * SKU image ID.
 */
FileId: number
}
/**
 * Object containing related SKU Specifications.
 */
export interface SkuSpecification {
/**
 * Specification field ID.
 */
FieldId: number
/**
 * Specification field Name.
 */
FieldName: string
/**
 * Array with related Specification Values IDs.
 */
FieldValueIds: number[]
/**
 * Array with related Specification Values.
 */
FieldValues: string[]
}
export interface ProductSpecification {
/**
 * Specification field ID.
 */
FieldId: number
/**
 * Specification name. Limited to 100 characters.
 */
FieldName: string
/**
 * Array with related Specification Values IDs.
 */
FieldValueIds: number[]
/**
 * Array with related Specification Values.
 */
FieldValues: string[]
}
/**
 * Array with alternate SKU IDs, such as EAN and RefId.
 */
export interface AlternateIds {
/**
 * SKU EAN.
 */
Ean?: string
/**
 * SKU Reference ID.
 */
RefId?: string
}
export interface GetSKUAltID {
/**
 * SKU ID.
 */
Id: number
/**
 * Product ID.
 */
ProductId: number
/**
 * Product Name and SKU Name combined.
 */
NameComplete: string
/**
 * Product Complement Name.
 */
ComplementName?: string
/**
 * Product Name.
 */
ProductName: string
/**
 * Product Description. HTML is allowed.
 */
ProductDescription: string
/**
 * Product Reference ID.
 */
ProductRefId?: string
/**
 * SKU Tax Code.
 */
TaxCode?: string
/**
 * SKU Name.
 */
SkuName: string
/**
 * Defines if the SKU is active or not.
 */
IsActive: boolean
/**
 * @deprecated
 */
IsTransported: boolean
/**
 * @deprecated
 */
IsInventoried: boolean
/**
 * Defines if the purchase of the SKU will generate reward value for the customer.
 */
IsGiftCardRecharge: boolean
/**
 * SKU image URL.
 */
ImageUrl: string
/**
 * Product slug.
 */
DetailUrl: string
/**
 * SKU Seller Identification.
 */
CSCIdentification: string
/**
 * Brand ID.
 */
BrandId: string
/**
 * Brand Name.
 */
BrandName: string
Dimension: Dimension
RealDimension: RealDimension
/**
 * Product Supplier ID.
 */
ManufacturerCode: string
/**
 * Defines if the SKU is part of a bundle.
 */
IsKit: boolean
/**
 * Array with SKU IDs of bundle components.
 */
KitItems: string[]
/**
 * Array with Service IDs that are related to the SKU.
 */
Services: string[]
/**
 * Categories of the related product.
 */
Categories: string[]
/**
 * Path of Categories of the related product.
 */
CategoriesFullPath?: string[]
/**
 * Array with Attachments ID that are related to the SKU.
 */
Attachments: Attachment[]
/**
 * Array with Collections IDs that are related to the Product.
 */
Collections: string[]
/**
 * Array with related Sellers data.
 */
SkuSellers: SkuSeller[]
/**
 * Array of trade policy IDs.
 */
SalesChannels: number[]
/**
 * Array of objects with SKU image details.
 */
Images: Image[]
/**
 * Array with related SKU Specifications.
 */
SkuSpecifications: SkuSpecification[]
/**
 * Array with related Product Specifications.
 */
ProductSpecifications: ProductSpecification[]
/**
 * Product Cluster IDs separated by comma (`,`).
 */
ProductClustersIds: string
/**
 * Product Clusters position in each Cluster. Structure: "{Product Cluster ID}": {Position}.
 * 
 * `{Product Cluster ID}` is a string, while `{Position}` is an integer.
 */
PositionsInClusters?: {
/**
 * Product Cluster ID.
 */
[k: string]: number
}
/**
 * Product Clusters Names. Structure: "{Product Cluster ID}": "{Product Cluster Name}". Both the key and the value are strings.
 */
ProductClusterNames?: {
/**
 * Product Cluster ID.
 */
[k: string]: string
}
/**
 * Product Clusters Highlights. Structure: "{Product Cluster ID}": "{Product Cluster Name}". Both the key and the value are strings.
 */
ProductClusterHighlights?: {
/**
 * Product Cluster ID.
 */
[k: string]: string
}
/**
 * Category path composed by category IDs separated by `/`.
 */
ProductCategoryIds: string
/**
 * Indicates if the direct Product Category is active or not.
 */
IsDirectCategoryActive?: boolean
/**
 * Product Global Category ID.
 */
ProductGlobalCategoryId: number
/**
 * Object containing product categories. Structure: "{CategoryID}": "{CategoryName}". Both the key and the value are strings.
 */
ProductCategories: {
/**
 * Category ID.
 */
[k: string]: string
}
/**
 * SKU Commercial Condition ID.
 */
CommercialConditionId: number
/**
 * Reward value related to the SKU.
 */
RewardValue: number
AlternateIds: AlternateIds
/**
 * Array with values of alternative SKU IDs.
 */
AlternateIdValues: string[]
/**
 * SKU estimated arrival date in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) format, when the product is on pre-sale. You must take into consideration both the launch date and the freight calculation for the arrival date.
 */
EstimatedDateArrival: string
/**
 * Measurement unit.
 */
MeasurementUnit: string
/**
 * This is the multiple number of SKU. If the Multiplier is 5.0000, the product can be added in multiple quantities of 5, 10, 15, 20, onward.
 */
UnitMultiplier: number
/**
 * Information Source.
 */
InformationSource: string
/**
 * Links an unusual type of SKU to a carrier specialized in delivering it. This field should be filled in with the name of the modal (e.g. "Chemicals" or "Refrigerated products"). To learn more about this feature, read our articles [How the modal works](https://help.vtex.com/en/tutorial/how-does-the-modal-work--tutorials_125) and [Setting up modal for carriers](https://help.vtex.com/en/tutorial/configure-modal--3jhLqxuPhuiq24UoykCcqy).
 */
ModalType: string
/**
 * Keywords related to the product.
 */
KeyWords?: string
/**
 * Release date of the product.
 */
ReleaseDate?: string
/**
 * Defines if the product is visible or not.
 */
ProductIsVisible?: boolean
/**
 * Defines if the product will be shown if it is not available.
 */
ShowIfNotAvailable?: boolean
/**
 * Defines if the product is active or not.
 */
IsProductActive?: boolean
/**
 * Product Final Score.
 */
ProductFinalScore?: number
}
export interface SkulistbyProductId {
/**
 * Defines if the SKU is persisted.
 */
IsPersisted?: boolean
/**
 * @deprecated
 * Defines if the SKU is removed.
 */
IsRemoved?: boolean
/**
 * SKU ID.
 */
Id?: number
/**
 * Product ID.
 */
ProductId?: number
/**
 * Defines if the SKU is active or not.
 */
IsActive?: boolean
/**
 * SKU Name.
 */
Name?: string
/**
 * SKU Height.
 */
Height?: number
/**
 * Real SKU Height.
 */
RealHeight?: number
/**
 * SKU Width.
 */
Width?: number
/**
 * Real SKU Width.
 */
RealWidth?: number
/**
 * SKU Length.
 */
Length?: number
/**
 * Real SKU Length.
 */
RealLength?: number
/**
 * Weight of the SKU in the measurement [configured in the store](https://help.vtex.com/en/tutorial/filling-in-system-settings--tutorials_269), which by default is in grams.
 */
WeightKg?: number
/**
 * Real Weight of the SKU in the measurement [configured in the store](https://help.vtex.com/en/tutorial/filling-in-system-settings--tutorials_269), which by default is in grams.
 */
RealWeightKg?: number
/**
 * Delivery Method (Modal Type) ID.
 */
ModalId?: number
/**
 * Product Reference ID.
 */
RefId?: string
/**
 * [Cubic weight](https://help.vtex.com/en/tutorial/understanding-the-cubic-weight-factor--tutorials_128).
 */
CubicWeight?: number
/**
 * Flag to set whether the product SKU is made up of one or more SKUs, thereby becoming a bundle. Must be enabled if you are adding a bundle. Once activated, the flag cannot be reverted.
 */
IsKit?: boolean
/**
 * @deprecated
 */
IsDynamicKit?: string
/**
 * Internal note.
 */
InternalNote?: string
/**
 * Date when the product was updated for the most recent time.
 */
DateUpdated?: string
/**
 * Reward value related to the SKU.
 */
RewardValue?: number
/**
 * SKU Commercial Condition ID.
 */
CommercialConditionId?: number
/**
 * SKU estimated arrival date in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) format, when the product is on pre-sale. You must take into consideration both the launch date and the freight calculation for the arrival date.
 */
EstimatedDateArrival?: string
/**
 * Defines if the SKU bundle items can be sold separately.
 */
FlagKitItensSellApart?: boolean
/**
 * Product Supplier ID.
 */
ManufacturerCode?: string
/**
 * SKU Reference ID.
 */
ReferenceStockKeepingUnitId?: string
/**
 * SKU Position.
 */
Position?: number
/**
 * When set to `true`, this attribute will automatically update the SKU as active once associated with an image or an active component.
 */
ActivateIfPossible?: boolean
/**
 * Measurement unit.
 */
MeasurementUnit?: string
/**
 * This is the multiple number of SKU. If the Multiplier is 5.0000, the product can be added in multiple quantities of 5, 10, 15, 20, onward.
 */
UnitMultiplier?: number
/**
 * @deprecated
 */
IsInventoried?: boolean
/**
 * @deprecated
 */
IsTransported?: boolean
/**
 * Defines if the purchase of the SKU will generate reward value for the customer.
 */
IsGiftCardRecharge?: boolean
/**
 * Links an unusual type of SKU to a carrier specialized in delivering it. This field should be filled in with the name of the modal (e.g. "Chemicals" or "Refrigerated products"). To learn more about this feature, read our articles [How the modal works](https://help.vtex.com/en/tutorial/how-does-the-modal-work--tutorials_125) and [Setting up modal for carriers](https://help.vtex.com/en/tutorial/configure-modal--3jhLqxuPhuiq24UoykCcqy).
 */
ModalType?: string
/**
 * Defines if the SKU is a Optimized bundle.
 */
isKitOptimized?: boolean
}
export interface SKUFileURL {
/**
 * Defines if the Image is the main image of the SKU.
 */
IsMain?: boolean
/**
 * SKU image label.
 */
Label?: string
/**
 * SKU image name.
 */
Name: string
/**
 * General text of the image.
 */
Text?: string
/**
 * External Image's URL.  The URL must start with the protocol identifier (`http://` or `https://`) and end with the file extension (`.jpg`, `.png` or `.gif`).
 */
Url: string
}
export interface SkuKit {
/**
 * SKU Kit ID, same as `StockKeepingUnitParent`.
 */
Id?: number
/**
 * Parent SKU ID.
 */
StockKeepingUnitParent?: number
/**
 * SKU ID of the kit component.
 */
StockKeepingUnitId?: number
/**
 * Component quantity.
 */
Quantity?: number
/**
 * Component price per unit.
 */
UnitPrice?: number
}
export interface SKUService {
/**
 * SKU Service ID.
 */
Id?: number
/**
 * SKU Service Type ID.
 */
SkuServiceTypeId?: number
/**
 * SKU Service Value ID.
 */
SkuServiceValueId?: number
/**
 * SKU ID.
 */
SkuId?: number
/**
 * SKU Service Name. Maximum of 50 characters.
 */
Name?: string
/**
 * Internal description of the SKU Service. Maximum of 100 characters.
 */
Text?: string
/**
 * Defines if the SKU Service is active or not.
 */
IsActive?: boolean
}
export interface SKUServiceTypeRequest {
/**
 * SKU Service Type Name. Maximum of 100 characters.
 */
Name: string
/**
 * Defines if the SKU Service Type is active or not.
 */
IsActive: boolean
/**
 * @deprecated
 * Deprecated
 */
ShowOnProductFront: boolean
/**
 * Defines if the SKU Service Type is displayed on the cart screen.
 */
ShowOnCartFront: boolean
/**
 * Defines if the SKU Service Type has an attachment.
 */
ShowOnAttachmentFront: boolean
/**
 * Defines if the SKU Service Type can be associated with an attachment or not.
 */
ShowOnFileUpload: boolean
/**
 * Defines if the SKU Service Type is displayed as a Gift Card.
 */
IsGiftCard: boolean
/**
 * Defines if the SKU Service type is mandatory.
 */
IsRequired: boolean
}
export interface SKUServiceTypeResponse {
/**
 * SKU Service Type ID.
 */
Id?: number
/**
 * SKU Service Type Name. Maximum of 100 characters.
 */
Name?: string
/**
 * Defines if the SKU Service Type is active or not.
 */
IsActive?: boolean
/**
 * @deprecated
 * Deprecated.
 */
ShowOnProductFront?: boolean
/**
 * Defines if the SKU Service Type is displayed on the cart screen.
 */
ShowOnCartFront?: boolean
/**
 * Defines if the SKU Service Type has an attachment.
 */
ShowOnAttachmentFront?: boolean
/**
 * Defines if the SKU Service Type can be associated with an attachment or not.
 */
ShowOnFileUpload?: boolean
/**
 * Defines if the SKU Service Type is displayed as a Gift Card.
 */
IsGiftCard?: boolean
/**
 * Defines if the SKU Service type is mandatory.
 */
IsRequired?: boolean
}
export interface SKUServiceValueRequest {
/**
 * SKU Service Type ID.
 */
SkuServiceTypeId: number
/**
 * SKU Service Value name. Maximum of 100 characters.
 */
Name: string
/**
 * SKU Service Value value.
 */
Value: number
/**
 * SKU Service Value cost.
 */
Cost: number
}
export interface SKUServiceValueResponse {
/**
 * SKU Service Value ID.
 */
Id?: number
/**
 * SKU Service Type ID.
 */
SkuServiceTypeId: number
/**
 * SKU Service Value name. Maximum of 100 characters.
 */
Name: string
/**
 * SKU Service Value value.
 */
Value: number
/**
 * SKU Service Value cost.
 */
Cost: number
}
export interface SKUSpecificationResponse {
/**
 * ID of the association of the specification and the SKU. This ID is used to update or delete the specification.
 */
Id?: number
/**
 * SKU ID.
 */
SkuId?: number
/**
 * Specification field ID.
 */
FieldId?: number
/**
 * Specification Value ID. Required only for `FieldTypeId` as `5`, `6` and `7`.
 */
FieldValueId?: number
/**
 * Value of specification. Only for `FieldTypeId` different from `5`, `6` and `7`.
 */
Text?: string
}
export interface GetCategoryTree {
/**
 * Category ID.
 */
id: number
/**
 * Category name.
 */
name: string
/**
 * If the category has a category child (`true`) or not (`false`).
 */
hasChildren: boolean
/**
 * Category URL.
 */
url: string
/**
 * Array with information about the category's children.
 */
children: GetCategoryTreeChild[]
/**
 * Category page title.
 */
Title: string
/**
 * Category page Meta tag description.
 */
MetaTagDescription: string
}
export interface GetCategoryTreeChild {
/**
 * Category ID.
 */
id: number
/**
 * Category name.
 */
name: string
/**
 * If the category has a category child (`true`) or not (`false`).
 */
hasChildren: boolean
/**
 * Category URL.
 */
url: string
/**
 * Array with information about the category's children.
 */
children: any[]
/**
 * Category page title.
 */
Title: string
/**
 * Category page Meta tag description.
 */
MetaTagDescription: string
}
export interface Category {
/**
 * Category ID.
 */
Id: number
/**
 * Category name.
 */
Name: string
/**
 * ID of the father category, apply in case of category and subcategory.
 */
FatherCategoryId: number
/**
 * Category page title.
 */
Title: string
/**
 * Describes details about the category.
 */
Description: string
/**
 * Substitutes words for the category.
 */
Keywords: string
/**
 * Shows if the category is active (`true`) or not (`false`).
 */
IsActive: boolean
/**
 * @deprecated
 * This is a legacy field. Do not take this information into consideration.
 */
LomadeeCampaignCode: string
/**
 * @deprecated
 * This is a legacy field. Do not take this information into consideration.
 */
AdWordsRemarketingCode: string
/**
 * Defines if the category is shown on side and upper menu (`true`) or not (`false`).
 */
ShowInStoreFront: boolean
/**
 * Defines if the category has brand filter (`true`) or not (`false`).
 */
ShowBrandFilter: boolean
/**
 * Defines if the Category has an active link on the website (`true`) or not (`false`).
 */
ActiveStoreFrontLink: boolean
/**
 * Google Global Category ID.
 */
GlobalCategoryId: number
/**
 * Defines how the SKU will be exhibited.
 */
StockKeepingUnitSelectionMode: string
/**
 * Score for search ordination.
 */
Score: number
/**
 * Text Link.
 */
LinkId: string
/**
 * Defines if the category has child categories (`true`) or not (`false`).
 */
HasChildren: boolean
}
export interface CreateCategoryRequest {
/**
 * Category unique identifier. If not informed, it will be automatically generated by VTEX.
 */
Id?: number
/**
 * Category name.
 */
Name: string
/**
 * Substitute words for the Category.
 */
Keywords: string
/**
 * Text used in title tag for Category page.
 */
Title: string
/**
 * Text used in meta description tag for Category page.
 */
Description: string
/**
 * @deprecated
 * This is a legacy field. Do not take this information into consideration.
 */
AdWordsRemarketingCode: string
/**
 * @deprecated
 * This is a legacy field. Do not take this information into consideration.
 */
LomadeeCampaignCode: string
/**
 * ID of the parent category, apply in case of category and subcategory.
 */
FatherCategoryId: number
/**
 * Google Global Category ID.
 */
GlobalCategoryId: number
/**
 * If true, the Category is shown in the top and side menu.
 */
ShowInStoreFront: boolean
/**
 * If true, the Category page becomes available in store.
 */
IsActive: boolean
/**
 * If true, the Category link becomes active in store.
 */
ActiveStoreFrontLink: boolean
/**
 * If true, the Category page displays a Brand filter.
 */
ShowBrandFilter: boolean
/**
 * Score for search sorting order.
 */
Score: number
/**
 * Defines how the SKU will be exhibited
 */
StockKeepingUnitSelectionMode: string
}
/**
 * Object containing Brand information.
 */
export interface BrandGet {
/**
 * Brand's unique numerical identifier.
 */
id: number
/**
 * Brand name.
 */
name: string
/**
 * Defines if the brand is active (`true`) or not (`false`).
 */
isActive: boolean
/**
 * Meta Title for the Brand page.
 */
title: string
/**
 * Meta Description for the Brand page. A brief description of the brand, displayed by search engines. Since search engines can only display less than 150 characters, we recommend not exceeding this character limit when creating the description.
 */
metaTagDescription: string
/**
 * URL of the brand's image.
 */
imageUrl: string
}
/**
 * Object containing Brand information.
 */
export interface BrandCreateUpdate {
/**
 * Brand's unique numerical identifier.
 */
Id: number
/**
 * Brand name.
 */
Name: string
/**
 * Meta Description for the Brand page. A brief description of the brand, displayed by search engines. Since search engines can only display less than 150 characters, we recommend not exceeding this character limit when creating the description.
 */
Text?: string
/**
 * Store Framework - Deprecated.
 * Legacy CMS Portal - Alternative search terms that will lead to the specific brand. The user can find the desired brand even when misspelling it. Used especially when words are of foreign origin and have a distinct spelling that is transcribed into a generic one, or when small spelling mistakes occur.
 * 
 */
Keywords?: string
/**
 * Meta Title for the Brand page.
 */
SiteTitle?: string
/**
 * @deprecated
 * This is a legacy field. Do not take this information into consideration.
 */
AdWordsRemarketingCode?: string
/**
 * @deprecated
 * This is a legacy field. Do not take this information into consideration.
 */
LomadeeCampaignCode?: string
/**
 * Store Framework - Deprecated
 * Legacy CMS Portal - Value used to set the priority on the search result page.
 * 
 */
Score?: number
/**
 * Store Framework - Deprecated.
 * Legacy CMS Portal - Defines if the Brand appears in the Department Menu control (`<vtex.cmc:departmentNavigator/>`).
 * 
 */
MenuHome?: boolean
/**
 * Defines if the brand is active (`true`) or not (`false`).
 */
Active?: boolean
/**
 * Brand page slug. Only lowercase letters and hyphens (`-`) are allowed.
 */
LinkId?: string
}
export interface AttachmentResponse {
/**
 * Attachment ID.
 */
Id: number
/**
 * Attachment Name.
 */
Name: string
/**
 * Defines if the attachment is required or not.
 */
IsRequired: boolean
/**
 * Defines if the attachment is active or not.
 */
IsActive: boolean
/**
 * List of characteristics related to the attachment.
 */
Domains: {
/**
 * Attachment key name.
 */
FieldName?: string
/**
 * Maximum number of characters in the attachment key.
 */
MaxCaracters?: string
/**
 * Allowed key values.
 */
DomainValues?: string
}[]
}
export interface AttachmentRequest {
/**
 * Attachment Name.
 */
Name: string
/**
 * Defines if the attachment is required or not.
 */
IsRequired: boolean
/**
 * Defines if the attachment is active or not.
 */
IsActive: boolean
/**
 * List of characteristics related to the attachment.
 */
Domains: {
/**
 * Attachment key name.
 */
FieldName?: string
/**
 * Maximum number of characters in the attachment key.
 */
MaxCaracters?: string
/**
 * Allowed key values.
 */
DomainValues?: string
}[]
}
export interface SpecificationsInsertFieldRequest {
/**
 * Specification Field name. Limited to 100 characters.
 */
Name: string
/**
 * Category ID.
 */
CategoryId: number
/**
 * Specification Field ID.
 */
FieldId: number
/**
 * Defines if the Specification Field is active. The default value is `true`.
 */
IsActive: boolean
/**
 * Makes the Specification Field mandatory (`true`) or optional (`false`).
 */
IsRequired: boolean
/**
 * Specification Field Type ID.
 */
FieldTypeId: number
/**
 * Specification Field Value ID.
 */
FieldValueId: number
/**
 * Specification Field Description.
 */
Description: string
/**
 * If `true`, it will be added as a SKU specification. If `false`, it will be added as a product specification field.
 */
IsStockKeepingUnit: boolean
/**
 * Store Framework - Deprecated.
 * Legacy CMS Portal - To allow the specification to be used as a facet (filter) on the search navigation bar.
 * 
 */
IsFilter: boolean
/**
 * Store Framework - Deprecated.
 * Legacy CMS Portal -If specification is visible on the product page.
 * 
 */
IsOnProductDetails: boolean
/**
 * Specification Field Position.
 */
Position: number
/**
 * @deprecated
 * Deprecated field.
 */
IsWizard: boolean
/**
 * Store Framework - Deprecated.
 * Legacy CMS Portal - To make the specification visible in the store's upper menu.
 * 
 */
IsTopMenuLinkActive: boolean
/**
 * Store Framework - Deprecated.
 * Legacy CMS Portal - To make the specification field clickable in the search navigation bar.
 * 
 */
IsSideMenuLinkActive: boolean
/**
 * Specification Field default Value.
 */
DefaultValue: string
/**
 * Specification Field Group ID.
 */
FieldGroupId: number
/**
 * Specification Field Group Name.
 */
FieldGroupName: string
}
export interface SpecificationsInsertFieldUpdateRequest {
/**
 * Specification Field ID.
 */
Name: string
/**
 * Category ID.
 */
CategoryId: number
/**
 * Specification Field ID.
 */
FieldId: number
/**
 * Enables(`true`) or disables (`false`) the Specification Field.
 */
IsActive: boolean
/**
 * Makes the Specification Field mandatory (`true`) or optional (`false`).
 */
IsRequired: boolean
/**
 * Specification Field Type ID.
 */
FieldTypeId: number
/**
 * Specification Field Value ID.
 */
FieldValueId?: number
/**
 * Specification Field Description.
 */
Description: string
/**
 * If `true`, it will be added as a SKU specification field. If `false`, it will be added as a product specification field.
 */
IsStockKeepingUnit: boolean
/**
 * Store Framework - Deprecated.
 * Legacy CMS Portal - To allow the specification to be used as a facet (filter) on the search navigation bar.
 * 
 */
IsFilter: boolean
/**
 * Store Framework - Deprecated.
 * Legacy CMS Portal -If specification is visible on the product page.
 * 
 */
IsOnProductDetails: boolean
/**
 * Specification Field Position.
 */
Position: number
/**
 * @deprecated
 * Deprecated field.
 */
IsWizard: boolean
/**
 * Store Framework - Deprecated.
 * Legacy CMS Portal - To make the specification visible in the store's upper menu.
 * 
 */
IsTopMenuLinkActive: boolean
/**
 * Store Framework - Deprecated.
 * Legacy CMS Portal - To make the specification field clickable in the search navigation bar.
 * 
 */
IsSideMenuLinkActive: boolean
/**
 * Specification Field default Value.
 */
DefaultValue: string
/**
 * Specification Field Group ID.
 */
FieldGroupId: number
/**
 * Specification Field Group Name.
 */
FieldGroupName: string
}
export interface GetSpecFieldValue {
/**
 * Specification Field Value ID.
 */
FieldValueId: number
/**
 * Specification Field Value.
 */
Value: string
/**
 * Defines if the Specification Field is active (`true`) or inactive (`false`).
 */
IsActive: boolean
/**
 * Specification Field Value Position.
 */
Position: number
}
export interface SpecificationsInsertFieldValueRequest {
/**
 * Specification Field ID.
 */
FieldId: number
/**
 * Specification Field Value Name.
 */
Name: string
/**
 * Specification Field Value Description.
 */
Text: string
/**
 * Defines if the Specification Field Value is active (`true`) or inactive (`false`).
 */
IsActive: boolean
/**
 * Specification Field Value Position.
 */
Position: number
}
export interface SpecificationsUpdateFieldValueRequest {
/**
 * Specification Field ID.
 */
FieldId: number
/**
 * Specification Field Value Name.
 */
Name: string
/**
 * Specification Field Value Description.
 */
Text: string
/**
 * Defines if the Specification Field Value is active (`true`) or inactive (`false`).
 */
IsActive: boolean
/**
 * Specification Field Position.
 */
Position: number
}
export interface SpecificationsGroup {
/**
 * Category ID.
 */
CategoryId: number
/**
 * Specification Group ID.
 */
Id: number
/**
 * Specification Group Name.
 */
Name: string
/**
 * Specification Group Position.
 */
Position: number
}
export interface SpecificationGroupInsertRequest {
/**
 * Category ID.
 */
CategoryId: number
/**
 * Specification Group Name.
 */
Name: string
}
export interface CreateSellerRequest {
/**
 * Code used to identify the seller. It is assigned by the marketplace. We recommend filling it in with the seller's account name.
 */
SellerId: string
/**
 * Name of the account in the seller's environment. You can find it on **Account settings > Account > Account Name**). Applicable only if the seller uses their own payment method.
 */
Name: string
/**
 * Email of the admin responsible for the seller.
 */
Email: string
/**
 * Text describing the seller with a marketing tone. You can display this text in the marketplace window display by [customizing the CMS](https://help.vtex.com/en/tutorial/list-of-controls-for-templates--tutorials_563).
 */
Description: string
/**
 * Text describing the exchange and return policy previously agreed between the marketplace and the seller.
 */
ExchangeReturnPolicy: string
/**
 * Text describing the delivery policy previously agreed between the marketplace and the seller.
 */
DeliveryPolicy: string
/**
 * Allows customers to use gift cards from the seller to buy their products on the marketplace. It identifies purchases made with a gift card so that only the final price (with discounts applied) is paid to the seller.
 */
UseHybridPaymentOptions: boolean
/**
 * Seller username.
 */
UserName: string
/**
 * Seller password.
 */
Password: string
/**
 * Text describing the security policy previously agreed between the marketplace and the seller.
 */
SecutityPrivacyPolicy: string
/**
 * Company registration number.
 */
CNPJ: string
/**
 * CSC identification.
 */
CSCIdentification: string
/**
 * Seller archive ID.
 */
ArchiveId: number
/**
 * Seller URL logo.
 */
UrlLogo: string
/**
 * The percentage that must be filled in as agreed between the marketplace and the seller. If there is no such commission, please fill in the field with the value: `0.00`.
 */
ProductCommissionPercentage: number
/**
 * The percentage that must be filled in as agreed between the marketplace and the seller. If there is no such commission, please fill in the field with the value: `0.00`.
 */
FreightCommissionPercentage: number
/**
 * The percentage that must be filled in as agreed between the marketplace and the seller. If there is no such commission, please fill in the field with the value: `0.00`.
 */
CategoryCommissionPercentage?: string
/**
 * URL of the endpoint for fulfillment of seller's orders, which the marketplace will use to communicate with the seller. This field applies to all sellers, regardless of their type. However, for `VTEX Stores`, you don’t need to fill it in because the system will do that automatically. You can edit this field once the seller has been successfully added.
 */
FulfillmentEndpoint: string
/**
 * URL of the endpoint of the seller's catalog. This field will only be displayed if the seller type is VTEX Store. The field format will be as follows: `http://{sellerName}.vtexcommercestable.com.br/api/catalog_system/`.
 */
CatalogSystemEndpoint: string
/**
 * If the selle is active (`true`) or not (`false`).
 */
IsActive: boolean
/**
 * Name of the marketplace, used to guide payments. This field should be nulled if the marketplace is responsible for processing payments. Check out our [Split Payment](https://help.vtex.com/en/tutorial/split-payment--6k5JidhYRUxileNolY2VLx) article to know more.
 */
MerchantName?: string
/**
 * Identification code of the seller responsible for fulfilling the order. This is an optional field used when a seller sells SKUs from another seller. If the seller sells their own SKUs, it must be left blank.
 */
FulfillmentSellerId: number
/**
 * Seller type.
 */
SellerType: number
/**
 * Indicates whether it is a [comprehensive seller](https://help.vtex.com/en/tutorial/comprehensive-seller--5Qn4O2GpjUIzWTPpvLUfkI).
 */
IsBetterScope: boolean
/**
 * Seller trust policy. The default value is `'Default'`, but if your store is a B2B marketplace and you want to share the customers'emails with the sellers you need to set this field as `'AllowEmailSharing'`.
 */
TrustPolicy?: string
}
export interface UpdateSellerRequest {
/**
 * ID that identifies the seller in the marketplace. It can be the same as the seller name or a unique number. Check the **Sellers management** section in the Admin to get the correct ID.
 */
SellerId: string
/**
 * Name of the account in the seller's environment. You can find it on **Account settings > Account > Account Name**). Applicable only if the seller uses their own payment method.
 */
Name: string
/**
 * Email of the admin responsible for the seller.
 */
Email: string
/**
 * Text describing the seller with a marketing tone. You can display this text in the marketplace window display by [customizing the CMS](https://help.vtex.com/en/tutorial/list-of-controls-for-templates--tutorials_563).
 */
Description: string
/**
 * Text describing the exchange and return policy previously agreed between the marketplace and the seller.
 */
ExchangeReturnPolicy: string
/**
 * Text describing the delivery policy previously agreed between the marketplace and the seller.
 */
DeliveryPolicy: string
/**
 * Allows customers to use gift cards from the seller to buy their products on the marketplace. It identifies purchases made with a gift card so that only the final price (with discounts applied) is paid to the seller.
 */
UseHybridPaymentOptions: boolean
/**
 * Seller username.
 */
UserName: string
/**
 * Seller password.
 */
Password: string
/**
 * Text describing the security policy previously agreed between the marketplace and the seller.
 */
SecutityPrivacyPolicy: string
/**
 * Company registration number.
 */
CNPJ: string
/**
 * CSC identification.
 */
CSCIdentification: string
/**
 * Seller archive ID.
 */
ArchiveId: number
/**
 * Seller URL logo.
 */
UrlLogo: string
/**
 * The percentage that must be filled in as agreed between the marketplace and the seller. If there is no such commission, please fill in the field with the value: `0.00`.
 */
ProductCommissionPercentage: number
/**
 * The percentage that must be filled in as agreed between the marketplace and the seller. If there is no such commission, please fill in the field with the value: `0.00`.
 */
FreightCommissionPercentage: number
/**
 * The percentage that must be filled in as agreed between the marketplace and the seller. If there is no such commission, please fill in the field with the value: `0.00`.
 */
CategoryCommissionPercentage?: string
/**
 * URL of the endpoint for fulfillment of seller's orders, which the marketplace will use to communicate with the seller. This field applies to all sellers, regardless of their type. However, for `VTEX Stores`, you don’t need to fill it in because the system will do that automatically. You can edit this field once the seller has been successfully added.
 */
FulfillmentEndpoint: string
/**
 * URL of the endpoint of the seller's catalog. This field will only be displayed if the seller type is VTEX Store. The field format will be as follows: `http://{sellerName}.vtexcommercestable.com.br/api/catalog_system/`.
 */
CatalogSystemEndpoint: string
/**
 * If the selle is active (`true`) or not (`false`).
 */
IsActive: boolean
/**
 * Name of the marketplace, used to guide payments. This field should be nulled if the marketplace is responsible for processing payments. Check out our [Split Payment](https://help.vtex.com/en/tutorial/split-payment--6k5JidhYRUxileNolY2VLx) article to know more.
 */
MerchantName?: string
/**
 * Identification code of the seller responsible for fulfilling the order. This is an optional field used when a seller sells SKUs from another seller. If the seller sells their own SKUs, it must be left blank.
 */
FulfillmentSellerId: number
/**
 * Seller type.
 */
SellerType: number
/**
 * Indicates whether it is a [comprehensive seller](https://help.vtex.com/en/tutorial/comprehensive-seller--5Qn4O2GpjUIzWTPpvLUfkI).
 */
IsBetterScope: boolean
/**
 * Seller trust policy. The default value is `'Default'`, but if your store is a B2B marketplace and you want to share the customers'emails with the sellers you need to set this field as `'AllowEmailSharing'`.
 */
TrustPolicy?: string
}
export interface SupplierRequest {
/**
 * Supplier Name.
 */
Name: string
/**
 * Supplier Corporate Name.
 */
CorporateName: string
/**
 * State Inscription.
 */
StateInscription: string
/**
 * Corporate legal ID.
 */
Cnpj: string
/**
 * Supplier Phone.
 */
Phone: string
/**
 * Supplier Cellphone.
 */
CellPhone: string
/**
 * Supplier Corporate Phone.
 */
CorportePhone: string
/**
 * Supplier email.
 */
Email: string
/**
 * Defines if the Supplier is active (`true`) or not (`false`).
 */
IsActive: boolean
}
export interface SupplierResponse {
/**
 * Supplier unique identifier code.
 */
Id?: number
/**
 * Supplier Name.
 */
Name?: string
/**
 * Supplier Corporate Name.
 */
CorporateName?: string
/**
 * State Inscription.
 */
StateInscription?: string
/**
 * Corporate legal ID.
 */
Cnpj?: string
/**
 * Supplier Phone.
 */
Phone?: string
/**
 * Supplier Cellphone.
 */
CellPhone?: string
/**
 * Supplier Corporate Phone.
 */
CorportePhone?: string
/**
 * Supplier email.
 */
Email?: string
/**
 * Defines if the Supplier is active (`true`) or not (`false`).
 */
IsActive?: boolean
}
export interface PriceChangeRequest {
/**
 * The new price of the item.
 */
price: number
}
export interface SetsinglecustomfieldvalueRequest {
/**
 * The value you want to set to the specified field.
 */
value: string
}
export interface UpdateorderFormconfigurationRequest {
paymentConfiguration: PaymentConfiguration
/**
 * External tax service configuration.
 */
taxConfiguration: {
/**
 * Endpoint URL.
 */
url?: string
/**
 * Authorization header.
 */
authorizationHeader?: string
/**
 * Custom data ID sent to the tax system.
 */
appId?: string
}
/**
 * Minimum SKU quantity by cart.
 */
minimumQuantityAccumulatedForItems: number
/**
 * Number of price digits.
 */
decimalDigitsPrecision: number
/**
 * Minimum cart value.
 */
minimumValueAccumulated: number
/**
 * Array of objects containing Apps configuration information.
 */
apps: {
/**
 * App ID.
 */
id?: string
/**
 * Array of fields available to the app.
 */
fields?: string[]
/**
 * App major version.
 */
major?: number
}[]
/**
 * On the same purchase, allows the selection of items from multiple delivery channels.
 */
allowMultipleDeliveries: boolean
/**
 * Allows the editing of SKU prices right in the cart.
 */
allowManualPrice: boolean
/**
 * Allows the input of a limit of white label sellers involved on the cart.
 */
maxNumberOfWhiteLabelSellers?: number
/**
 * Allows, on a first purchase, masking client's data. It could be useful when a shared cart is used and the client doesn't want to share its data.
 */
maskFirstPurchaseData?: boolean
/**
 * Configures reCAPTCHA validation for the account, defining in which situations the shopper will be prompted to validate a purchase with reCAPTCHA. Learn more about [reCAPTCHA validation for VTEX stores](https://help.vtex.com/tutorial/recaptcha-no-checkout--18Te3oDd7f4qcjKu9jhNzP)
 * 
 * Possible values are:
 * - `"never"`: no purchases are validated with reCAPTCHA.
 * - `"always"`: every purchase is validated with reCAPTCHA.
 * - `"vtexCriteria"`: only some purchases are validated with reCAPTCHA in order to minimize friction and improve shopping experience. VTEX’s algorithm determines which sessions are trustworthy and which should be validated with reCAPTCHA. This is the recommended option.
 */
recaptchaValidation?: string
/**
 * Indicates whether authentication is required for completing purchases.
 */
requiresLoginToPlaceOrder?: boolean
/**
 * Minimum interval (in seconds) between successive purchases.
 */
minimumPurchaseDowntimeSeconds?: number
/**
 * Minimum cart existence period (in seconds) before allowing the use of a new credit card.
 */
cartAgeToUseNewCardSeconds?: number
/**
 * If you want to apply a first installment discount to a particular payment system, set this field to that payment system's ID. Learn more: [Configuring a discount for orders prepaid in full](https://help.vtex.com/en/tutorial/configurar-desconto-de-preco-a-vista--7Lfcj9Wb5dpYfA2gKkACIt).
 */
paymentSystemToCheckFirstInstallment?: string
}
/**
 * Payment Configuration object
 */
export interface PaymentConfiguration {
/**
 * Determines whether pre-authorized payments require authentication
 */
requiresAuthenticationForPreAuthorizedPaymentOption: boolean
/**
 * By default (when `false`), on a multi-seller purchase is on the run, a simple intersection with installments options configured by every seller will be available. When `true`, this option allows a more complex but flexible installment option, since it considers max installments of every seller configuration, even if those don't match. Installment values   may not be equal in this case.
 */
allowInstallmentsMerge?: boolean
}
export interface WaitingTime {
/**
 * Number of days after order cancelation by a seller, during which another seller may be assigned to fulfill the order.
 */
waitingTime: number
}
