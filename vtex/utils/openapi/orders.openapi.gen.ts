
// deno-fmt-ignore-file
// deno-lint-ignore-file no-explicit-any ban-types ban-unused-ignore
//
// DO NOT EDIT. This file is generated by deco.
// This file SHOULD be checked into source version control.
// To generate this file: deno task start
//        


/**
 * Information about the order totals.
 */
export type TotalsUpdated = {
/**
 * Total ID, which defines what the total is about.
 */
id?: ("Items" | "Discounts" | "Shipping" | "Tax")
/**
 * Total name.
 */
name?: string
/**
 * Total value in cents.
 */
value?: number
/**
 * Information about the order alternative totals, when applicable. For example, when there is a discount for items in the marketplace that results in a difference in the `Items` total value, the `alternativeTotals` can retrieve details about it.
 */
alternativeTotals?: {
/**
 * Alternative total ID, which can be related to items, discounts, shipping or taxes.
 */
id?: string
/**
 * Alternative total name.
 */
name?: string
/**
 * Alternative total value in cents.
 */
value?: number
}[]
}[]
/**
 * Information about the sellers associated with the order.
 */
export type SellersUpdated = {
/**
 * Seller identifier.
 */
id?: string
/**
 * Seller name.
 */
name?: string
/**
 * Seller logo URL.
 */
logo?: string
/**
 * URL of the endpoint for fulfillment of seller's orders, which the marketplace use to communicate with the seller.
 */
fulfillmentEndpoint?: string
}[]
/**
 * Information on order items.
 */
export type ItemsUpdated = {
/**
 * Order item unique ID.
 */
uniqueId?: string
/**
 * Item ID.
 */
id?: string
/**
 * Product ID.
 */
productId?: string
/**
 * European Article Number (EAN) of the item.
 */
ean?: string
/**
 * [Reservation](https://help.vtex.com/en/tutorial/how-does-reservation-work--tutorials_92) ID.
 */
lockId?: string
/**
 * Information about [attachments](https://help.vtex.com/en/tutorial/what-is-an-attachment--aGICk0RVbqKg6GYmQcWUm).
 */
attachments?: {
/**
 * Attachment name.
 */
name?: string
/**
 * Custom field for attachment content.
 */
content?: {
/**
 * Attachment custom field content.
 */
[k: string]: string
}
}[]
/**
 * Item quantity.
 */
quantity?: number
/**
 * Seller name. When the store acts both as marketplace and seller, this field corresponds to `1`, because every VTEX store is its own seller 1.
 */
seller?: string
/**
 * SKU name.
 */
name?: string
/**
 * Ref ID.
 */
refId?: string
/**
 * Item price in cents.
 */
price?: number
/**
 * List price in cents.
 */
listPrice?: number
/**
 * [Manual price](https://help.vtex.com/en/tutorial/change-the-price-of-an-item-in-the-shopping-cart--7Cd37aCAmtL1qmoZJJvjNf) in cents.
 */
manualPrice?: number
/**
 * ID of the user who applied the manual price.
 */
manualPriceAppliedBy?: string
/**
 * Information about price tags. A price tag is a price modifier, like s discount or a promotion applicable to the item in the order context.
 */
priceTags?: {
/**
 * Price tag name.
 */
name?: string
/**
 * Price tag value in cents. Discounts correspond to negative numbers.
 */
value?: number
/**
 * Defines if the price tag value is applied through a percentage (`true`) or not (`false`).
 */
isPercentual?: boolean
/**
 * Price tag identifier.
 */
identifier?: string
/**
 * Price tag raw value.
 */
rawValue?: number
/**
 * Price tag rate.
 */
rate?: number
/**
 * Juris code.
 */
jurisCode?: string
/**
 * Juris type.
 */
jurisType?: string
/**
 * Juris name.
 */
jurisName?: string
}[]
/**
 * Image URL.
 */
imageUrl?: string
/**
 * Detail URL.
 */
detailUrl?: string
/**
 * Item components.
 */
components?: string[]
/**
 * Information about services sold with the item. For example, a gift package.
 */
bundleItems?: {
/**
 * Service type.
 */
type?: string
/**
 * Service ID.
 */
id?: number
/**
 * Service name.
 */
name?: string
/**
 * Service price in cents.
 */
price?: number
}[]
/**
 * Array with information about params.
 */
params?: string[]
/**
 * Information about offerings, which are services related to the item. For example, a warranty or installation.
 */
offerings?: string[]
/**
 * Array containing attachments information.
 */
attachmentOfferings?: {
/**
 * Attachment name.
 */
name?: string
/**
 * Defines if the attachment is required (`true`) or not (`false`).
 */
required?: boolean
/**
 * Schema of the content declared in the field `attachmentOfferings`.
 */
schema?: {
/**
 * Attachment schema content.
 */
[k: string]: string
}
}[]
/**
 * Seller SKU ID.
 */
sellerSku?: string
/**
 * Item price expiration date and time in [ISO 8601 time zone offset format](https://learn.microsoft.com/en-us/rest/api/storageservices/formatting-datetime-values), as in `YYYY-MM-DDThh:mm:ssZ`.
 */
priceValidUntil?: string
/**
 * Commission value registered for the seller.
 */
commission?: number
/**
 * Tax value in cents.
 */
tax?: number
/**
 * Presale date and time in [ISO 8601 time zone offset format](https://learn.microsoft.com/en-us/rest/api/storageservices/formatting-datetime-values), as in `YYYY-MM-DDThh:mm:ssZ`.
 */
preSaleDate?: string
/**
 * Item additional information.
 */
additionalInfo?: {
/**
 * Item brand name.
 */
brandName?: string
/**
 * Item brand ID.
 */
brandId?: string
/**
 * Categories IDs.
 */
categoriesIds?: string
/**
 * Item [categories](https://help.vtex.com/tracks/catalog-101--5AF0XfnjfWeopIFBgs3LIQ/2gkZDjXRqfsq62TlAkj4uf) information.
 */
categories?: {
/**
 * Category ID.
 */
id?: number
/**
 * Category name.
 */
name?: string
}[]
/**
 * All product clusters related to the item.
 */
productClusterId?: string
/**
 * Commercial condition ID.
 */
commercialConditionId?: string
dimension?: Dimension
/**
 * Offering information.
 */
offeringInfo?: string
/**
 * Offering type.
 */
offeringType?: string
/**
 * Offering type ID.
 */
offeringTypeId?: string
}
/**
 * Item measurement unit.
 */
measurementUnit?: string
/**
 * Item unit multiplier.
 */
unitMultiplier?: number
/**
 * Selling price in cents. This field can present rounding discrepancies, so we recommend retrieving pricing information from the `priceDefinition` field.
 */
sellingPrice?: number
/**
 * Defines it the item is a gift (`true`) or not (`false`).
 */
isGift?: boolean
/**
 * Item shipping price in cents. This value does not account for the order total shipping price.
 */
shippingPrice?: number
/**
 * Reward value in cents.
 */
rewardValue?: number
/**
 * Freight commission value in cents.
 */
freightCommission?: number
/**
 * Item price information.
 */
priceDefinition?: {
/**
 * Item selling prices.
 */
sellingPrices?: {
/**
 * Item selling price value in cents.
 */
value?: number
/**
 * Item quantity.
 */
quantity?: number
}[]
/**
 * Item calculated selling price in cents.
 */
calculatedSellingPrice?: number
/**
 * Item total price in cents.
 */
total?: number
/**
 * Item price definition reason.
 */
reason?: string
}
/**
 *  Item tax code.
 */
taxCode?: string
/**
 * Ranking number that shows how related items are indexed in between each other. It starts at `0` as the primary item reference and counts up to `1`, `2`, and so on. For example, a customer bought sunglasses and hired a warranty service. Since the sunglasses are index `0`, the warranty service (the [assembly option](https://help.vtex.com/en/tutorial/assembly-options--5x5FhNr4f5RUGDEGWzV1nH)) is index `1` and has the `parentItemIndex` value `0`. This response is `null` for items that are not assembly options.
 */
parentItemIndex?: number
/**
 * When items are indexed in between each other, this field returns the assembly option ID. This response is `null` for items that are not [assembly options](https://help.vtex.com/en/tutorial/assembly-options--5x5FhNr4f5RUGDEGWzV1nH).
 */
parentAssemblyBinding?: string
/**
 * Identification code of the call center operator that sold the item, when applicable.
 */
callCenterOperator?: string
/**
 * @deprecated
 * This field identifies the order in the `handling` status in the workflow, and it was used for VTEX internal control.
 */
serialNumbers?: string
/**
 * Information about the item customization, when applicable.
 */
assemblies?: string[]
/**
 * Item cost price in cents.
 */
costPrice?: number
}[]
/**
 * Information about the [seller order cancellation denials](https://developers.vtex.com/docs/guides/order-canceling-improvements), regardless if the cancellation request was made by the marketplace or the customer.
 */
export type CancellationRequestsUpdated = {
/**
 * ID that identifies the original cancellation operation made by the marketplaces or its customer care service using the [Cancel order](https://developers.vtex.com/docs/api-reference/orders-api#post-/api/oms/pvt/orders/-orderId-/cancel) endpoint.
 */
id?: string
/**
 * Reason why there was a request to cancel the order.
 */
reason?: string
/**
 * Date of when the order cancellation request was processed by the platform. The date format is [ISO 8601 time zone offset](https://learn.microsoft.com/en-us/rest/api/storageservices/formatting-datetime-values), as in `YYYY-MM-DDThh:mm:ssZ`.
 */
cancellationRequestDate?: string
/**
 * Defines if the order cancellation was requested by the customer (`true`) or not (`false`).
 */
requestedByUser?: boolean
/**
 * Defines if the order cancellation request was [denied by the seller](https://developers.vtex.com/docs/guides/order-canceling-improvements) (`true`) or accepted by the seller (`false`).
 */
deniedBySeller?: boolean
/**
 * Reason given by the seller for denying the order cancellation.
 */
deniedBySellerReason?: string
/**
 * Date of when the platform processed the seller denial to an order cancellation request. The date format is [ISO 8601 time zone offset](https://learn.microsoft.com/en-us/rest/api/storageservices/formatting-datetime-values), as in `YYYY-MM-DDThh:mm:ssZ`.
 */
cancellationRequestDenyDate?: string
}[]

export interface OpenAPI {
/**
 * Retrieves order details by searching by order ID or sequence number.
 * 
 * >⚠️ Throttling: Each VTEX account can make up to 6000 requests per minute.
 * 
 * > You can only access information from orders created in the last two years, and that same period is valid for customers through [My Account](https://help.vtex.com/en/tutorial/how-my-account-works--2BQ3GiqhqGJTXsWVuio3Xh).
 * 
 * >Check the [Orders onboarding guide](https://developers.vtex.com/vtex-rest-api/docs/orders-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Orders and is organized by focusing on the developer's journey.
 * 
 * ## Permissions
 * 
 * Any user or [application key](https://developers.vtex.com/docs/guides/api-authentication-using-application-keys) must have at least one of the appropriate [License Manager resources](https://help.vtex.com/en/tutorial/license-manager-resources--3q6ztrC8YynQf6rdc6euk3) to be able to successfully run this request. Otherwise they will receive a status code `403` error. These are the applicable resources for this endpoint:
 * 
 * | **Product** | **Category** | **Resource** |
 * | --------------- | ----------------- | ----------------- |
 * | OMS | OMS access | **View order** |
 * | Checkout         | CheckoutResources | **Orders Full Access** |
 * 
 * You can [create a custom role](https://help.vtex.com/en/tutorial/roles--7HKK5Uau2H6wxE1rH5oRbc#creating-a-role) with that resource or use one of the following [predefined roles](https://help.vtex.com/en/tutorial/predefined-roles--jGDurZKJHvHJS13LnO7Dy):
 * 
 * | **Role** | **Resource** | 
 * | --------------- | ----------------- | 
 * | OMS - Full access | View order |
 * | Checkout Admin | View order |
 * | IntegrationProfile - Fulfillment Oms | View order |
 * | OMS - Full access | Orders Full Access |
 * | Checkout Admin | Orders Full Access |
 * | IntegrationProfile - Fulfillment Oms | Orders Full Access |
 * 
 * >❗ Assigning a [predefined role](https://help.vtex.com/en/tutorial/predefined-roles--jGDurZKJHvHJS13LnO7Dy) to users or application keys usually grants permission to multiple [License Manager resources](https://help.vtex.com/en/tutorial/license-manager-resources--3q6ztrC8YynQf6rdc6euk3). If some of these permissions are not necessary, consider creating a custom role instead. For more information regarding security, see [Best practices for using application keys](https://help.vtex.com/en/tutorial/best-practices-application-keys--7b6nD1VMHa49aI5brlOvJm). To learn more about machine authentication at VTEX, see [Authentication overview](https://developers.vtex.com/docs/guides/authentication).
 */
"GET /api/oms/pvt/orders/:orderId": {
response: {
/**
 * Order ID.
 */
orderId?: string
/**
 * Sequence number part of the order ID. For example, in order `v70530116str-01`, the sequence is `70530116`.
 */
sequence?: string
/**
 * Marketplace order ID.
 */
marketplaceOrderId?: string
/**
 * Endpoint provided by the marketplace for post purchase communication.
 */
marketplaceServicesEndpoint?: string
/**
 * Seller order ID.
 */
sellerOrderId?: string
/**
 * Order's [origin in the order flow](https://developers.vtex.com/docs/guides/orders-overview#understanding-order-flow-types).
 */
origin?: ("Marketplace" | "Fulfillment" | "Chain")
/**
 * Three-letter [affiliate](https://help.vtex.com/en/tutorial/configuring-affiliates--tutorials_187) code configured by the seller to identify a marketplace.
 */
affiliateId?: string
/**
 * Sales channel (or [trade policy](https://help.vtex.com/en/tutorial/how-trade-policies-work--6Xef8PZiFm40kg2STrMkMV)) ID related to the order.
 */
salesChannel?: string
/**
 * For a VTEX store, the merchant's name will be the same as the account name. An external seller can have a `merchantName`, but it will not be an account name.
 */
merchantName?: (null | string)
/**
 * [Order status](https://help.vtex.com/en/tutorial/order-flow-and-status--tutorials_196) in the workflow.
 */
status?: string
/**
 * Indicates if the order processing in the workflow presents an error that cannot be solved by automatic retry (`true`), or if there are no processing errors (`false`).
 */
workflowIsInError?: boolean
/**
 * @deprecated
 * Status description displayed on the VTEX Admin. This field is obsolete and may not return any value.
 */
statusDescription?: string
/**
 * Order total value in cents.
 */
value?: number
/**
 * Order creation date in [ISO 8601 time zone offset format](https://learn.microsoft.com/en-us/rest/api/storageservices/formatting-datetime-values), as in `YYYY-MM-DDThh:mm:ssZ`.
 */
creationDate?: string
/**
 * Order last change date in [ISO 8601 time zone offset format](https://learn.microsoft.com/en-us/rest/api/storageservices/formatting-datetime-values), as in `YYYY-MM-DDThh:mm:ssZ`.
 */
lastChange?: string
/**
 * Order group ID, a segment of the order ID that groups all orders related to the same purchase. For example, in the order ID `v71021570str-02`), the order group ID is `v71021570str`.
 */
orderGroup?: string
/**
 * Email of the store employee responsible for managing the order.
 */
followUpEmail?: string
/**
 * Last transactional message sent to the customer.
 */
lastMessage?: (null | string)
/**
 * Main [account name](https://help.vtex.com/en/tutorial/what-is-an-account-name--i0mIGLcg3QyEy8OCicEoC).
 */
hostname?: string
/**
 * Defines if the order payment has been settled (`true`) or not (`false`).
 */
isCompleted?: boolean
/**
 * Rounding error total value in cents, when applicable. For example, in orders with discounts on non-integer multiplier items, rounding is applied per item, not after the sum of all items, which can result in a difference in the total discount value.
 */
roundingError?: number
/**
 * Unique identifier of the [orderForm](https://developers.vtex.com/docs/guides/orderform-fields).
 */
orderFormId?: string
/**
 * Defines if order cancellation is allowed (`true`) or not anymore (`false`).
 */
allowCancellation?: boolean
/**
 * Defines if the order can be edited (`true`) or not anymore (`false`).
 */
allowEdition?: boolean
/**
 * Defines if the order was placed via [VTEX Sales App](https://help.vtex.com/en/tracks/instore-getting-started-and-setting-up--zav76TFEZlAjnyBVL5tRc) (`true`) or not (`false`).
 */
isCheckedIn?: boolean
/**
 * Order authorization date in [ISO 8601 time zone offset format](https://learn.microsoft.com/en-us/rest/api/storageservices/formatting-datetime-values), as in `YYYY-MM-DDThh:mm:ssZ`.
 */
authorizedDate?: (null | string)
/**
 * Order invoice date in [ISO 8601 time zone offset format](https://learn.microsoft.com/en-us/rest/api/storageservices/formatting-datetime-values), as in `YYYY-MM-DDThh:mm:ssZ`.
 */
invoicedDate?: (null | string)
/**
 * Reason for order cancellation.
 */
cancelReason?: (null | string)
/**
 * When the order is created at a physical store which is configured as a pickup point, this field retrieves the pickup point ID.
 */
checkedInPickupPointId?: (null | string)
totals?: TotalsUpdated
sellers?: SellersUpdated
clientPreferencesData?: ClientPreferencesDataUpdated
/**
 * Information about [order cancellation](https://developers.vtex.com/docs/guides/order-canceling-improvements), when applicable.
 */
cancellationData?: (null | {
/**
 * Indicates if the order cancellation was requested by the customer (`true`) or not (`false`).
 */
RequestedByUser?: (null | boolean)
/**
 * Indicates if the order cancellation was made by the system (`true`) or not (`false`). This type of order cancellation happens in [incomplete orders](https://help.vtex.com/en/tutorial/how-incomplete-orders-work--tutorials_294), for example.
 */
RequestedBySystem?: (null | boolean)
/**
 * Indicates if the order cancellation was requested by the seller (`true`) or not (`false`).
 */
RequestedBySellerNotification?: (null | boolean)
/**
 * Indicates if the order cancellation was requested by the payment gateway (`true`) or not (`false`).
 */
RequestedByPaymentNotification?: (null | boolean)
/**
 * Reason why the order was canceled.
 */
Reason?: (null | string)
/**
 * Order cancellation date in [UTC ISO 8601 format](https://learn.microsoft.com/en-us/rest/api/storageservices/formatting-datetime-values), as in `YYYY-MM-DDThh:mm:ssZ`.
 */
CancellationDate?: (null | string)
})
taxData?: TaxDataUpdated
/**
 * Information about [subscriptions](https://help.vtex.com/tutorial/how-subscriptions-work--frequentlyAskedQuestions_4453), when applicable.
 */
subscriptionData?: (null | {
/**
 * ID of the subscription group. If this field returns `null` and the `ExecutionCount` is `0`, the order is the first creating the subscription.
 */
SubscriptionGroupId?: (null | string)
/**
 * List with subscriptions details.
 */
Subscriptions?: (null | {
/**
 * Position of the order in the subscription cycle. The first order will have the value `0`, the second will have the value `1`, and so on.
 */
ExecutionCount?: number
/**
 * @deprecated
 * Value of the order when the customer signed up for subscriptions. Subscriptions created via Admin or APIs do not have an original order, so the field returns `0.0`. This field was valid only for Subscriptions v2 and is deprecated in Subscriptions v3.
 */
PriceAtSubscriptionDate?: (null | number)
/**
 * Each item in the subscription order is identified by an index. The position starts in `0`, followed by `1`, `2`, and so on.
 */
ItemIndex?: number
/**
 * Information about the [subscription plan](https://help.vtex.com/en/tutorial/subscription-plans-beta--5kczKRqHEsrs1tYtRcY8wR).
 */
Plan?: {
/**
 * Type of plan.
 */
type?: string
/**
 * Information about the subscription recurrence.
 */
frequency?: {
/**
 * Defines the subscription recurrence period.
 */
periodicity?: ("DAY" | "WEEK" | "MONTH" | "YEAR")
/**
 * Time interval configured between subscription orders, which depends on the `periodicity` field. For a `DAY` periodicity, this value will correspond to days, for `MONTH` to months, and so on.
 */
interval?: number
}
/**
 * Information about the period during which the subscription will be valid.
 */
validity?: {
/**
 * Subscription beginning date in [ISO 8601 time zone offset format](https://learn.microsoft.com/en-us/rest/api/storageservices/formatting-datetime-values), as in `YYYY-MM-DDThh:mm:ssZ`.
 */
begin?: string
/**
 * Subscription end date in [ISO 8601 time zone offset format](https://learn.microsoft.com/en-us/rest/api/storageservices/formatting-datetime-values), as in `YYYY-MM-DDThh:mm:ssZ`.
 */
end?: (null | string)
}
}
}[])
})
/**
 * Metadata information about the order's items.
 */
itemMetadata?: {
/**
 * List of order items' metadata.
 */
Items?: {
/**
 * Unique numerical identifier of the SKU.
 */
Id?: string
/**
 * Unique identifier of the SKU seller.
 */
Seller?: string
/**
 * Name of the item as displayed to customers in the storefront.
 */
Name?: string
/**
 * Name of the SKU corresponding to the item.
 */
SkuName?: string
/**
 * ID of the product associated with the item.
 */
ProductId?: string
/**
 * SKU reference ID.
 */
RefId?: string
/**
 * SKU EAN.
 */
Ean?: string
/**
 * SKU image URL.
 */
ImageUrl?: string
/**
 * SKU slug.
 */
DetailUrl?: string
/**
 * [Assembly options](https://help.vtex.com/en/tutorial/assembly-options--5x5FhNr4f5RUGDEGWzV1nH) information related to the item, if there are any.
 */
AssemblyOptions?: (null | {
/**
 * Assembly option ID.
 */
Id?: string
/**
 * Assembly option name.
 */
Name?: string
/**
 * If this field is set as `true`, when the customer purchases the item sending the attachment is required, and when set as `false`, sending the attachment is optional.
 */
Required?: boolean
/**
 * Assembly option content.
 */
InputValues?: (null | {
[k: string]: any
})
/**
 * Assembly option composition.
 */
Composition?: (null | {
[k: string]: any
})
}[])
}[]
}
marketplace?: MarketplaceUpdated
storePreferencesData?: StorePreferencesDataUpdated
/**
 * [Customizable fields](https://developers.vtex.com/docs/guides/add-and-handle-custom-information-in-the-order) created by the store for the shopping cart. This field is useful for storing data not included in other fields. For example, a message for a gift or a name to be printed in a shirt.
 */
customData?: (null | {
/**
 * Customizable apps created by the store.
 */
customApps?: (null | (null | string)[])
})
/**
 * Information about commercial conditions.
 */
commercialConditionData?: (null | string)
/**
 * Optional field for additional information.
 */
openTextField?: (null | {
/**
 * Additional information.
 */
[k: string]: string
})
invoiceData?: InvoiceDataUpdated
changesAttachment?: ChangesAttachmentUpdated
callCenterOperatorData?: CallCenterOperatorDataUpdated
/**
 * Information about shipping packages, created after order invoicing.
 */
packageAttachment?: (null | {
/**
 * List with packages' information.
 */
packages?: {
/**
 * Information about package items.
 */
items?: {
/**
 * Package item index nunmber.
 */
itemIndex?: number
/**
 * Package item quantity.
 */
quantity?: number
/**
 * Package item price in cents.
 */
price?: number
/**
 * Package item description.
 */
description?: (null | string)
/**
 * Package item unit multiplier.
 */
unitMultiplier?: (null | number)
}[]
/**
 * Name of the [carrier](https://help.vtex.com/en/tutorial/carriers-on-vtex--7u9duMD5UQa2QQwukAWMcE) responsible for the package shipping.
 */
courier?: (null | string)
/**
 * Unique identification code of the package invoice.
 */
invoiceNumber?: string
/**
 * Package invoice value in cents.
 */
invoiceValue?: number
/**
 * Package invoice URL.
 */
invoiceUrl?: (null | string)
/**
 * Package invoice issuance date in [ISO 8601 time zone offset format](https://learn.microsoft.com/pt-br/rest/api/storageservices/formatting-datetime-values), as in `YYYY-MM-DD hh:mm:ss[.nnnnnnn]+hh:mm`.
 */
issuanceDate?: string
/**
 * Package [tracking number](https://developers.vtex.com/docs/api-reference/orders-api#patch-/api/oms/pvt/orders/-orderId-/invoice/-invoiceNumber-).
 */
trackingNumber?: (null | string)
/**
 * Package invoice key.
 */
invoiceKey?: (null | string)
/**
 * Package tracking URL.
 */
trackingUrl?: (null | string)
/**
 * Package invoice text in [xml format](https://help.vtex.com/en/tutorial/configuring-xml--tutorials_242). This field is important for stores integrated with [external marketplaces](https://developers.vtex.com/docs/guides/external-marketplace-integration-guide).
 */
embeddedInvoice?: string
/**
 * Package invoice type, which can be:
 * - `Output`: Selling order invoice.
 * - `Input`: Returning items invoice.
 */
type?: ("Output" | "Input")
/**
 * [Carrier](https://help.vtex.com/en/tutorial/carriers-on-vtex--7u9duMD5UQa2QQwukAWMcE) package shipping information.
 */
courierStatus?: (null | {
/**
 * Defines if a carrier was assigned for order shipping (`ok`) or not (`null`).
 */
status?: (null | string)
/**
 * Defines if the carrier has already delivered the package (`true`) or not (`false`).
 */
finished?: boolean
/**
 * Package delivery date in [ISO 8601 time zone offset format](https://learn.microsoft.com/en-us/rest/api/storageservices/formatting-datetime-values), as in `YYYY-MM-DD hh:mm:ss[.nnnnnnn]+hh:mm`.
 */
deliveredDate?: string
/**
 * Package tracking information.
 */
data?: {
/**
 * Package tracking date since last update in [ISO 8601 time zone offset format](https://learn.microsoft.com/en-us/rest/api/storageservices/formatting-datetime-values), as in `YYYY-MM-DD hh:mm:ss[.nnnnnnn]+hh:mm`.
 */
lastChange?: string
/**
 * Package current tracking city.
 */
city?: string
/**
 * Package current tracking state in two-digit code format.
 */
state?: string
/**
 * Package tracking description.
 */
description?: string
/**
 * Package tracking creation date in [ISO 8601 time zone offset format](https://learn.microsoft.com/en-us/rest/api/storageservices/formatting-datetime-values), as in `YYYY-MM-DD hh:mm:ss[.nnnnnnn]+hh:mm`.
 */
createDate?: string
}[]
})
/**
 * [CFOP](https://www.gov.br/receitafederal/pt-br/acesso-a-informacao/acoes-e-programas/facilitacao/anexo-ecf-cfop) (_Código Fiscal de Operação e Prestação_) is a Brazilian fiscal code of operations and services that classifies business transactions types.
 */
cfop?: (null | string)
/**
 * Information about a value being returned to the customer. This field applies only to invoices with the `Input` type because it relates to returning items.
 */
restitutions?: {
/**
 * Customer refund details.
 */
Refund?: {
/**
 * Refund value in cents.
 */
value?: number
/**
 * Refund involving [Gift Card](https://developers.vtex.com/docs/guides/gift-card-integration-guide).
 */
giftCardData?: (null | string)
/**
 * Information about the items being returned.
 */
items?: (null | {
/**
 * Defines if the refund includes freight values (`true`) or not (`false`).
 */
useFreight?: (null | boolean)
/**
 * Defines if there are compensated unit tags in the package (`true`) or not (`false`).
 */
isCompensation?: boolean
/**
 * Compensational refund value in cents.
 */
compensationValue?: number
/**
 * SKU unique identification code of the returned item.
 */
id?: string
/**
 * Number of items being returned.
 */
quantity?: number
/**
 * Returned item price in cents.
 */
price?: number
/**
 * Customer reason for returning the item.
 */
description?: string
}[])
}
}
/**
 * Indicates the number of boxes (volumes) needed to contain the package items. For example, two refrigerators do not fit in a single volume, so this field would have value `2`.
 */
volumes?: number
/**
 * Defines if the package items' value should be inferred by the invoice value (`true`) or not (`false`).
 */
EnableInferItems?: (null | boolean)
}[]
})
/**
 * Detailed information about payments.
 */
paymentData?: {
/**
 * Transactions details.
 */
transactions?: {
/**
 * When this field is set as `true`, the payment is active, and when it is `false`, the payment is inactive.
 */
isActive?: boolean
/**
 * ID of the transaction.
 */
transactionId?: string
/**
 * Account name of the merchant that will receive the payment.
 */
merchantName?: string
/**
 * Detailed information about payments.
 */
payments?: {
/**
 * VTEX payment unique identifier.
 */
id?: string
/**
 * Payment system ID.
 */
paymentSystem?: string
/**
 * Payment system name.
 */
paymentSystemName?: string
/**
 * Payment value in cents.
 */
value?: number
/**
 * Number of payment installments.
 */
installments?: number
/**
 * Payment reference value in cents.
 */
referenceValue?: number
/**
 * Name of the card owner.
 */
cardHolder?: (null | string)
/**
 * Card number.
 */
cardNumber?: (null | string)
/**
 * Card first digits.
 */
firstDigits?: (null | string)
/**
 * Card last digits.
 */
lastDigits?: (null | string)
/**
 * Card Verification Value (CVV2) is a security code used by payment processors to reduce fraudulent credit and debit card transactions.
 */
cvv2?: (null | string)
/**
 * Card expiration month, in 2-digit format.
 */
expireMonth?: (null | string)
/**
 * Card expiration year, in 4-digit format.
 */
expireYear?: (null | string)
/**
 * Payment URL.
 */
url?: (null | string)
/**
 * Gift Card ID.
 */
giftCardId?: (null | string)
/**
 * Gift Card name.
 */
giftCardName?: (null | string)
/**
 * Gift Card caption.
 */
giftCardCaption?: (null | string)
/**
 * Code for the customer to use the Gift Card.
 */
redemptionCode?: (null | string)
/**
 * Transaction payment method, which can have one of the following values: 
 * 
 * - **Credit card:** `creditCard` 
 * 
 * - **Debid card:** `debitCard`
 * 
 * - **Bank invoice:** `bankInvoice`
 * 
 * - **Promissory:** `promissory` 
 * 
 * - **Gift card:** `giftCard` 
 * 
 * - **Pix:** `instantPayment`.
 */
group?: string
/**
 * Provider's unique identifier for the transaction.
 */
tid?: (null | string)
/**
 * Payment due date, in `MM/YY` format.
 */
dueDate?: (null | string)
/**
 * Information about the connector responses.
 */
connectorResponses?: {
/**
 * Connector's authorization ID.
 */
authId?: string
/**
 * Provider's unique identifier for the transaction.
 */
Tid?: string
/**
 * Provider's operation/error code to be logged.
 */
ReturnCode?: (null | string)
/**
 * Provider's operation/error message to be logged.
 */
Message?: (null | string)
}
/**
 * Gift Card provider ID.
 */
giftCardProvider?: string
/**
 * Defines if the Gift Card is a discount over the price (`true`) or not (`false`).
 */
giftCardAsDiscount?: boolean
/**
 * Koin connector URL.
 */
koinUrl?: (null | string)
/**
 * Payment account ID.
 */
accountId?: string
/**
 * Retrieves the main account ID if the payment was made in a subaccount.
 */
parentAccountId?: (null | string)
/**
 * Bank issued invoice numeric sequence.
 */
bankIssuedInvoiceIdentificationNumber?: (null | string)
/**
 * Bank issued invoice numeric sequence formatted as customers see.
 */
bankIssuedInvoiceIdentificationNumberFormatted?: (null | string)
/**
 * Bank issued invoice bar code number.
 */
bankIssuedInvoiceBarCodeNumber?: (null | string)
/**
 * Bank issued invoice bar code type.
 */
bankIssuedInvoiceBarCodeType?: (null | string)
/**
 * Billing address information.
 */
billingAddress?: (null | {
/**
 * Billing address three-digit country code, in [ISO 3166 ALPHA-3](https://www.iban.com/country-codes) format.
 */
country?: string
/**
 * Billing address street.
 */
street?: string
/**
 * Billing address number.
 */
number?: string
/**
 * Billing address complement.
 */
complement?: string
/**
 * Billing address neighborhood.
 */
neighborhood?: string
/**
 * Billing address postal code.
 */
postalCode?: string
/**
 * Billing address city.
 */
city?: string
/**
 * Billing address state/province.
 */
state?: string
})
}[]
}[]
/**
 * Array with information about Gift Cards.
 */
giftCards?: string[]
}
/**
 * Shipping information.
 */
shippingData?: {
/**
 * Object ID, the expected value is `shippingData`.
 */
id?: string
/**
 * Shipping address details.
 */
address?: {
/**
 * Type of address. For example, `residential` or `pickup`.
 */
addressType?: string
/**
 * Full name of the order receiver.
 */
receiverName?: string
/**
 * Shipping address ID.
 */
addressId?: string
/**
 * Shipping address version ID.
 */
versionId?: (null | string)
/**
 * Shipping address entity ID.
 */
entityId?: (null | string)
/**
 * Shipping address postal code.
 */
postalCode?: string
/**
 * Shipping address city.
 */
city?: string
/**
 * Shipping address state/province.
 */
state?: string
/**
 * Shipping address three-digit country code in [ISO 3166 ALPHA-3](https://www.iban.com/country-codes) format.
 */
country?: string
/**
 * Shipping address street.
 */
street?: string
/**
 * Shipping address number.
 */
number?: string
/**
 * Shipping address neighborhood.
 */
neighborhood?: string
/**
 * Shipping address complement.
 */
complement?: string
/**
 * Shipping address additional information.
 */
reference?: (null | string)
/**
 * Pair of geocoordinates, first longitude then latitude.
 */
geoCoordinates?: number[]
}
/**
 * Array of objects containing item's logistics information.
 */
logisticsInfo?: {
/**
 * Index of the item starting from 0.
 */
itemIndex?: number
/**
 * Selected shipping option.
 */
selectedSla?: string
/**
 * Logistics [reservation](https://help.vtex.com/en/tutorial/how-does-reservation-work--tutorials_92) waiting time.
 */
lockTTL?: string
/**
 * Shipping price for the item in cents. Does not account for the whole order's shipping price.
 */
price?: number
/**
 * Original shipping price for the item in cents.
 */
listPrice?: number
/**
 * Item's selling price.
 */
sellingPrice?: number
/**
 * [Scheduled delivery](https://help.vtex.com/tutorial/scheduled-delivery--22g3HAVCGLFiU7xugShOBi) window information, if it applies to the item.
 */
deliveryWindow?: (null | string)
/**
 * [Carrier](https://help.vtex.com/en/tutorial/carriers-on-vtex--7u9duMD5UQa2QQwukAWMcE) company's name.
 */
deliveryCompany?: string
/**
 * Total shipping estimate time in days. For instance, three business days is represented `3bd`.
 */
shippingEstimate?: string
/**
 * Shipping estimate date, defined after the confirmation of the order.
 */
shippingEstimateDate?: string
/**
 * Service Level Agreement (SLA) corresponding to [shipping policies](https://help.vtex.com/en/tutorial/shipping-policy--tutorials_140).
 */
slas?: {
/**
 * ID of the shipping method used in the [shipping policy](https://help.vtex.com/en/tutorial/shipping-policy--tutorials_140).
 */
id?: string
/**
 * Name of the shipping policy.
 */
name?: string
/**
 * Total shipping estimate time in days. For instance, three business days is represented `3bd`.
 */
shippingEstimate?: string
/**
 * [Scheduled delivery window](https://help.vtex.com/tutorial/scheduled-delivery--22g3HAVCGLFiU7xugShOBi) information, if it applies to the item.
 */
deliveryWindow?: (null | string)
/**
 * Shipping price for the item in cents. Does not account for the whole order's shipping price.
 */
price?: number
/**
 * Defines if the delivery channel is `delivery` or `pickup-in-point`.
 */
selectedDeliveryChannel?: string
/**
 * Detailed information about a [pickup point](https://help.vtex.com/en/tutorial/pickup-points--2fljn6wLjn8M4lJHA6HP3R).
 */
pickupStoreInfo?: {
/**
 * Additional information about the pickup point.
 */
additionalInfo?: (null | string)
/**
 * Pickup point address details.
 */
address?: (null | {
/**
 * Type of address. For example, `residential` or `pickup`.
 */
addressType?: (null | string)
/**
 * Full name of the order receiver.
 */
receiverName?: (null | string)
/**
 * Pickup point address ID.
 */
addressId?: (null | string)
/**
 * Pickup point address version ID.
 */
versionId?: (null | string)
/**
 * Pickup point address entity ID.
 */
entityId?: (null | string)
/**
 *  Pickup point postal code.
 */
postalCode?: (null | string)
/**
 * Pickup point address city.
 */
city?: (null | string)
/**
 * Pickup point address state/province.
 */
state?: (null | string)
/**
 * Pickup point address three-digit country code in [ISO 3166 ALPHA-3](https://www.iban.com/country-codes) format.
 */
country?: (null | string)
/**
 * Pickup point address street.
 */
street?: (null | string)
/**
 * Pickup point address number.
 */
number?: (null | string)
/**
 * Pickup point address neighborhood.
 */
neighborhood?: (null | string)
/**
 * Pickup point address complement.
 */
complement?: (null | string)
/**
 * Pickup point address additional information.
 */
reference?: (null | string)
/**
 * Pair of geocoordinates, first longitude then latitude.
 */
geoCoordinates?: (null | (null | number)[])
})
/**
 * [Loading dock](https://help.vtex.com/en/tutorial/loading-dock--5DY8xHEjOLYDVL41Urd5qj) ID related to the delivery or the pickup point.
 */
dockId?: (null | string)
/**
 * Name of the pickup point displayed at checkout.
 */
friendlyName?: (null | string)
/**
 * Defines if the type of shipping is pickup (`true`) or not (`false`).
 */
isPickupStore?: boolean
}
/**
 * Name of the [polygon](https://help.vtex.com/en/tutorial/registering-geolocation/) associated with the shipping policy.
 */
polygonName?: (null | string)
/**
 * Logistics [reservation](https://help.vtex.com/en/tutorial/how-does-reservation-work--tutorials_92) waiting time of the SLA.
 */
lockTTL?: string
/**
 * [Pickup point](https://help.vtex.com/en/tutorial/pickup-points--2fljn6wLjn8M4lJHA6HP3R) ID related to the SLA.
 */
pickupPointId?: string
/**
 * Duration in business days of the time the carrier takes in transit to fulfill the order. For example, three business days is represented `3bd`.
 */
transitTime?: string
/**
 * Distance in kilometers between the pickup point and the customer's address. The distance is measured as a straight line.
 */
pickupDistance?: number
}[]
/**
 * List of countries of the shipping address.
 */
shipsTo?: string[]
/**
 * Information about delivery IDs.
 */
deliveryIds?: {
/**
 * [Carrier](https://help.vtex.com/en/tutorial/carriers-on-vtex--7u9duMD5UQa2QQwukAWMcE)'s ID.
 */
courierId?: string
/**
 * Carrier's name.
 */
courierName?: string
/**
 * ID of the [loading dock](https://help.vtex.com/pt/tutorial/doca--5DY8xHEjOLYDVL41Urd5qj).
 */
dockId?: string
/**
 * Quantity of items.
 */
quantity?: number
/**
 * ID of the [warehouse](https://help.vtex.com/tutorial/warehouse--6oIxvsVDTtGpO7y6zwhGpb).
 */
warehouseId?: string
/**
 * Name of the account's [carrier](https://help.vtex.com/en/tutorial/transportadoras-na-vtex--7u9duMD5UQa2QQwukAWMcE).
 */
accountCarrierName?: string
/**
 * Information about [kits](https://help.vtex.com/tutorial/what-is-a-kit--5ov5s3eHM4AqAAgqWwoc28), if there are any.
 */
kitItemDetails?: (null | string[])
}[]
/**
 * List of delivery channels associated with the trade policy.
 */
deliveryChannels?: {
/**
 * Delivery channel's shipping type, which can be `delivery` or `pickup-in-point`.
 */
id?: string
/**
 * Stock check for an SKU availability.
 */
stockBalance?: number
}[]
/**
 * Defines if the delivery channel is `delivery` or `pickup-in-point`.
 */
selectedDeliveryChannel?: string
/**
 * Detailed information about a [pickup point](https://help.vtex.com/en/tutorial/pickup-points--2fljn6wLjn8M4lJHA6HP3R).
 */
pickupStoreInfo?: (null | {
/**
 * Additional information about the pickup point.
 */
additionalInfo?: (null | string)
/**
 * Pickup point's address.
 */
address?: (null | string)
/**
 * ID of the [loading dock](https://help.vtex.com/pt/tutorial/doca--5DY8xHEjOLYDVL41Urd5qj) related to the delivery or the pickup point.
 */
dockId?: (null | string)
/**
 * Name of the pickup point displayed at checkout.
 */
friendlyName?: (null | string)
/**
 * Defines if the type of shipping is pickup (`true`) or not (`false`).
 */
isPickupStore?: boolean
})
/**
 * Address ID.
 */
addressId?: (null | string)
/**
 * Shipping address version ID.
 */
versionId?: (null | string)
/**
 * Shipping address entity ID.
 */
entityId?: (null | string)
/**
 * Name of the [polygon](https://help.vtex.com/en/tutorial/registering-geolocation/) associated with the shipping policy.
 */
polygonName?: (null | string)
/**
 * [Pickup point](https://help.vtex.com/en/tutorial/pickup-points--2fljn6wLjn8M4lJHA6HP3R)'s ID.
 */
pickupPointId?: (null | string)
/**
 * Duration in business days of the time the carrier takes in transit to fulfill the order. For example, three business days is represented `3bd`.
 */
transitTime?: (null | string)
}[]
/**
 * List containing order shipping label information.
 */
trackingHints?: (null | {
/**
 * Tracking ID.
 */
trackingId?: string
/**
 * [Carrier](https://help.vtex.com/en/tutorial/carriers-on-vtex--7u9duMD5UQa2QQwukAWMcE) name.
 */
courierName?: string
/**
 * Tracking URL.
 */
trackingUrl?: string
/**
 * Tracking label.
 */
trackingLabel?: string
}[])
/**
 * Information about selected adresses.
 */
selectedAddresses?: {
/**
 * Selected address ID.
 */
addressId?: string
/**
 * Shipping address version ID of the selected address.
 */
versionId?: (null | string)
/**
 * Shipping address entity ID of the selected address.
 */
entityId?: (null | string)
/**
 * Selected adress's shipping type, which can be `pickup`, `residential`, `invoice`, `search`, `inStore`, `commercial` or `giftRegistry`.
 */
addressType?: string
/**
 * Full name of the person who is going to receive the order in the selected address.
 */
receiverName?: string
/**
 * Street of the selected address.
 */
street?: string
/**
 * Number of the building, house or apartment of the selected address.
 */
number?: string
/**
 * Complement to the selected address if it applies.
 */
complement?: string
/**
 * Neighborhood of the selected address.
 */
neighborhood?: string
/**
 * Postal code of the selected address.
 */
postalCode?: string
/**
 * City of the selected address.
 */
city?: string
/**
 * State of the selected address.
 */
state?: string
/**
 * Three-digit country code of the selected address, in [ISO 3166 ALPHA-3](https://www.iban.com/country-codes) format.
 */
country?: string
/**
 * Complement to help locate the selected address.
 */
reference?: (null | string)
/**
 * List with the selected address's geocoordinates, first longitude then latitude.
 */
geoCoordinates?: number[]
}[]
/**
 * Array with customer contact information.
 */
contactInformation?: {
/**
 * Customer contact ID.
 */
id?: string
/**
 * Customer contact email.
 */
email?: string
/**
 * Customer contact first name.
 */
firstName?: string
/**
 * Customer contact last name.
 */
lastName?: string
/**
 * Customer contact phone number.
 */
phone?: string
/**
 * Customer contact document ID.
 */
document?: string
/**
 * Customer contact document type.
 */
documentType?: string
/**
 * Entity identification code.
 */
entityId?: string
/**
 * Version identification code.
 */
versionId?: string
}[]
}
/**
 * Information on promotions and taxes that apply to the order.
 */
ratesAndBenefitsData?: {
/**
 * ID of the rate or benefit.
 */
id?: string
/**
 * Information about order's promotions and taxes identifiers.
 */
rateAndBenefitsIdentifiers?: {
/**
 * Promotion or tax description.
 */
description?: (null | string)
/**
 * Defines if the promotion or tax is cumulative (`true`) or not (`false`).
 */
featured?: boolean
/**
 * Promotion or tax ID.
 */
id?: string
/**
 * Promotion or tax name.
 */
name?: string
/**
 * Informs the criteria and conditions fulfilled so the promotion became valid.
 */
matchedParameters?: {
[k: string]: any
}
/**
 * Object containing promotion or tax additional information. For example { Free shipping: 100,00 }.
 */
additionalInfo?: (null | {

})
}[]
}
/**
 * Information about promotions and marketing. For example, coupon tracking information and internal or external UTMs.
 */
marketingData?: (null | {
/**
 * Object ID. The expected value is `marketingData`.
 */
id?: string
/**
 * Value of the `utm_source` parameter of the URL that led to the request.
 */
utmSource?: string
/**
 * UTM Source Parameters.
 */
utmPartner?: string
/**
 * Value of the `utm_medium` parameter of the URL that led to the request.
 */
utmMedium?: string
/**
 * Value of the `utm_campaign` parameter of the URL that led to the request.
 */
utmCampaign?: string
/**
 * Coupon code.
 */
coupon?: string
/**
 * Internal UTM value `utmi_cp`.
 */
utmiCampaign?: string
/**
 * Internal UTM value `utmi_p`.
 */
utmipage?: string
/**
 * Internal UTM value `utmi_pc`.
 */
utmiPart?: string
/**
 * Marketing tags information. This field can be used to register campaign data or informative tags regarding promotions.
 */
marketingTags?: string[]
})
/**
 * Information about [gift list](https://developers.vtex.com/docs/guides/creating-gift-lists).
 */
giftRegistryData?: (null | {
/**
 * Gift list ID.
 */
giftRegistryId?: string
/**
 * [Gift list type](https://help.vtex.com/en/tutorial/creating-a-type-of-list).
 */
giftRegistryType?: string
/**
 * Gift list type name.
 */
giftRegistryTypeName?: string
/**
 * Gift list shipping address ID.
 */
addressId?: string
/**
 * Gift list description.
 */
description?: string
})
/**
 * Object with information on the client's profile.
 */
clientProfileData?: {
/**
 * Object ID, the expected value is `clientProfileData`.
 */
id?: string
/**
 * Customer email.
 */
email?: string
/**
 * Customer first name.
 */
firstName?: string
/**
 * Customer last name.
 */
lastName?: string
/**
 * Type of the document informed by the customer.
 */
documentType?: string
/**
 * Document identification code informed by the customer.
 */
document?: string
/**
 * Customer phone number.
 */
phone?: string
/**
 * If the customer is a legal entity, this field includes the corporate name.
 */
corporateName?: (null | string)
/**
 * If the customer is a legal entity, this field includes the trade name.
 */
tradeName?: (null | string)
/**
 * If the customer is a legal entity, this field includes the corporate document.
 */
corporateDocument?: (null | string)
/**
 * If the customer is a legal entity, this field includes the state inscription.
 */
stateInscription?: (null | string)
/**
 * If the customer is a legal entity, this field includes the company's phone number.
 */
corporatePhone?: (null | string)
/**
 * Defines if the customer is a legal entity (`true`) or not (`false`).
 */
isCorporate?: boolean
/**
 * Customer user profile ID.
 */
userProfileId?: string
/**
 * Customer user profile version.
 */
userProfileVersion?: (null | string)
/**
 * Customer class identification.
 */
customerClass?: (null | string)
/**
 * Customer code.
 */
customerCode?: (null | string)
}
/**
 * Information about order's items.
 */
items?: {
/**
 * Alphanumeric sequence that identifies an SKU in a given order.
 */
uniqueId?: string
/**
 * Unique SKU identifier.
 */
id?: string
/**
 * ID of the product associated with the item.
 */
productId?: string
/**
 * EAN of the SKU.
 */
ean?: (null | string)
/**
 * Reservation ID.
 */
lockId?: string
/**
 * Item attachment information.
 */
itemAttachment?: {
/**
 * Item attachment custom field for content.
 */
content?: {

}
/**
 * Item attachment name.
 */
name?: (null | string)
}
/**
 * Array containing information on attachments.
 */
attachments?: string[]
/**
 * Quantity of items.
 */
quantity?: number
/**
 * Seller related to the order.
 */
seller?: string
/**
 * Item's name.
 */
name?: string
/**
 * Product referencial code associated with the item.
 */
refId?: string
/**
 * Item's price.
 */
price?: number
/**
 * Item's [list price](https://help.vtex.com/en/tracks/prices-101--6f8pwCns3PJHqMvQSugNfP/3XcXp0r5WrJvogB8KIX4Kx#list-price).
 */
listPrice?: number
/**
 * Item's [manual price](https://help.vtex.com/en/tutorial/change-the-price-of-an-item-in-the-shopping-cart--7Cd37aCAmtL1qmoZJJvjNf).
 */
manualPrice?: (null | string)
/**
 * List of objects with item's price modifiers.
 */
priceTags?: string[]
/**
 * SKU image URL.
 */
imageUrl?: string
/**
 * SKU slug.
 */
detailUrl?: string
/**
 * Item's components.
 */
components?: string[]
/**
 * This field groups offerings (services) related to the item and displays their ID and quantity. A gift package is an example of an offering.
 */
bundleItems?: {
/**
 * Offering ID.
 */
id?: number
/**
 * Offering quantity.
 */
quantity?: number
}[]
/**
 * Array with information about params.
 */
params?: string[]
/**
 * Item's offerings, which are services related to the item. For example, guarantee or installation.
 */
offerings?: string[]
/**
 * Array containing attachments details.
 */
attachmentOfferings?: (null | {
/**
 * Name of the attachment.
 */
name?: (null | string)
/**
 * Defines if the attachment is required (`true`) or not (`false`).
 */
required?: (null | boolean)
/**
 * Schema of the content declared in the field `attachmentOfferings`.
 */
schema?: (null | {

})
}[])
/**
 * SKU ID from the seller perspective.
 */
sellerSku?: string
/**
 * Date until when the price is going to be valid if there is a promotion.
 */
priceValidUntil?: (null | string)
/**
 * Commission value registered for the seller.
 */
commission?: number
/**
 * Item's tax.
 */
tax?: number
/**
 * Item's pre sale date.
 */
preSaleDate?: (null | string)
/**
 * Additional information about the item.
 */
additionalInfo?: {
/**
 * Item's brand name.
 */
brandName?: string
/**
 * Item's brand ID.
 */
brandId?: string
/**
 * Item's category ID.
 */
categoriesIds?: string
/**
 * Items categories information.
 */
categories?: {
/**
 * Category ID.
 */
id?: number
/**
 * Category name.
 */
name?: string
}[]
/**
 * All product clusters related to the item.
 */
productClusterId?: string
/**
 * Commercial conditions ID.
 */
commercialConditionId?: string
/**
 * Item's dimensions.
 */
dimension?: {
/**
 * Item's cubic weight.
 */
cubicweight?: number
/**
 * Item's height.
 */
height?: number
/**
 * Item's length.
 */
length?: number
/**
 * Item's weight.
 */
weight?: number
/**
 * Item's width.
 */
width?: number
}
/**
 * Information about services related to the item. For example: guarantee or installation.
 */
offeringInfo?: (null | string)
/**
 * Offering type.
 */
offeringType?: (null | string)
/**
 * Offering type ID.
 */
offeringTypeId?: (null | string)
}
/**
 * Item's measurement unit.
 */
measurementUnit?: string
/**
 * Item's unit multiplier.
 */
unitMultiplier?: number
/**
 * Item's selling price.
 */
sellingPrice?: number
/**
 * This field is `true` when the item is a gift in order context and `false` when it is not.
 */
isGift?: boolean
/**
 * Item's shipping price.
 */
shippingPrice?: (null | string)
/**
 * Item's reward value.
 */
rewardValue?: number
/**
 * Value of the freight commission.
 */
freightCommission?: number
/**
 * Item's price information.
 */
priceDefinitions?: {
/**
 * Details on item's selling price.
 */
sellingPrices?: {
/**
 * Total value of items in cents.
 */
value?: number
/**
 * Quantity of items.
 */
quantity?: number
}[]
/**
 * Item's calculated unitary selling price in cents.
 */
calculatedSellingPrice?: number
/**
 * Total value of all item's units in cents.
 */
total?: number
}
/**
 * Item's tax code.
 */
taxCode?: (null | string)
/**
 * Ranking number that shows how related items are indexed in between each other. It starts at `0` as the primary item reference and counts up to `1`, `2`, and so on. For example, a customer bought sunglasses and hired a warranty service. Since the sunglasses are index `0`, the warranty service (the [assembly option](https://help.vtex.com/en/tutorial/assembly-options--5x5FhNr4f5RUGDEGWzV1nH)) is index `1` and has the `parentItemIndex` value `0`. This response is `null` for items that are not assembly options.
 */
parentItemIndex?: (null | number)
/**
 * When items are indexed in between each other, this field returns the assembly option ID. This response is `null` for items that are not [assembly options](https://help.vtex.com/en/tutorial/assembly-options--5x5FhNr4f5RUGDEGWzV1nH).
 */
parentAssemblyBinding?: (null | string)
/**
 * Identification code of the call center operator responsible for the order.
 */
callCenterOperator?: (null | string)
/**
 * @deprecated
 * This field identifies the order in the `handling` status in the workflow, and it was used for VTEX internal control.
 */
serialNumbers?: (null | string)
/**
 * Information about items customization.
 */
assemblies?: (null | string[])
/**
 * Item's cost price.
 */
costPrice?: number
}[]
/**
 * Array with marketplace items information.
 */
marketplaceItems?: string[]
}
}
/**
 * Retrieves details about all orders related to the same purchase by searching by order group ID.
 * 
 * >⚠️ Throttling: Each VTEX account can make up to 6000 requests per minute.
 * 
 * > You can only access information from orders created in the last two years, and that same period is valid for customers through [My Account](https://help.vtex.com/en/tutorial/how-my-account-works--2BQ3GiqhqGJTXsWVuio3Xh).
 * 
 * ## Permissions
 * 
 * Any user or [application key](https://developers.vtex.com/docs/guides/api-authentication-using-application-keys) must have at least one of the appropriate [License Manager resources](https://help.vtex.com/en/tutorial/license-manager-resources--3q6ztrC8YynQf6rdc6euk3) to be able to successfully run this request. Otherwise they will receive a status code `403` error. These are the applicable resources for this endpoint:
 * 
 * | **Product** | **Category** | **Resource** |
 * | --------------- | ----------------- | ----------------- |
 * | OMS | OMS access | **View order** |
 * | Checkout         | CheckoutResources | **Orders Full Access** |
 * 
 * You can [create a custom role](https://help.vtex.com/en/tutorial/roles--7HKK5Uau2H6wxE1rH5oRbc#creating-a-role) with that resource or use one of the following [predefined roles](https://help.vtex.com/en/tutorial/predefined-roles--jGDurZKJHvHJS13LnO7Dy):
 * 
 * | **Role** | **Resource** | 
 * | --------------- | ----------------- | 
 * | OMS - Full access | View order |
 * | Checkout Admin | View order |
 * | IntegrationProfile - Fulfillment Oms | View order |
 * | OMS - Full access | Orders Full Access |
 * | Checkout Admin | Orders Full Access |
 * | IntegrationProfile - Fulfillment Oms | Orders Full Access |
 * 
 * >❗ Assigning a [predefined role](https://help.vtex.com/en/tutorial/predefined-roles--jGDurZKJHvHJS13LnO7Dy) to users or application keys usually grants permission to multiple [License Manager resources](https://help.vtex.com/en/tutorial/license-manager-resources--3q6ztrC8YynQf6rdc6euk3). If some of these permissions are not necessary, consider creating a custom role instead. For more information regarding security, see [Best practices for using application keys](https://help.vtex.com/en/tutorial/best-practices-application-keys--7b6nD1VMHa49aI5brlOvJm). To learn more about machine authentication at VTEX, see [Authentication overview](https://developers.vtex.com/docs/guides/authentication).
 */
"GET /api/oms/pvt/orders/order-group/:orderGroup": {
/**
 * List of orders grouped by the order group ID.
 */
response: {
/**
 * Order ID.
 */
orderId?: string
/**
 * Sequence number part of the order ID. For example, in order `v70530116str-01`, the sequence is `70530116`.
 */
sequence?: string
/**
 * Order ID in the marketplace.
 */
marketplaceOrderId?: (null | string)
/**
 * Marketplace endpoint for post purchase communication.
 */
marketplaceServicesEndpoint?: (null | string)
/**
 * Seller order ID.
 */
sellerOrderId?: string
/**
 * Order's [origin in the order flow](https://help.vtex.com/en/tutorial/order-flow-and-status--tutorials_196).
 */
origin?: ("Marketplace" | "Fulfillment" | "Chain")
/**
 * Three-letter [affiliate](https://help.vtex.com/en/tutorial/configuring-affiliates--tutorials_187) code configured by the seller to identify a marketplace.
 */
affiliateId?: (null | string)
/**
 * Sales channel (or [trade policy](https://help.vtex.com/en/tutorial/how-trade-policies-work--6Xef8PZiFm40kg2STrMkMV)) ID related to the order.
 */
salesChannel?: string
/**
 * For a VTEX store, the merchant's name will be the same as the account name. An external seller can have a `merchantName`, but it will not be an account name.
 */
merchantName?: (null | string)
/**
 * [Order status](https://help.vtex.com/en/tutorial/order-flow-and-status--tutorials_196) in the workflow.
 */
status?: string
/**
 * @deprecated
 * Status description displayed on the VTEX Admin. This field is obsolete and may not return any value.
 */
statusDescription?: (null | string)
/**
 * Order total value in cents.
 */
value?: number
/**
 * Order creation date in [ISO 8601 time zone offset format](https://learn.microsoft.com/en-us/rest/api/storageservices/formatting-datetime-values), as in `YYYY-MM-DDThh:mm:ssZ`.
 */
creationDate?: string
/**
 * Order last change date in [ISO 8601 time zone offset format](https://learn.microsoft.com/en-us/rest/api/storageservices/formatting-datetime-values), as in `YYYY-MM-DDThh:mm:ssZ`.
 */
lastChange?: string
/**
 * Order group ID, a segment of the order ID that groups all orders related to the same purchase. For example, in order ID `v71021570str-02`), the order group ID is `v71021570str`.
 */
orderGroup?: string
totals?: TotalsUpdated
items?: ItemsUpdated
/**
 * Array with marketplace items information.
 */
marketplaceItems?: string[]
clientProfileData?: ClientProfileDataUpdated
giftRegistryData?: GiftRegistryDataUpdated
marketingData?: MarketingDataUpdated
ratesAndBenefitsData?: RatesAndBenefitsDataUpdated
shippingData?: ShippingDataUpdated
paymentData?: PaymentDataUpdated
packageAttachment?: PackageAttachmentUpdated
sellers?: SellersUpdated
callCenterOperatorData?: CallCenterOperatorDataUpdated
/**
 * Email of the store employee responsible for managing the order.
 */
followUpEmail?: string
/**
 * Last transactional message sent to the customer.
 */
lastMessage?: (null | string)
/**
 * Main [account name](https://help.vtex.com/en/tutorial/what-is-an-account-name--i0mIGLcg3QyEy8OCicEoC).
 */
hostname?: string
invoiceData?: InvoiceDataUpdated
changesAttachment?: ChangesAttachmentUpdated
/**
 * Optional field for additional information.
 */
openTextField?: (null | {
/**
 * Additional information.
 */
[k: string]: string
})
/**
 * Rounding error total value in cents, when applicable. For example, in orders with a discount over non-integer multiplier items, the rounding price is applied per item, not after the sum of all items, what can cause a difference in the total discount value.
 */
roundingError?: number
/**
 * ID of the [orderForm](https://developers.vtex.com/docs/guides/orderform-fields), the main object processed by the VTEX Checkout.
 */
orderFormId?: string
/**
 * Commercial condition information.
 */
commercialConditionData?: (null | string)
/**
 * Defines if the order payment has been settled (`true`) or not (`false`).
 */
isCompleted?: boolean
/**
 * Customizable fields created by the store for the shopping cart. This field is useful for storing data not included in other fields. For example, a message for a gift or a name to be printed in a shirt.
 */
customData?: (null | {
/**
 * Customizable apps created by the store.
 */
customApps?: (null | (null | string)[])
})
storePreferencesData?: StorePreferencesDataUpdated
/**
 * Defines if order cancellation is allowed (`true`) or not anymore (`false`).
 */
allowCancellation?: boolean
/**
 * Defines if the order can be edited (`true`) or not anymore (`false`).
 */
allowEdition?: boolean
/**
 * Defines if the order was placed via [VTEX Sales App](https://help.vtex.com/en/tracks/instore-getting-started-and-setting-up--zav76TFEZlAjnyBVL5tRc) (`true`) or not (`false`).
 */
isCheckedIn?: boolean
marketplace?: MarketplaceUpdated
/**
 * Order authorization date in [ISO 8601 time zone offset format](https://learn.microsoft.com/en-us/rest/api/storageservices/formatting-datetime-values), as in `YYYY-MM-DDThh:mm:ssZ`.
 */
authorizedDate?: (null | string)
/**
 * Order invoice date in [ISO 8601 time zone offset format](https://learn.microsoft.com/en-us/rest/api/storageservices/formatting-datetime-values), as in `YYYY-MM-DDThh:mm:ssZ`.
 */
invoicedDate?: (null | string)
/**
 * Order cancellation reason.
 */
cancelReason?: (null | string)
itemMetadata?: ItemMetadataUpdated
subscriptionData?: SubscriptionDataUpdated
taxData?: TaxDataUpdated
/**
 * When the order is created at a physical store which is configured as a pickup point, this field retrieves the pickup point ID.
 */
checkedInPickupPointId?: (null | string)
cancellationData?: CancellationDataUpdated
cancellationRequests?: CancellationRequestsUpdated
clientPreferencesData?: ClientPreferencesDataUpdated
}[]
}
/**
 * Retrieves a list of orders according to the filters described below. 
 * 
 * The limit of information retrieval is 30 pages, the default number of orders per page is 15 and it is possible to configure it up to 100 using the `per_page` parameter. 
 * 
 * Be aware that since October 3rd, 2018, this endpoint does not return the `items` property. 
 * 
 * > You can only access information from orders created in the last two years, and that same period is valid for customers through [My Account](https://help.vtex.com/en/tutorial/how-my-account-works--2BQ3GiqhqGJTXsWVuio3Xh). 
 * 
 * > This endpoint should **not** be used for integrations. Use the [orders Feed or hook](https://developers.vtex.com/docs/guides/orders-feed) for this purpose. 
 * 
 * This endpoint returns only orders that already have been indexed, which takes approximately four minutes. Because of this, the data retrieved may present inconsistencies. To get live up-to-date information and [build order integrations](https://developers.vtex.com/vtex-rest-api/docs/erp-integration-set-up-order-integration) use the [orders Feed or hook](https://developers.vtex.com/docs/guides/orders-feed).
 * 
 * > **Onboarding guide** 
 * >
 * > Check the new [Orders onboarding guide](https://developers.vtex.com/vtex-rest-api/docs/orders-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Orders and is organized by focusing on the developer's journey. 
 * 
 * ## Permissions
 * 
 * Any user or [application key](https://developers.vtex.com/docs/guides/api-authentication-using-application-keys) must have at least one of the appropriate [License Manager resources](https://help.vtex.com/en/tutorial/license-manager-resources--3q6ztrC8YynQf6rdc6euk3) to be able to successfully run this request. Otherwise they will receive a status code `403` error. These are the applicable resources for this endpoint:
 * 
 * | **Product** | **Category** | **Resource** |
 * | --------------- | ----------------- | ----------------- |
 * | OMS | OMS access | **List Orders** |
 * | Checkout         | CheckoutResources | **Orders Full Access** |
 * 
 * You can [create a custom role](https://help.vtex.com/en/tutorial/roles--7HKK5Uau2H6wxE1rH5oRbc#creating-a-role) with that resource or use one of the following [predefined roles](https://help.vtex.com/en/tutorial/predefined-roles--jGDurZKJHvHJS13LnO7Dy):
 * 
 * | **Role** | **Resource** | 
 * | --------------- | ----------------- | 
 * | OMS - Full access | List Orders |
 * | Checkout Admin | List Orders |
 * | IntegrationProfile - Fulfillment Oms | List Orders |
 * | OMS - Full access | Orders Full Access |
 * | Checkout Admin | Orders Full Access |
 * | IntegrationProfile - Fulfillment Oms | Orders Full Access |
 * 
 * >❗ Assigning a [predefined role](https://help.vtex.com/en/tutorial/predefined-roles--jGDurZKJHvHJS13LnO7Dy) to users or application keys usually grants permission to multiple [License Manager resources](https://help.vtex.com/en/tutorial/license-manager-resources--3q6ztrC8YynQf6rdc6euk3). If some of these permissions are not necessary, consider creating a custom role instead. For more information regarding security, see [Best practices for using application keys](https://help.vtex.com/en/tutorial/best-practices-application-keys--7b6nD1VMHa49aI5brlOvJm). 
 * 
 * To learn more about machine authentication at VTEX, see [Authentication overview](https://developers.vtex.com/docs/guides/authentication).
 */
"GET /api/oms/pvt/orders": {
searchParams: {
/**
 * You can retrieve orders lists filtering by an `OrderField` combined with an `OrderType`. To do so, you have to concatenate them: `orderBy={{OrderField}},{{OrderType}}`. 
 * - `OrderField` values accepted: `creationDate`, `orderId`, `items`, `totalValue` and `origin`. 
 * - `OrderType` values accepted: `asc` and `desc`.
 */
orderBy?: string
/**
 * Define the number of pages you wish to retrieve, restricted to the limit of 30 pages.
 */
page?: number
/**
 * Quantity of orders for each page, the default value is 15 and it goes up to 100 orders per page. Be aware that the limit of retrieval ofthis endpoint is 30 pages.
 */
per_page?: number
/**
 * Filters list to return only orders with non `null` values for the `invoiceInput` field.
 */
f_hasInputInvoice?: boolean
/**
 * This parameter filters using Fulltext and accepts the values below. Be aware that the `+` caracter is not allowed in Fulltext Search. 
 * - Order Id 
 * - Client email 
 * - Client document 
 * - Client name
 */
q?: string
/**
 * You can filter orders by shipping estimate time in days by concatenating the desired number of days with the sufix `.days`. For example: 
 * - Next 7 days: `7.days` 
 * - Tomorrow: `1.days` 
 * - Today: `0.days` 
 * - Late: `-1.days`
 */
f_shippingEstimate?: string
/**
 * You can filter orders by invoiced date by concatenating the sufix `invoicedDate:` with the range date in Timestamp format. For example: 
 * - 1 Day: `invoicedDate:[2022-01-01T02:00:00.000Z TO 2022-01-02T01:59:59.999Z]`
 * - 1 Month: `invoicedDate:[2022-01-01T02:00:00.000Z TO 2022-02-01T01:59:59.999Z]` 
 * - 1 Year: `invoicedDate:[2022-01-01T02:00:00.000Z TO 2022-01-01T01:59:59.999Z]`
 */
f_invoicedDate?: string
/**
 * You can filter orders by creation date by concatenating the sufix `creationDate:` with the range date in Timestamp format. For example: 
 * - 1 Day: `creationDate:[2022-01-01T02:00:00.000Z TO 2022-01-02T01:59:59.999Z]`
 * - 1 Month: `creationDate:[2022-01-01T02:00:00.000Z TO 2022-02-01T01:59:59.999Z]` 
 * - 1 Year: `creationDate:[2022-01-01T02:00:00.000Z TO 2022-01-01T01:59:59.999Z]`
 */
f_creationDate?: string
/**
 * You can filter orders by creation date by concatenating the sufix `authorizedDate:` with the range date in Timestamp format. For example: 
 * - 1 Day: `authorizedDate:[2022-01-01T02:00:00.000Z TO 2022-01-02T01:59:59.999Z]`
 * - 1 Month: `authorizedDate:[2022-01-01T02:00:00.000Z TO 2022-02-01T01:59:59.999Z]` 
 * - 1 Year: `authorizedDate:[2022-01-01T02:00:00.000Z TO 2022-01-01T01:59:59.999Z]`
 */
f_authorizedDate?: string
/**
 * You can filter orders by Urchin Tracking Module (UTM) source.
 */
f_UtmSource?: string
/**
 * You can filter orders by using a seller's name.
 */
f_sellerNames?: string
/**
 * You can filter orders by using a Call Center Operator's identification.
 */
f_callCenterOperatorName?: string
/**
 * You can filter orders by sales channel's ([or trade policy](https://help.vtex.com/en/tutorial/how-trade-policies-work--6Xef8PZiFm40kg2STrMkMV)) name.
 */
f_salesChannel?: string
/**
 * You can filter orders by sales channel's ([or trade policy](https://help.vtex.com/en/tutorial/how-trade-policies-work--6Xef8PZiFm40kg2STrMkMV)) ID.
 */
salesChannelId?: string
/**
 * You can filter orders by affiliate ID.
 */
f_affiliateId?: string
/**
 * You can filter orders by the following [order status](https://help.vtex.com/en/tutorial/order-flow-and-status--tutorials_196): 
 * - `waiting-for-sellers-confirmation` 
 * - `payment-pending` 
 * - `payment-approved` 
 * - `ready-for-handling` 
 * - `handling` 
 * - `invoiced` 
 * - `canceled`
 */
f_status?: string
/**
 * When set as `true`, you retrieve [incomplete orders](https://help.vtex.com/en/tutorial/understanding-incomplete-orders), when set as `false`, you retrieve orders that are not incomplete.
 */
incompleteOrders?: boolean
/**
 * You can filter orders by payment type.
 */
f_paymentNames?: string
/**
 * You can filter orders by rates and benefits (promotions).
 */
f_RnB?: string
/**
 * You can search orders by using one of the following criterias: 
 * - SKU ID - `sku_Ids&sku_Ids` 
 * - Gift List ID - `listId&listId` 
 * - Transaction ID (TID) - `tid&tid` 
 * - PCI Connector's Transaction ID (TID) - `pci_tid&pci_tid` 
 * - Payment ID (PID) - `paymentId&paymentId` 
 * - Connector's NSU - `nsu&nsu`
 */
searchField?: string
/**
 * When set as `true`, this parameter filters orders made via [inStore](https://help.vtex.com/en/tracks/what-is-instore--zav76TFEZlAjnyBVL5tRc), and when set as `false`, it filters orders that were not made via inStore.
 */
f_isInstore?: boolean
}
}
/**
 * Changes the status of an order to indicate that it is in `handling`.
 * 
 * > Expect a `status 204` response with no content in case of a successful request. The store must validate this response to retry the call if the response differs from the `204` code, making this flow the store's responsibility. This endpoint can also respond with `status 500`. 
 * 
 *  ## Permissions 
 * 
 *  Any user or [application key](https://developers.vtex.com/docs/guides/api-authentication-using-application-keys) must have at least one of the appropriate [License Manager resources](https://help.vtex.com/en/tutorial/license-manager-resources--3q6ztrC8YynQf6rdc6euk3) to be able to successfully run this request. Otherwise they will receive a status code `403` error. These are the applicable resources for this endpoint:
 * 
 * | **Product** | **Category** | **Resource** |
 * | --------------- | ----------------- | ----------------- |
 * | OMS | OMS access | **Change order workflow status** |
 * 
 * You can [create a custom role](https://help.vtex.com/en/tutorial/roles--7HKK5Uau2H6wxE1rH5oRbc#creating-a-role) with that resource or use one of the following [predefined roles](https://help.vtex.com/en/tutorial/predefined-roles--jGDurZKJHvHJS13LnO7Dy):
 * 
 * | **Role** | **Resource** | 
 * | --------------- | ----------------- | 
 * | OMS - Full access | Change order workflow status |
 * | IntegrationProfile - Fulfillment Oms | Change order workflow status |
 * 
 * >❗ Assigning a [predefined role](https://help.vtex.com/en/tutorial/predefined-roles--jGDurZKJHvHJS13LnO7Dy) to users or application keys usually grants permission to multiple [License Manager resources](https://help.vtex.com/en/tutorial/license-manager-resources--3q6ztrC8YynQf6rdc6euk3). If some of these permissions are not necessary, consider creating a custom role instead. For more information regarding security, see [Best practices for using application keys](https://help.vtex.com/en/tutorial/best-practices-application-keys--7b6nD1VMHa49aI5brlOvJm). To learn more about machine authentication at VTEX, see [Authentication overview](https://developers.vtex.com/docs/guides/authentication).
 */
"POST /api/oms/pvt/orders/:orderId/start-handling": {

}
/**
 * Cancels an order using its identification code (`orderId`). A common scenario is when the seller has a problem fulfilling the order and requests the marketplace to cancel it. 
 * 
 * ## Orders that cannot be canceled 
 * 
 * The following situations do not allow order cancellation: 
 * 
 * - **Partial invoices:** [Partially invoiced](https://help.vtex.com/en/tracks/orders--2xkTisx4SXOWXQel8Jg8sa/q9GPspTb9cHlMeAZfdEUe) orders cannot be canceled. However, the customer can [change the order](https://developers.vtex.com/docs/guides/change-order) to replace or remove items from it. 
 * 
 * - **Invoiced status:** Orders with `invoiced` [status](https://help.vtex.com/en/tutorial/order-flow-and-status--tutorials_196) cannot be canceled. If the order has already been invoiced, you can use the [Order invoice notification](https://developers.vtex.com/docs/api-reference/orders-api#post-/api/oms/pvt/orders/-orderId-/invoice) endpoint to generate a return invoice. 
 * 
 * - **Incomplete orders:** [Incomplete orders](https://help.vtex.com/en/tutorial/how-incomplete-orders-work--tutorials_294) cannot be canceled. 
 * 
 * ## Declining order cancelation 
 * 
 * The order flow has a cancellation window (grace period) in which the customer can automatically cancel the order. Except for that period, the seller can [decline an order cancellation request](https://help.vtex.com/en/tutorial/declining-order-cancelation--F2n0h1TeQ5td540Gjyff4), regardless of whether the customer or the marketplace initiated it. 
 * 
 * For more information, see [Order canceling improvements](https://developers.vtex.com/docs/guides/order-canceling-improvements). 
 * 
 * ## Permissions
 * 
 * Any user or [application key](https://developers.vtex.com/docs/guides/api-authentication-using-application-keys) must have at least one of the appropriate [License Manager resources](https://help.vtex.com/en/tutorial/license-manager-resources--3q6ztrC8YynQf6rdc6euk3) to be able to successfully run this request. Otherwise they will receive a status code `403` error. These are the applicable resources for this endpoint:
 * 
 * | **Product** | **Category** | **Resource** |
 * | --------------- | ----------------- | ----------------- |
 * | OMS | OMS access | **Cancel order** | 
 * 
 * You can [create a custom role](https://help.vtex.com/en/tutorial/roles--7HKK5Uau2H6wxE1rH5oRbc#creating-a-role) with that resource or use one of the following [predefined roles](https://help.vtex.com/en/tutorial/predefined-roles--jGDurZKJHvHJS13LnO7Dy):
 * 
 * | **Role** | **Resource** | 
 * | --------------- | ----------------- | 
 * | OMS - Full access | Cancel order |
 * | IntegrationProfile - Fulfillment Oms | Cancel order |
 * 
 * >❗ Assigning a [predefined role](https://help.vtex.com/en/tutorial/predefined-roles--jGDurZKJHvHJS13LnO7Dy) to users or application keys usually grants permission to multiple [License Manager resources](https://help.vtex.com/en/tutorial/license-manager-resources--3q6ztrC8YynQf6rdc6euk3). If some of these permissions are not necessary, consider creating a custom role instead. For more information regarding security, see [Best practices for using application keys](https://help.vtex.com/en/tutorial/best-practices-application-keys--7b6nD1VMHa49aI5brlOvJm). 
 * 
 * To learn more about machine authentication at VTEX, see [Authentication overview](https://developers.vtex.com/docs/guides/authentication).
 */
"POST /api/oms/pvt/orders/:orderId/cancel": {
body: {
/**
 * Reason for cancelling the order.
 */
reason?: string
}
response: {
/**
 * Date and time when the notification was received.
 */
date?: string
/**
 * Identification of the order in the seller.
 */
orderId?: string
/**
 * Protocol code generated by the update. It may be `null`.
 */
receipt?: string
}
}
/**
 * This request allows [modifying an order](https://help.vtex.com/en/tutorial/changing-items-from-a-completed-order--tutorials_190) by:
 * 
 * - Adding items to an order.
 * 
 * - Removing items from an order.
 * 
 * - Applying discounts to the total value of the order.
 * 
 * - Incrementing the total value of the order. 
 * 
 *  >ℹ️ You can use the [Create order modifications](https://developers.vtex.com/docs/api-reference/orders-api#patch-/api/order-system/orders/-changeOrderId-/changes) endpoint for an improved order modification experience.
 * 
 *  > **Timeout settings:** This is a synchronous API, which means the application requests data and waits until a value is returned. This behavior can cause timeout errors. To avoid them, we recommend setting the timeout in 20 seconds.
 * 
 * In order modifications scenarios, it is possible to insert a [Partial invoice](https://help.vtex.com/en/tracks/orders--2xkTisx4SXOWXQel8Jg8sa/q9GPspTb9cHlMeAZfdEUe). The total value of the order will be updated after the insertion of the invoice, even when there is a partial invoice scenario. The updated value is settled by the VTEX Payment Gateway, and the customer reimbursement is automatic. 
 * 
 * This action can only be done for orders in the following status:
 * 
 * - `handling`
 * 
 * - `waiting-for-fulfillment`
 * 
 * - `ready for invoicing` 
 * 
 * ## Permissions
 * 
 * Any user or [application key](https://developers.vtex.com/docs/guides/authentication-overview#application-keys) must have at least one of the appropriate [License Manager resources](https://help.vtex.com/en/tutorial/license-manager-resources--3q6ztrC8YynQf6rdc6euk3) to be able to successfully run this request. Otherwise they will receive a status code `403` error. These are the applicable resources for this endpoint:
 * 
 * | **Product** | **Category** | **Resource** |
 * | --------------- | ----------------- | ----------------- |
 * | Checkout | CheckoutResources | **Orders Full Access** |
 * | OMS | OMS access | **Cancel order** |
 * | OMS | OMS access | **Change order** |
 * 
 * You can [create a custom role](https://help.vtex.com/en/tutorial/roles--7HKK5Uau2H6wxE1rH5oRbc#creating-a-role) with that resource or use one of the following [predefined roles](https://help.vtex.com/en/tutorial/predefined-roles--jGDurZKJHvHJS13LnO7Dy):
 * 
 * | **Role** | **Resource** | 
 * | --------------- | ----------------- | 
 * | Checkout Admin | Orders Full Access |
 * | OMS - Full access | <p>Cancel order</p><p>Change order</p> |
 * | IntegrationProfile - Fulfillment Oms | <p>Cancel order</p><p>Change order</p> |
 * | IntegrationProfile - Fulfillment Gateway | Cancel order |
 * | IntegrationProfile - Fulfillment Gateway Oms | <p>Cancel order</p><p>Change order</p> |
 * | inStore Sales Person | <p>Cancel order</p><p>Change order</p> |
 * 
 * >❗ Assigning a [predefined role](https://help.vtex.com/en/tutorial/predefined-roles--jGDurZKJHvHJS13LnO7Dy) to users or application keys usually grants permission to multiple [License Manager resources](https://help.vtex.com/en/tutorial/license-manager-resources--3q6ztrC8YynQf6rdc6euk3). If some of these permissions are not necessary, consider creating a custom role instead. For more information regarding security, see [Best practices for using application keys](https://help.vtex.com/en/tutorial/best-practices-application-keys--7b6nD1VMHa49aI5brlOvJm).
 * 
 * To learn more about machine authentication at VTEX, see [Authentication overview](https://developers.vtex.com/docs/guides/authentication-overview#machine-authentication).
 */
"POST /api/oms/pvt/orders/:orderId/changes": {
body: {
/**
 * Request identification of the modification. Only the first modification made with each `requestId` will be effective on a given order. Use different IDs for different modifications to the same order.
 */
requestId: string
/**
 * Reason for order modification. This may be shown to the shopper in the UI or transactional emails.
 */
reason: string
/**
 * This field can be used to apply a discount to the total value of the order. Value in cents.
 */
discountValue: number
/**
 * This field can be used to increment the total value of the order. Value in cents.
 */
incrementValue: number
/**
 * List of items that should be removed from the order.
 */
itemsRemoved?: {
/**
 * SKU ID of the item being removed.
 */
id: string
/**
 * Price of the item being removed in cents.
 */
price: number
/**
 * Amount of items to be removed.
 */
quantity: number
}[]
/**
 * List of items that should be added to the order.
 */
itemsAdded?: {
/**
 * SKU ID of the item being added.
 */
id: string
/**
 * Price of the item being added in cents.
 */
price: number
/**
 * Amount of items to be added.
 */
quantity: number
}[]
}
response: {
/**
 * Date of order modification.
 */
date?: string
/**
 * ID of the order.
 */
orderId?: string
/**
 * Receipt identification.
 */
receipt?: string
}
}
/**
 * Add a Log in Interactions Order Array.
 */
"POST /api/oms/pvt/orders/:orderId/interactions": {
body: {
/**
 * Source information.
 */
source: string
/**
 * Interactions message.
 */
message: string
}
}
/**
 * This request is used for [invoicing an order](https://help.vtex.com/en/tracks/orders--2xkTisx4SXOWXQel8Jg8sa/2WgQrlHTyVo4hLjhUs1LMT). Entering the order's invoice means it was successfully completed, and the order status can be changed to the `invoiced` in the [order flow](https://help.vtex.com/en/tutorial/order-flow-and-status--tutorials_196). Once an order is `invoiced`, its status cannot be changed. 
 * 
 * After the insertion of the invoice, the order's total value will be updated, even in [partial invoice](https://help.vtex.com/en/tracks/orders--2xkTisx4SXOWXQel8Jg8sa/q9GPspTb9cHlMeAZfdEUe) scenarios. 
 * 
 * >❗ To avoid rounding errors, we recommend always sending the object of items being invoiced. 
 * 
 * ## Partial invoices 
 * 
 * After adding a [partial invoice](https://help.vtex.com/en/tracks/orders--2xkTisx4SXOWXQel8Jg8sa/q9GPspTb9cHlMeAZfdEUe), the order's value will be updated, corresponding to a partial settled value in the VTEX payment gateway. 
 * 
 * Partially invoiced orders cannot be canceled, and cancellation attempts will result in a `400` status code error. If the customer wants to replace or remove items, it is possible to [change the order](https://developers.vtex.com/docs/guides/change-order). 
 * 
 * > The partial invoices feature is available for all VTEX stores. The partial settlement in the gateway is in Beta, and requires a connector with the Payment Provider Protocol. 
 * 
 * ## Returning items 
 * 
 * Besides using this endpoint for generating invoices for sold items, you can use it for generating invoices for returned items. You determine this in the request body `type` field by choosing one of the following values: 
 * 
 * - `output`: selling order invoice. 
 * 
 * - `input`: returning items invoice. 
 * 
 * Be aware of generating return invoices only after the full order amount was invoiced, otherwise, no refund will occur. 
 * 
 * ## Changing the receipt code 
 * 
 * Every time this endpoint is called using the same `invoiceNumber`, a new `receipt` code is generated, and it overrides the previous one. By doing this, you cannot change other information, only the `receipt` code.
 * 
 * ## Integration with marketplaces 
 * 
 * The invoice should be pushed to the fulfillment account, not to the marketplace account. Once the order is invoiced, the seller should use this request to send the invoice information to the marketplace. 
 * 
 * This endpoint is also used by the seller to send the order tracking information. However, this only should be done after the seller has the tracking information. 
 * 
 * ## Permissions
 * 
 * Any user or [application key](https://developers.vtex.com/docs/guides/api-authentication-using-application-keys) must have at least one of the appropriate [License Manager resources](https://help.vtex.com/en/tutorial/license-manager-resources--3q6ztrC8YynQf6rdc6euk3) to be able to successfully run this request. Otherwise they will receive a status code `403` error. These are the applicable resources for this endpoint:
 * 
 * | **Product** | **Category** | **Resource** |
 * | --------------- | ----------------- | ----------------- |
 * | OMS | OMS access | **Notify invoice** |
 * | OMS | OMS access | **Notify refund** | 
 * 
 * You can [create a custom role](https://help.vtex.com/en/tutorial/roles--7HKK5Uau2H6wxE1rH5oRbc#creating-a-role) with that resource or use one of the following [predefined roles](https://help.vtex.com/en/tutorial/predefined-roles--jGDurZKJHvHJS13LnO7Dy):
 * 
 * | **Role** | **Resource** | 
 * | --------------- | ----------------- | 
 * | OMS - Full access | Cancel order |
 * | IntegrationProfile - Fulfillment Oms | Cancel order |
 * 
 * >❗ Assigning a [predefined role](https://help.vtex.com/en/tutorial/predefined-roles--jGDurZKJHvHJS13LnO7Dy) to users or application keys usually grants permission to multiple [License Manager resources](https://help.vtex.com/en/tutorial/license-manager-resources--3q6ztrC8YynQf6rdc6euk3). If some of these permissions are not necessary, consider creating a custom role instead. For more information regarding security, see [Best practices for using application keys](https://help.vtex.com/en/tutorial/best-practices-application-keys--7b6nD1VMHa49aI5brlOvJm). 
 * 
 * To learn more about machine authentication at VTEX, see [Authentication overview](https://developers.vtex.com/docs/guides/authentication).
 */
"POST /api/oms/pvt/orders/:orderId/invoice": {
body: {
/**
 * The type of invoice. There are two possible values: **Output** and **Input**. The Output type should be used when the invoice you are sending is a selling invoice. The Input type should be used when you send a return invoice.
 */
type: string
/**
 * The invoice date is when the order was [invoiced](https://help.vtex.com/en/tracks/orders--2xkTisx4SXOWXQel8Jg8sa/2WgQrlHTyVo4hLjhUs1LMT) in the VTEX platform, and the `IssuanceDate` is the date when the merchant registers the order's invoice in the store's system. The `IssuanceDate` can be different from the invoice date, because the merchant can register the invoice days or even months after order invoicing. You must add date and time in this field.
 */
issuanceDate: string
/**
 * Unique code that identifies the invoice. When you call this endpoint using the same invoice number, you generate a new `receipt` code.
 */
invoiceNumber: (null | string)
/**
 * Total amount being invoiced in cents. Must be greater than 0. Do not use any decimal separator. For instance, `$24.99` should be represented as `2499`.
 */
invoiceValue: string
/**
 * Information about invoice key.
 */
invoiceKey?: (null | string)
/**
 * URL of the invoice. Can be used to send the URL of an XML file, for example, which is useful for some integrations.
 */
invoiceUrl?: (null | string)
/**
 * XML text of the invoice, not the URL. This field is very important for external marketplace integrations such as Mercado Libre.
 */
embeddedInvoice?: (null | string)
/**
 * The name of the carrier responsible for delivering the order. *This field should only be used when sending the **tracking** information. When the request is used for sending the invoice, this field should be left empty (`""`)*.
 */
courier?: (null | string)
/**
 * The number code that identifies the order tracking. *This field should only be used when sending the **tracking** information. When the request is used for sending the invoice, this field should be left empty (`""`)*.
 */
trackingNumber?: (null | string)
/**
 * The URL used to track the order. *This field should only be used when sending the **tracking** information. When the request is used for sending the invoice, this field should be left empty (`""`)*.
 */
trackingUrl?: (null | string)
/**
 * Order dispatch date. May be `null`.
 */
dispatchedDate?: (null | string)
/**
 * Array containing the SKUs that are being invoiced.
 */
items: {
/**
 * ID of the SKU being invoiced.
 */
id: string
/**
 * Price in cents of the SKU being invoiced. Do not use a decimal separator, for example, the price $24.99 corresponds to `2499`. You must insert the SKU unitary price because the VTEX system will multiply the price over the quantity.
 */
price: number
/**
 * You can use this field for additional information about the SKU being invoiced.
 */
description?: string
/**
 * Quantity currently in inventory of the SKU being invoiced.
 */
quantity: number
}[]
minItems?: 0
}
response: {
/**
 * Date and time when the notification was received.
 */
date?: string
/**
 * Identification of the order in the seller.
 */
orderId?: string
/**
 * Protocol code generated by the update that identifies the receipt. Every time this endpoint is called using the same `invoiceNumber`, a new `receipt` code is generated, and it overrides the previous one.
 */
receipt?: string
}
}
/**
 * Update a given order, adding its tracking number to its [Partial invoice](https://help.vtex.com/en/tracks/pedidos--2xkTisx4SXOWXQel8Jg8sa/q9GPspTb9cHlMeAZfdEUe).
 * 
 * After using this call to add a tracking number to an order, you can use the [Update order tracking status](https://developers.vtex.com/docs/api-reference/orders-api#put-/api/oms/pvt/orders/-orderId-/invoice/-invoiceNumber-/tracking) API request to add tracking events. 
 * 
 *  ## Permissions
 * 
 * Any user or [application key](https://developers.vtex.com/docs/guides/api-authentication-using-application-keys) must have at least one of the appropriate [License Manager resources](https://help.vtex.com/en/tutorial/license-manager-resources--3q6ztrC8YynQf6rdc6euk3) to be able to successfully run this request. Otherwise they will receive a status code `403` error. These are the applicable resources for this endpoint:
 * 
 * | **Product** | **Category** | **Resource** |
 * | --------------- | ----------------- | ----------------- |
 * | OMS | OMS access | **Notify invoice** |
 * 
 * You can [create a custom role](https://help.vtex.com/en/tutorial/roles--7HKK5Uau2H6wxE1rH5oRbc#creating-a-role) with that resource or use one of the following [predefined roles](https://help.vtex.com/en/tutorial/predefined-roles--jGDurZKJHvHJS13LnO7Dy):
 * 
 * | **Role** | **Resource** | 
 * | --------------- | ----------------- | 
 * | OMS - Full access | Notify invoice |
 * | IntegrationProfile - Fulfillment Oms | Notify invoice |
 * 
 * >❗ Assigning a [predefined role](https://help.vtex.com/en/tutorial/predefined-roles--jGDurZKJHvHJS13LnO7Dy) to users or application keys usually grants permission to multiple [License Manager resources](https://help.vtex.com/en/tutorial/license-manager-resources--3q6ztrC8YynQf6rdc6euk3). If some of these permissions are not necessary, consider creating a custom role instead. For more information regarding security, see [Best practices for using application keys](https://help.vtex.com/en/tutorial/best-practices-application-keys--7b6nD1VMHa49aI5brlOvJm). To learn more about machine authentication at VTEX, see [Authentication overview](https://developers.vtex.com/docs/guides/authentication).
 */
"PATCH /api/oms/pvt/orders/:orderId/invoice/:invoiceNumber": {
body: UpdatepartialinvoiceSendTrackingNumberRequest
response: UpdatepartialinvoiceSendTrackingNumber
}
/**
 * This endpoint sends a tracking event to an order that already has a tracking number registered to its invoice.
 * 
 * This request is not meant to send a tracking number and URL to the invoice. If you wish to send a tracking number and URL to an order, use the [Update order's partial invoice](https://developers.vtex.com/docs/api-reference/orders-api#patch-/api/oms/pvt/orders/-orderId-/invoice/-invoiceNumber-) endpoint. For more information, see [Partial invoice](https://help.vtex.com/en/tracks/partial-invoices--2xkTisx4SXOWXQel8Jg8sa/q9GPspTb9cHlMeAZfdEUe) scenarios.
 * 
 * This endpoint applies to orders with any shipping type, whether delivery or [pickup](https://help.vtex.com/en/tutorial/pickup-points--2fljn6wLjn8M4lJHA6HP3R). 
 * 
 * ## Permissions
 * 
 * Any user or [application key](https://developers.vtex.com/docs/guides/api-authentication-using-application-keys) must have at least one of the appropriate [License Manager resources](https://help.vtex.com/en/tutorial/license-manager-resources--3q6ztrC8YynQf6rdc6euk3) to be able to successfully run this request. Otherwise they will receive a status code `403` error. These are the applicable resources for this endpoint:
 * 
 * | **Product** | **Category** | **Resource** |
 * | --------------- | ----------------- | ----------------- |
 * | OMS | OMS access | **Notify invoice** |
 * 
 * You can [create a custom role](https://help.vtex.com/en/tutorial/roles--7HKK5Uau2H6wxE1rH5oRbc#creating-a-role) with that resource or use one of the following [predefined roles](https://help.vtex.com/en/tutorial/predefined-roles--jGDurZKJHvHJS13LnO7Dy):
 * 
 * | **Role** | **Resource** | 
 * | --------------- | ----------------- | 
 * | OMS - Full access | Notify invoice |
 * | IntegrationProfile - Fulfillment Oms | Notify invoice |
 * 
 * >❗ Assigning a [predefined role](https://help.vtex.com/en/tutorial/predefined-roles--jGDurZKJHvHJS13LnO7Dy) to users or application keys usually grants permission to multiple [License Manager resources](https://help.vtex.com/en/tutorial/license-manager-resources--3q6ztrC8YynQf6rdc6euk3). If some of these permissions are not necessary, consider creating a custom role instead. For more information regarding security, see [Best practices for using application keys](https://help.vtex.com/en/tutorial/best-practices-application-keys--7b6nD1VMHa49aI5brlOvJm). To learn more about machine authentication at VTEX, see [Authentication overview](https://developers.vtex.com/docs/guides/authentication).
 */
"PUT /api/oms/pvt/orders/:orderId/invoice/:invoiceNumber/tracking": {
body: UpdateTrackingStatusRequest
}
/**
 * List all order conversations of an order by its order ID.
 */
"GET /api/oms/pvt/orders/:orderId/conversation-message": {

}
/**
 * Retrieves transaction details by order ID. All events in the transaction will be registered in this call's response body. 
 * 
 * In scenarios of [order changes](https://developers.vtex.com/vtex-rest-api/reference/registerchange), it is possible to insert a [Partial invoice](https://help.vtex.com/en/tracks/pedidos--2xkTisx4SXOWXQel8Jg8sa/q9GPspTb9cHlMeAZfdEUe). The total value of the order will be updated after the insertion of the invoice, even when there is a [Partial invoice](https://help.vtex.com/en/tracks/pedidos--2xkTisx4SXOWXQel8Jg8sa/q9GPspTb9cHlMeAZfdEUe) scenario. The updated value is settled by VTEX's Payment Gateway. The reimbursement for the shopper is automatic.
 */
"GET /api/oms/pvt/orders/:orderId/payment-transaction": {
response: GetPaymenttransaction
}
/**
 * Send a payment notification of a given order, by order ID. 
 * 
 * ## Permissions
 * 
 * Any user or [application key](https://developers.vtex.com/docs/guides/api-authentication-using-application-keys) must have at least one of the appropriate [License Manager resources](https://help.vtex.com/en/tutorial/license-manager-resources--3q6ztrC8YynQf6rdc6euk3) to be able to successfully run this request. Otherwise they will receive a status code `403` error. These are the applicable resources for this endpoint:
 * 
 * | **Product** | **Category** | **Resource** |
 * | --------------- | ----------------- | ----------------- |
 * | OMS | OMS access | **Notify payment** |
 * 
 * You can [create a custom role](https://help.vtex.com/en/tutorial/roles--7HKK5Uau2H6wxE1rH5oRbc#creating-a-role) with that resource or use one of the following [predefined roles](https://help.vtex.com/en/tutorial/predefined-roles--jGDurZKJHvHJS13LnO7Dy):
 * 
 * | **Role** | **Resource** | 
 * | --------------- | ----------------- | 
 * | OMS - Full access | Notify payment |
 * | IntegrationProfile - Fulfillment Oms | Notify payment |
 * 
 * >❗ Assigning a [predefined role](https://help.vtex.com/en/tutorial/predefined-roles--jGDurZKJHvHJS13LnO7Dy) to users or application keys usually grants permission to multiple [License Manager resources](https://help.vtex.com/en/tutorial/license-manager-resources--3q6ztrC8YynQf6rdc6euk3). If some of these permissions are not necessary, consider creating a custom role instead. For more information regarding security, see [Best practices for using application keys](https://help.vtex.com/en/tutorial/best-practices-application-keys--7b6nD1VMHa49aI5brlOvJm). To learn more about machine authentication at VTEX, see [Authentication overview](https://developers.vtex.com/docs/guides/authentication).
 */
"POST /api/oms/pvt/orders/:orderId/payments/:paymentId/payment-notification": {

}
/**
 * Get feed order status (deprecated)
 */
"GET /api/oms/pvt/feed/orders/status": {
searchParams: {
/**
 * Maximum lot.
 */
maxLot: string
}
}
/**
 * The Orders Feed v3 is the best way to create order integrations. Below you can find details on the configuration API specification, and to know more see our [Feed v3 guide](https://developers.vtex.com/vtex-rest-api/docs/orders-feed) and our [order integration guide](https://developers.vtex.com/vtex-rest-api/docs/erp-integration-set-up-order-integration).
 * 
 * > 📘 Onboarding guide 
 * >
 * > Check the new [Orders onboarding guide](https://developers.vtex.com/vtex-rest-api/docs/orders-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Orders and is organized by focusing on the developer's journey.
 * 
 * 
 */
"GET /api/orders/feed/config": {
response: {
/**
 * Information on how orders are filtered to show on the feed.
 */
filter?: {
/**
 * Determines what orders appear in the feed and how they are filtered. If a feed has the `FromWorkflow` type configuration, it will receive order updates only when order's statuses change and orders can be filtered by status, using the `status` field. A feed with the `FromOrders` type configuration gets updates whenever any change is made to an order. in this case, orders can be filtered by any property, according to JSONata expressions set in the `expression` field.
 */
type?: string
/**
 * List of order statuses that should be included in the feed. This should only be used in case `type` is `FromWorkflow`.
 */
status?: string[]
/**
 * JSONata query expression that defines what conditions must be met for an order to be included in the feed. This should only be used in case `type` is `FromOrders`.
 */
expression?: string
/**
 * Sets a limit to how many times a specific order shows on the feed, after it first meets filtering conditions. Using the `FromOrders` type configuration with JSONata filtering expressions might cause orders to appear more than once on a feed, whenever changes are made to that order. If this field is `false` orders will appear in the feed only once.
 */
disableSingleFire?: boolean
}
/**
 * Information that define the functioning of the queue.
 */
queue?: {
/**
 * Period of time for which an item is not visible in the feed after it has been retrieved with the Get feed items request. Measured in seconds.
 */
visibilityTimeoutInSeconds?: number
/**
 * Maximum life span of an order update after it gets to the feed. When a feed item is on the feed for this period of time, it is removed from the feed. Measured in seconds. The maximum number accepted in this field is `1209600` seconds.
 */
MessageRetentionPeriodInSeconds?: number
}
/**
 * Current number of messages in the feed, including messages that may not be visible due to time out after retrieval.
 */
quantity?: number
/**
 * Aproximate age of the oldest message in the feed, measured in seconds.
 */
approximateAgeOfOldestMessageInSeconds?: number
}
}
/**
 * The Orders Feed v3 is the best way to create order integrations. Below you can find details on the configuration API specification, and to know more see our [Feed v3 guide](https://developers.vtex.com/vtex-rest-api/docs/orders-feed) and our [order integration guide](https://developers.vtex.com/vtex-rest-api/docs/erp-integration-set-up-order-integration)
 * 
 * There are two types of filtering that can be used. The `FromWorkflow` type filters orders by status, whereas the `FromOrders` type uses JSONata expressions to filter orders according to any property in the orders JSON document. This enables stores to filter delivered orders and orders in which products have been added or removed, for example. To learn more, access the [JSONata documentation](https://docs.jsonata.org/overview.html) and test filtering JSONata expressions with our [Test JSONata expression](https://developers.vtex.com/docs/api-reference/orders-api#post-/api/orders/expressions/jsonata) endpoint.
 */
"POST /api/orders/feed/config": {
body: {
/**
 * Object with type and status that will filter feed orders.
 */
filter: {
/**
 * Determines what orders appear in the feed and how they are filtered. There are two possible values:
 * 
 * -`FromWorkflow`: the feed will receive order updates only when order's statuses change and orders can be filtered by status, using the `status` field described below.
 * 
 * -`FromOrders`: the feed gets updates whenever any change is made to an order. In this case, orders can be filtered by any property, according to JSONata expressions passed in the `expression` field described below.
 */
type: string
/**
 * List of order statuses that should be included in the feed. This should only be used in case `type` is set to `FromWorkflow`. The status event will be removed, if it can't deliver a message more than 100 times, 4 days progressively. 
 * 
 * **Status available to filter** 
 * 
 * - order-created 
 * 
 * - on-order-completed 
 * 
 * - on-order-completed-ffm 
 * 
 * - payment-pending 
 * 
 * - waiting-for-order-authorization 
 * 
 * - approve-payment 
 * 
 * - payment-approved 
 * 
 * - request-cancel 
 * 
 * - waiting-for-seller-decision 
 * 
 * - waiting-ffmt-authorization 
 * 
 * - waiting-for-authorization 
 * 
 * - waiting-for-manual-authorization 
 * 
 * - authorize-fulfillment 
 * 
 * - order-create-error 
 * 
 * - order-creation-error 
 * 
 * - window-to-cancel 
 * 
 * - window-to-change-seller 
 * 
 * - waiting-for-mkt-authorization 
 * 
 * - waiting-seller-handling 
 * 
 * - ready-for-handling 
 * 
 * - start-handling 
 * 
 * - handling 
 * 
 * - invoice-after-cancellation-deny 
 * 
 * - order-accepted 
 * 
 * - invoice 
 * 
 * - invoiced 
 * 
 * - replaced 
 * 
 * - cancellation-requested 
 * 
 * - cancel 
 * 
 * - canceled.
 */
status?: string[]
/**
 * JSONata query expression that defines what conditions must be met for an order to be included in the feed. This should only be used in case `type` is set to `FromOrders`.
 */
expression?: string
/**
 * Sets a limit to how many times a specific order shows on the feed, after it first meets filtering conditions. Using the `FromOrders` type configuration with JSONata filtering expressions might cause orders to appear more than once on a feed, whenever changes are made to that order. If this field is `false` orders will appear in the feed only once.
 */
disableSingleFire?: boolean
}
/**
 * Object with information about timeout and message retention.
 */
queue: {
/**
 * Period of time for which an item becomes invisible after it has been [retrieved](https://developers.vtex.com/vtex-rest-api/reference/feed-v3#getfeedorderstatus1). Measured in seconds.
 */
visibilityTimeoutInSeconds: number
/**
 * Maximum life span of an order update in the feed. When a feed item is on the feed for this period of time, it is removed from the feed. Measured in seconds. The maximum number accepted in this field is `1209600` seconds.
 */
MessageRetentionPeriodInSeconds: number
}
}
}
/**
 * Deletes the configuration set up in [Feed v3](https://developers.vtex.com/docs/guides/orders-feed).
 */
"DELETE /api/orders/feed/config": {

}
/**
 * Retrieve items from [feed](https://developers.vtex.com/docs/guides/orders-feed) queue. 
 * 
 * The event will be removed if the message `send retry` is equal to, or greater than the maximum retention period.
 * 
 * > This API will return `404 Not Found` if there is no [Feed Configuration](https://developers.vtex.com/docs/guides/orders-feed) available for the given X-VTEX-API-AppKey.
 */
"GET /api/orders/feed": {
searchParams: {
/**
 * Lot quantity to retrieve. Maximum accepted value is 10.
 */
maxlot: string
}
response: Getfeedorderstatus[]
}
/**
 * Commit items in the [feed](https://developers.vtex.com/docs/guides/orders-feed) queue.
 */
"POST /api/orders/feed": {
body: {
/**
 * List of item handles to commit.
 */
handles: string[]
}
}
/**
 * Retrieves a given hook's configuration details. Learn more with the [orders hook guide](https://developers.vtex.com/vtex-rest-api/docs/orders-feed#hook). 
 * 
 * > 📘 Onboarding guide 
 * >
 * > Check the new [Orders onboarding guide](https://developers.vtex.com/vtex-rest-api/docs/orders-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Orders and is organized by focusing on the developer's journey.
 * 
 * 
 */
"GET /api/orders/hook/config": {
searchParams: {
/**
 * Customer email.
 */
clientEmail?: string
/**
 * Page number for result pagination.
 */
page?: string
/**
 * Page quantity for result pagination.
 */
per_page?: string
}
}
/**
 * Configures filtering rules applied to orders hook. Learn more with the [orders hook guide](https://developers.vtex.com/vtex-rest-api/docs/orders-feed#hook).
 * 
 * There are two types of filtering that can be used: 
 * 
 *  - `FromWorkflow`: filters orders by status.
 * 
 *  - `FromOrders`: uses JSONata expressions to filter orders according to any property in the orders JSON document.
 * 
 *  This enables stores to filter delivered orders and orders in which products have been added or removed, for example.
 * 
 * To learn more, access the [JSONata documentation](https://docs.jsonata.org/overview.html) and test filtering JSONata expressions with our [expressions API](https://developers.vtex.com/docs/api-reference/orders-api#post-/api/orders/expressions/jsonata).
 */
"POST /api/orders/hook/config": {
body: HookConfigurationRequest
response: HookConfiguration
}
/**
 * Deletes a given hook configuration.
 * 
 * Learn more with the [orders hook guide](https://developers.vtex.com/vtex-rest-api/docs/orders-feed#hook).
 */
"DELETE /api/orders/hook/config": {

}
/**
 * Lists all orders from a given customer, filtering by their email. 
 * 
 * > You can only access information from orders created in the last two years, and that same period is valid for customers through [My Account](https://help.vtex.com/en/tutorial/how-my-account-works--2BQ3GiqhqGJTXsWVuio3Xh). 
 * 
 * > Note that this request should be made by an [user](https://developers.vtex.com/docs/guides/user-authentication-and-login) or [an appKey / appToken pair](https://developers.vtex.com/docs/guides/api-authentication-using-application-keys) that is associated with the [Call center operator](https://help.vtex.com/en/tutorial/predefined-roles--jGDurZKJHvHJS13LnO7Dy#call-center-operator) role. Otherwise, it will return only orders from the same email informed in the `clientEmail` query parameter. 
 * 
 * ## Permissions
 * 
 * Any user or [application key](https://developers.vtex.com/docs/guides/api-authentication-using-application-keys) must have at least one of the appropriate [License Manager resources](https://help.vtex.com/en/tutorial/license-manager-resources--3q6ztrC8YynQf6rdc6euk3) to be able to successfully run this request. Otherwise they will receive a status code `403` error. These are the applicable resources for this endpoint:
 * 
 * | **Product** | **Category** | **Resource** |
 * | --------------- | ----------------- | ----------------- |
 * | OMS | OMS access | **View order** |
 * 
 * You can [create a custom role](https://help.vtex.com/en/tutorial/roles--7HKK5Uau2H6wxE1rH5oRbc#creating-a-role) with that resource or use one of the following [predefined roles](https://help.vtex.com/en/tutorial/predefined-roles--jGDurZKJHvHJS13LnO7Dy):
 * 
 * | **Role** | **Resource** | 
 * | --------------- | ----------------- | 
 * | Call center operator | View order |
 * | OMS - Read only | View order |
 * 
 * >❗ Assigning a [predefined role](https://help.vtex.com/en/tutorial/predefined-roles--jGDurZKJHvHJS13LnO7Dy) to users or application keys usually grants permission to multiple [License Manager resources](https://help.vtex.com/en/tutorial/license-manager-resources--3q6ztrC8YynQf6rdc6euk3). If some of these permissions are not necessary, consider creating a custom role instead. For more information regarding security, see [Best practices for using application keys](https://help.vtex.com/en/tutorial/best-practices-application-keys--7b6nD1VMHa49aI5brlOvJm). 
 * 
 * To learn more about machine authentication at VTEX, see [Authentication overview](https://developers.vtex.com/docs/guides/authentication).
 */
"GET /api/oms/user/orders": {
searchParams: {
/**
 * Customer email.
 */
clientEmail: string
/**
 * Page number for result pagination.
 */
page: string
/**
 * Page quantity for result pagination.
 */
per_page: string
}
response: Userorderslist
}
/**
 * Lists all details from an order, through the perspective of the customer who placed the order. 
 * 
 * > You can only access information from orders created in the last two years, and that same period is valid for customers through [My Account](https://help.vtex.com/en/tutorial/how-my-account-works--2BQ3GiqhqGJTXsWVuio3Xh). 
 * 
 * > Note that this request should be made by an [user](https://developers.vtex.com/docs/guides/user-authentication-and-login) or [an appKey / appToken pair](https://developers.vtex.com/docs/guides/api-authentication-using-application-keys) that is associated with the [Call center operator](https://help.vtex.com/en/tutorial/predefined-roles--jGDurZKJHvHJS13LnO7Dy#call-center-operator) role. Otherwise, it will return only orders from the same email informed in the `clientEmail` query parameter. 
 * 
 * ## Permissions
 * 
 * Any user or [application key](https://developers.vtex.com/docs/guides/api-authentication-using-application-keys) must have at least one of the appropriate [License Manager resources](https://help.vtex.com/en/tutorial/license-manager-resources--3q6ztrC8YynQf6rdc6euk3) to be able to successfully run this request. Otherwise they will receive a status code `403` error. These are the applicable resources for this endpoint:
 * 
 * | **Product** | **Category** | **Resource** |
 * | --------------- | ----------------- | ----------------- |
 * | OMS | OMS access | **View order** |
 * 
 * You can [create a custom role](https://help.vtex.com/en/tutorial/roles--7HKK5Uau2H6wxE1rH5oRbc#creating-a-role) with that resource or use one of the following [predefined roles](https://help.vtex.com/en/tutorial/predefined-roles--jGDurZKJHvHJS13LnO7Dy):
 * 
 * | **Role** | **Resource** | 
 * | --------------- | ----------------- | 
 * | Call center operator | View order |
 * | OMS - Read only | View order |
 * 
 * >❗ Assigning a [predefined role](https://help.vtex.com/en/tutorial/predefined-roles--jGDurZKJHvHJS13LnO7Dy) to users or application keys usually grants permission to multiple [License Manager resources](https://help.vtex.com/en/tutorial/license-manager-resources--3q6ztrC8YynQf6rdc6euk3). If some of these permissions are not necessary, consider creating a custom role instead. For more information regarding security, see [Best practices for using application keys](https://help.vtex.com/en/tutorial/best-practices-application-keys--7b6nD1VMHa49aI5brlOvJm). 
 * 
 * To learn more about machine authentication at VTEX, see [Authentication overview](https://developers.vtex.com/docs/guides/authentication).
 */
"GET /api/oms/user/orders/:orderId": {
searchParams: {
/**
 * Customer email.
 */
clientEmail: string
}
response: Userorderdetails
}
/**
 * This endpoint allows you to test a JSON document with a JSONata expression, returning `true` if the document meets the criteria posed in the expression, or `false` if it does not.
 * 
 * Since JSONata expressions can be used to filter order updates in the [Orders API feed and hook](https://developers.vtex.com/docs/guides/orders-feed), this endpoint can be used to test an expression's results before configuring the [feed or hook](https://developers.vtex.com/docs/guides/orders-feed).
 * 
 * Learn more about how to use JSONata expressions, in the [JSONata documentation](https://docs.jsonata.org/overview.html).
 */
"POST /api/orders/expressions/jsonata": {
body: {
/**
 * JSONata expression to be tested.
 */
Expression: string
/**
 * JSON document to be evaluated by the expression.
 */
Document: string
}
/**
 * Successful requests return the message `true`.
 */
response: boolean
}
/**
 * Retrieves a marketplace's window to change seller, that is, the period when it is possible to choose another seller to fulfill a given order after the original seller has canceled it.
 * 
 * The default period for this window is of 2 days, but it can be configured by the request Update window to change seller.
 */
"GET /api/checkout/pvt/configuration/window-to-change-seller": {
/**
 * Successful requests return the window to change seller value measured in days.
 */
response: number
}
/**
 * Updates a marketplace's window to change seller, that is, the period when it is possible to choose another seller to fulfill a given order after the original seller has canceled it.
 * 
 * It is possible to check the current window using the request Get window to change seller.
 */
"POST /api/checkout/pvt/configuration/window-to-change-seller": {
body: {
/**
 * Number of days after order cancelation by a seller, during which another seller may be assigned to fulfill the order.
 */
waitingTime: number
}
}
/**
 * This endpoint retrieves a history of every successful [Create order modifications request](https://developers.vtex.com/docs/api-reference/orders-api#patch-/api/order-system/orders/-changeOrderId-/changes) made to an order and provides detailed information about each request.
 * 
 * You can access an order's history using the `changeOrderId`, which corresponds to its `orderId`.
 * 
 * > If you want detailed information about a single modification request, you can use the endpoint [Get order modifications details](https://developers.vtex.com/docs/api-reference/orders-api#get-/api/order-system/orders/-changeOrderId-/changes/-changeRequestId-).
 * 
 * ## Permissions
 * 
 * Any user or [application key](https:/developers.vtex.com/docs/guides/authentication-overview#application-keys) must have at least one of the appropriate [License Manager resources](https:/help.vtex.com/en/tutorial/license-manager-resources--3q6ztrC8YynQf6rdc6euk3) to be able to successfully run this request. Otherwise they will receive a status code `403` error. These are the applicable resources for this endpoint:
 * 
 * | **Product** | **Category** | **Resource** |
 * | --------------- | ----------------- | ----------------- |
 * | Checkout | CheckoutResources | **Orders Full Access** |
 * | OMS | OMS access | **Cancel order** |
 * | OMS | OMS access | **Change order** |
 * 
 * You can [create a custom role](https://help.vtex.com/en/tutorial/roles--7HKK5Uau2H6wxE1rH5oRbc#creating-a-role) with that resource or use one of the following [predefined roles](https://help.vtex.com/en/tutorial/predefined-roles--jGDurZKJHvHJS13LnO7Dy):
 * 
 * | **Role** | **Resource** | 
 * | --------------- | ----------------- | 
 * | Checkout Admin | Orders Full Access |
 * | OMS - Full access | <p>Cancel order</p><p>Change order</p> |
 * | IntegrationProfile - Fulfillment Oms | <p>Cancel order</p><p>Change order</p> |
 * | IntegrationProfile - Fulfillment Gateway | Cancel order |
 * | IntegrationProfile - Fulfillment Gateway Oms | <p>Cancel order</p><p>Change order</p> |
 * | inStore Sales Person | <p>Cancel order</p><p>Change order</p> |
 * 
 * >❗ Assigning a [predefined role](https://help.vtex.com/en/tutorial/predefined-roles--jGDurZKJHvHJS13LnO7Dy) to users or application keys usually grants permission to multiple [License Manager resources](https://help.vtex.com/en/tutorial/license-manager-resources--3q6ztrC8YynQf6rdc6euk3). If some of these permissions are not necessary, consider creating a custom role instead. For more information regarding security, see [Best practices for using application keys](https://help.vtex.com/en/tutorial/best-practices-application-keys--7b6nD1VMHa49aI5brlOvJm).
 * 
 * To learn more about machine authentication at VTEX, see [Authentication overview](https://developers.vtex.com/docs/guides/authentication-overview#machine-authentication).
 */
"GET /api/order-system/orders/:changeOrderId/changes": {
searchParams: {
/**
 * Name of the VTEX account that created the order.
 */
an: string
}
response: {
/**
 * Array with order modifications requests details.
 */
requests: {
/**
 * Unique code that identifies an order modification.
 */
requestId: string
/**
 * Code that identifies the transaction of modifying the orders in the [order flow](https://help.vtex.com/en/tutorial/order-flow-and-status--tutorials_196).
 */
workflowId: string
/**
 * Reason that motivated the order modifications.
 */
reason: string
/**
 * This field shows if it was applied a manual price for the total order amount. The value is in cents.
 */
manualDiscountValue: number
/**
 * This field shows if an increment value was applied to the total order amount. The value is in cents.
 */
manualIncrementValue: number
/**
 * This field shows how much the order total price is, considering that price modifications might have been made. The value is in cents.
 */
totalChangeValue: number
/**
 * Array containing total costs information.
 */
totals: {
/**
 * Changing price type, for example the item price or shipping costs.
 */
id?: string
/**
 * Changing price name.
 */
name?: string
/**
 * Changing price value in cents.
 */
value?: number
}[]
/**
 * Information about an `add` operation, when there was one. It will have the same schema of `request.replace.to`.
 */
add: (null | {

})
/**
 * Information about a `remove` operation, when there was one. It will have the same schema of `request.replace.from`.
 */
remove: (null | {

})
/**
 * Array with information about the replacement operation performed.
 */
replace: {
from: From2
to: To2
}[]
/**
 * Date and time of the request. The value is in UTC ISO 8601 format `yyyy-mm-ddThh:mm:ss.sssZ`.
 */
date: string
origin: OriginV2
settings: Settings
}[]
/**
 * Array containing previous changing order actions history.
 */
actions: (null | {

})[]
}
}
/**
 * [Order modifications](https://help.vtex.com/en/tutorial/how-change-order-works-beta--56TO0bOFXsfmpc7YZ3wIUZ) feature allows you to modify an order, whether the modification is motivated by customer mistakes, product unavailability, or others. Both sellers and marketplaces can use this endpoint and modify orders in multiple scenarios, and it is possible to make a single modification or combine multiple ones in the same request. 
 * The possible order modifications operations you can perform are the following:
 * - **Add:** Adding items, quantity, or product weight.
 * - **Remove:** Removing a part of items or the total quantity.
 * - **Replace:** Changing items' quantity, weight, or price. You can also replace one or more items with different ones, including weighable products. In addition, you can change your clients's data. 
 * 
 * >❗ When removing or adding items to an order, your [inventory](https://help.vtex.com/en/tutorial/inventory-management--tutorials_139) is not automatically updated. You can use the [Update inventory by SKU and warehouse](https://developers.vtex.com/docs/api-reference/logistics-api#put-/api/logistics/pvt/inventory/skus/-skuId-/warehouses/-warehouseId-) endpoint.
 * 
 * The next sections are listed below:
 * - Number of modifications per order 
 * - Acceptable order status for modifications 
 * - Order modifications and price 
 * - Combining multiple operations 
 * 
 * ## Number of modifications per order
 * Besides being able to combine multiple modification operations - add, remove, and replace - in a single request, you can make different modification requests, and there is no limit to how many times an order can be modified.
 * 
 * Each order has its modifications history, you can retrieve it using the [Get order modifications history](https://developers.vtex.com/docs/api-reference/orders-api#get-/api/order-system/orders/-changeOrderId-/changes) endpoint.
 * 
 * ## Acceptable order status for modifications
 * You can only modify an order when it is one of the following [order flow](https://help.vtex.com/en/tutorial/order-flow-and-status--tutorials_196) status:
 * - `handling`
 * - `waiting-for-fulfillment` 
 * - `ready for invoicing` 
 * 
 * It is not possible to modify an order when the payment transaction is complete.
 * 
 * ## Order modifications and price
 * When you add, remove or replace items using this endpoint, the order and payment transaction values are automatically updated. Order modifications calculates the update of the following values:
 * - Item value
 * - Total value 
 * 
 * **Example:** If you send the request body for replacing items without the unit multiplier (`unitMultiplier`) or measurement (`measurementUnit`), Order modifications will get this information on your store's Catalog, Pricing and Payment systems. 
 * >⚠️ Increasing the price of an order is allowed only when the order was paid by credit card, [payable notes](https:/help.vtex.com/en/tutorial/setting-up-payments-with-promissory--5pW7avTwtyQcMu4uiW8quQ), cash, or [credit control](https:/help.vtex.com/en/tutorial/customer-credit-overview--1uIqTjWxIIIEW0COMg4uE0). In addition, the [acquirer](https:/help.vtex.com/en/tutorial/what-is-an-acquirer--7N1oRTG8dGmOiIugC0cs4E) must allow transactions without the CVV code and two charging transactions in the same order. 
 * 
 * For order modifications with discounts, Order Management System (OMS) considers that you still can modify the order's transactional value, as long as its status in Transaction Details is not `Finished`. 
 * 
 * ## Order modifications and payment transaction flow 
 * 
 * An order's [transaction flow](https://help.vtex.com/tracks/payments--6GAS7ZzGAm7AGoEAwDbwJG/1xjzgJZvqwaI1rfxLMCC3Y) goes through various payment statuses before its conclusion. Within certain conditions, it is possible to modify settled orders. The requirements are the following:
 * 
 * - The order's [payment method](https://help.vtex.com/en/tutorial/difference-between-payment-methods-and-payment-conditions--3azJenhGFyUy2gsocms42Q) is a credit card.
 * - The settlement occurs before the order is invoiced.
 * - The payment connector is configured to allow partial refunds.
 * 
 * > Currently, [Adyen](https://help.vtex.com/en/tutorial/configuring-payment-with-adyenv3--7xAz67E2Eg63LWCQNjVdwv) is the only payment connector that supports that operation.
 * 
 * If the order modification increases or decreases the cost for the customer, the platform has the following behavior:
 * 
 * - **Smaller price after order modification:**
 *     - If the payment is marked as `settled` in the [transaction flow](https://help.vtex.com/tracks/payments--6GAS7ZzGAm7AGoEAwDbwJG/1xjzgJZvqwaI1rfxLMCC3Y), an automatic notification is sent to the payment [gateway](https://help.vtex.com/tracks/payments--6GAS7ZzGAm7AGoEAwDbwJG/kdPbEIWf8Xq8tESQvViMB#gateway) to reimburse the customer for the difference.
 *     - If the payment hasn't been settled, an automatic notification is sent to the payment gateway to change the order's total amount.
 * - **Higher price after order modification:** An automatic notification is sent to the payment gateway to require the customer to pay for the additional cost.
 * 
 * ## Combining multiple operations
 * You can use this endpoint to make a single change operation or combine them in the same request. See some examples below.
 * 
 * ### Adding request body example:
 * 
 * ```json
 * {
 *    "add": {
 *       "items": [
 *           {
 *               "id": "8",
 *               "quantity": 1,
 *               "measurementUnit": "un",
 *               "unitMultiplier": 1
 *           }
 *       ]
 *     }
 * }
 * ```
 * 
 * ### Removing request body example:
 * 
 * ```json
 * {
 *     "reason": "The client wants to remove a product.",
 *     "remove": {
 *         "items": [
 *             {
 *                 "id": "8",
 *                 "quantity": 2,
 *                 "measurementUnit": "un",
 *                 "unitMultiplier": 1
 *             }
 *         ]
 *     }
 * }
 * ```
 * 
 * ### Replacing request body example:
 * ```json
 * {
 *     "reason": "The client wants to increase the product weight.",
 *     "replace": [
 *         {
 *             "from": {
 *                 "items": [
 *                     {
 *                         "id": "1",
 *                         "quantity": 1
 *                     }
 *                 ]
 *             },
 *             "to": {
 *                 "items": [
 *                     {
 *                         "id": "2",
 *                         "quantity": 1,
 *                         "measurementUnit": "kg",
 *                         "unitMultiplier": 1.0
 *                     }
 *                 ],
 *                 "shippingData": {
 *                     "logisticsInfo": [
 *                         {
 *                             "itemIndex": 0,
 *                             "selectedSla": "Normal",
 *                             "selectedDeliveryChannel": "delivery",
 *                             "addressId": "12334048475146857",
 *                             "price": 1000
 *                         }
 *                     ]
 *                 }
 *             }
 *         }
 *     ]
 * }
 * ```
 * 
 * 
 * ### Adding, removing and replacing request body example:
 * 
 * 
 * ```json
 * {
 *   "reason": "The client wants to add, remove and replace a weighable product.",
 *   "manualDiscountValue": 0,
 *   "add": {
 *       "items": [
 *           {
 *               "id": "8",
 *               "quantity": 1,
 *               "measurementUnit": "un",
 *               "unitMultiplier": 1
 *           }
 *       ]
 *   },
 *   "remove": {
 *       "items": [
 *           {
 *               "id": "31",
 *               "quantity": 1,
 *               "measurementUnit": "un",
 *               "unitMultiplier": 1
 *           }
 *       ]
 *   },
 *   "replace": [
 *                         {
 *                           "from": {
 *                             "items": [
 *                               {
 *                                 "id": "1",
 *                                 "quantity": 1
 *                               }
 *                             ]
 *                           },
 *                           "to": {
 *                             "items": [
 *                               {
 *                                 "id": "2",
 *                                 "quantity": 1,
 *                                 "measurementUnit": "kg",
 *                                 "unitMultiplier": 1.0
 *                               }
 *                             ],
 *                             "shippingData": {
 *                               "logisticsInfo": [
 *                                 {
 *                                   "itemIndex": 0,
 *                                   "selectedSla": "Normal",
 *                                   "selectedDeliveryChannel": "delivery",
 *                                   "addressId": "12334048475146857",
 *                                   "price": 1000
 *                                 }
 *                            ]
 *                        }
 *                   }
 *             }
 *      ]
 * }
 * ```
 * 
 * ## Permissions
 * 
 * Any user or [application key](https://developers.vtex.com/docs/guides/authentication-overview#application-keys) must have at least one of the appropriate [License Manager resources](https://help.vtex.com/en/tutorial/license-manager-resources--3q6ztrC8YynQf6rdc6euk3) to be able to successfully run this request. Otherwise they will receive a status code `403` error. These are the applicable resources for this endpoint:
 * 
 * | **Product** | **Category** | **Resource** |
 * | --------------- | ----------------- | ----------------- |
 * | Checkout | CheckoutResources | **Orders Full Access** |
 * | OMS | OMS access | **Cancel order** |
 * | OMS | OMS access | **Change order** |
 * 
 * You can [create a custom role](https://help.vtex.com/en/tutorial/roles--7HKK5Uau2H6wxE1rH5oRbc#creating-a-role) with that resource or use one of the following [predefined roles](https://help.vtex.com/en/tutorial/predefined-roles--jGDurZKJHvHJS13LnO7Dy):
 * 
 * | **Role** | **Resource** | 
 * | --------------- | ----------------- | 
 * | Checkout Admin | Orders Full Access |
 * | OMS - Full access | <p>Cancel order</p><p>Change order</p> |
 * | IntegrationProfile - Fulfillment Oms | <p>Cancel order</p><p>Change order</p> |
 * | IntegrationProfile - Fulfillment Gateway | Cancel order |
 * | IntegrationProfile - Fulfillment Gateway Oms | <p>Cancel order</p><p>Change order</p> |
 * | inStore Sales Person | <p>Cancel order</p><p>Change order</p> |
 * 
 * >❗ Assigning a [predefined role](https://help.vtex.com/en/tutorial/predefined-roles--jGDurZKJHvHJS13LnO7Dy) to users or application keys usually grants permission to multiple [License Manager resources](https://help.vtex.com/en/tutorial/license-manager-resources--3q6ztrC8YynQf6rdc6euk3). If some of these permissions are not necessary, consider creating a custom role instead. For more information regarding security, see [Best practices for using application keys](https://help.vtex.com/en/tutorial/best-practices-application-keys--7b6nD1VMHa49aI5brlOvJm).
 * 
 * To learn more about machine authentication at VTEX, see [Authentication overview](https://developers.vtex.com/docs/guides/authentication-overview#machine-authentication).
 */
"PATCH /api/order-system/orders/:changeOrderId/changes": {
searchParams: {
/**
 * Name of the VTEX account that created the order.
 */
an: string
}
body: Createchange
}
/**
 * This endpoint retrieves detailed information about a specific order modification. So after creating multiple modifications, you can get information on each one of them by its `changeRequestId`, the unique identification code generated by the [Create order modifications](https://developers.vtex.com/docs/api-reference/orders-api#patch-/api/order-system/orders/-changeOrderId-/changes) endpoint.
 * 
 * The successful status code is `200 OK`, and its response body schema is very similar to the [Create order modifications](https://developers.vtex.com/docs/api-reference/orders-api#patch-/api/order-system/orders/-changeOrderId-/changes) endpoint, with some additional fields:
 * 
 * - `status`: The modification request status in the workflow, which progresses in the following order:
 *   - `waiting-acknowledgement`
 *   - `waiting-confirmation`
 *   - `done`
 *   - `canceled`
 * 
 * - `inProgress`: When set as `true`, the order is still progressing in the order flow, when set as `false`, it is complete, whether by cancellation or because the customer received it.
 * 
 * - `logs`: Lists the workflow processing logs.
 * 
 * > If you want information about all the modifications made to an order, use the [Get order modifications history](https://developers.vtex.com/docs/api-reference/orders-api#get-/api/order-system/orders/-changeOrderId-/changes) endpoint.
 * 
 * ## Permissions
 * 
 * Any user or [application key](https://developers.vtex.com/docs/guides/authentication-overview#application-keys) must have at least one of the appropriate [License Manager resources](https://help.vtex.com/en/tutorial/license-manager-resources--3q6ztrC8YynQf6rdc6euk3) to be able to successfully run this request. Otherwise they will receive a status code `403` error. These are the applicable resources for this endpoint:
 * 
 * | **Product** | **Category** | **Resource** |
 * | --------------- | ----------------- | ----------------- |
 * | Checkout | CheckoutResources | **Orders Full Access** |
 * | OMS | OMS access | **Cancel order** |
 * | OMS | OMS access | **Change order** |
 * 
 * You can [create a custom role](https://help.vtex.com/en/tutorial/roles--7HKK5Uau2H6wxE1rH5oRbc#creating-a-role) with that resource or use one of the following [predefined roles](https://help.vtex.com/en/tutorial/predefined-roles--jGDurZKJHvHJS13LnO7Dy):
 * 
 * | **Role** | **Resource** | 
 * | --------------- | ----------------- | 
 * | Checkout Admin | Orders Full Access |
 * | OMS - Full access | <p>Cancel order</p><p>Change order</p> |
 * | IntegrationProfile - Fulfillment Oms | <p>Cancel order</p><p>Change order</p> |
 * | IntegrationProfile - Fulfillment Gateway | Cancel order |
 * | IntegrationProfile - Fulfillment Gateway Oms | <p>Cancel order</p><p>Change order</p> |
 * | inStore Sales Person | <p>Cancel order</p><p>Change order</p> |
 * 
 * >❗ Assigning a [predefined role](https://help.vtex.com/en/tutorial/predefined-roles--jGDurZKJHvHJS13LnO7Dy) to users or application keys usually grants permission to multiple [License Manager resources](https://help.vtex.com/en/tutorial/license-manager-resources--3q6ztrC8YynQf6rdc6euk3). If some of these permissions are not necessary, consider creating a custom role instead. For more information regarding security, see [Best practices for using application keys](https://help.vtex.com/en/tutorial/best-practices-application-keys--7b6nD1VMHa49aI5brlOvJm).
 * 
 * To learn more about machine authentication at VTEX, see [Authentication overview](https://developers.vtex.com/docs/guides/authentication-overview#machine-authentication).
 */
"GET /api/order-system/orders/:changeOrderId/changes/:changeRequestId": {
searchParams: {
/**
 * Name of the VTEX account that created the order.
 */
an: string
}
response: {
/**
 * Unique code that identifies an order modification request.
 */
requestId: string
/**
 * Code that identifies the transaction of changing the orders in the [order flow](https://help.vtex.com/en/tutorial/order-flow-and-status--tutorials_196).
 */
workflowId: string
/**
 * Order status in the [order flow](https://help.vtex.com/en/tutorial/order-flow-and-status--tutorials_196).
 */
status: string
/**
 * When set as `true`, the order is still progressing in the [order flow](https://help.vtex.com/en/tutorial/order-flow-and-status--tutorials_196), when set as `false`, it is complete, whether by cancellation or because the customer received it.
 */
inProgress: boolean
/**
 * Reason that motivated the order modifications.
 */
reason: string
/**
 * This field shows if a manual price was applied to the total order amount. The value is in cents.
 */
manualDiscountValue: number
/**
 * This field shows if an increment value was applied to the total order amount. The value is in cents.
 */
manualIncrementValue: number
/**
 * This field shows how much is the order total price considering that price modifications might have been made. The value is in cents.
 */
totalChangeValue: number
/**
 * Array containing total costs information.
 */
totals: {
/**
 * Changing price type, for example the item price or shipping costs.
 */
id?: string
/**
 * Changing price name.
 */
name?: string
/**
 * Changing price value in cents.
 */
value?: number
}[]
/**
 * Array with information about the `add` operation, when applicable. The schema will correspond to the object `to` inside the `replace` array.
 */
add: (null | string[])
/**
 * Array with information about the `remove` operation, when applicable. The schema will correspond to the object `from` inside the `replace` array.
 */
remove: (null | string[])
/**
 * Array with information about the `replace` operation, when applicable.
 */
replace: Replace1[]
/**
 * Date and time of the request in UTC ISO 8601 format, as in `yyyy-mm-ddThh:mm:ss.sssZ`.
 */
date: string
origin: OriginV2
settings: Settings
}
}
/**
 * This endpoint allows you to simulate an order modification and preview what the real modification will look like if you use the [Create order modifications](https://developers.vtex.com/docs/api-reference/orders-api#patch-/api/order-system/orders/-changeOrderId-/changes) endpoint. A preview is especially useful for more complex scenarios, such as orders with multiple items and combinations of change operations — add, remove, and replace. Ensuring you get the desired results before making the actual modification helps prevent mistakes.
 * 
 * The request body is the same one to be used in the [Create order modifications](https://developers.vtex.com/docs/api-reference/orders-api#patch-/api/order-system/orders/-changeOrderId-/changes) endpoint, and the response body of a successful request provides a preview of the order modifications effect.
 * 
 * ## Permissions
 * 
 * Any user or [application key](https://developers.vtex.com/docs/guides/authentication-overview#application-keys) must have at least one of the appropriate [License Manager resources](https://help.vtex.com/en/tutorial/license-manager-resources--3q6ztrC8YynQf6rdc6euk3) to be able to successfully run this request. Otherwise they will receive a status code `403` error. These are the applicable resources for this endpoint:
 * 
 * | **Product** | **Category** | **Resource** |
 * | --------------- | ----------------- | ----------------- |
 * | Checkout | CheckoutResources | **Orders Full Access** |
 * | OMS | OMS access | **Cancel order** |
 * | OMS | OMS access | **Change order** |
 * 
 * You can [create a custom role](https://help.vtex.com/en/tutorial/roles--7HKK5Uau2H6wxE1rH5oRbc#creating-a-role) with that resource or use one of the following [predefined roles](https://help.vtex.com/en/tutorial/predefined-roles--jGDurZKJHvHJS13LnO7Dy):
 * 
 * | **Role** | **Resource** | 
 * | --------------- | ----------------- | 
 * | Checkout Admin | Orders Full Access |
 * | OMS - Full access | <p>Cancel order</p><p>Change order</p> |
 * | IntegrationProfile - Fulfillment Oms | <p>Cancel order</p><p>Change order</p> |
 * | IntegrationProfile - Fulfillment Gateway | Cancel order |
 * | IntegrationProfile - Fulfillment Gateway Oms | <p>Cancel order</p><p>Change order</p> |
 * | inStore Sales Person | <p>Cancel order</p><p>Change order</p> |
 * 
 * >❗ Assigning a [predefined role](https://help.vtex.com/en/tutorial/predefined-roles--jGDurZKJHvHJS13LnO7Dy) to users or application keys usually grants permission to multiple [License Manager resources](https://help.vtex.com/en/tutorial/license-manager-resources--3q6ztrC8YynQf6rdc6euk3). If some of these permissions are not necessary, consider creating a custom role instead. For more information regarding security, see [Best practices for using application keys](https://help.vtex.com/en/tutorial/best-practices-application-keys--7b6nD1VMHa49aI5brlOvJm).
 * 
 * To learn more about machine authentication at VTEX, see [Authentication overview](https://developers.vtex.com/docs/guides/authentication-overview#machine-authentication).
 */
"POST /api/order-system/orders/:changeOrderId/changes/preview": {
searchParams: {
/**
 * Name of the VTEX account that created the order.
 */
an: string
}
body: {
/**
 * Reason why you wish to modify the order. Since you can make several modifications to an order, filling this field with a clear explanation helps organize the order modifications history. The shopper can view this field value in [transactional emails](https://help.vtex.com/en/tutorial/order-transactional-email-templates--3g2S2kqBOoSGcCaqMYK2my) and [My Account](https://help.vtex.com/en/tutorial/how-my-account-works--2BQ3GiqhqGJTXsWVuio3Xh).
 */
reason: string
/**
 * Name of the change operation you are performing, which can be `replace`, `add` or `remove`. If you want, you can combine all change operations in a single request.
 */
replace: Replace[]
}
response: {
/**
 * Reason why you wish to modify the order. Since you can make several modifications to an order, filling this field with a clear explanation helps organize the order modifications history. The shopper can view this field value in [transactional emails](https://help.vtex.com/en/tutorial/order-transactional-email-templates--3g2S2kqBOoSGcCaqMYK2my) and [My Account](https://help.vtex.com/en/tutorial/how-my-account-works--2BQ3GiqhqGJTXsWVuio3Xh).
 */
reason: string
/**
 * This field shows if a manual price was applied to the total order amount. The value is in cents.
 */
manualDiscountValue: number
/**
 * This field shows if an increment value was applied to the total order amount. The value is in cents.
 */
manualIncrementValue: number
/**
 * This field shows how much is the order total price considering that price modifications might have been made. The value is in cents.
 */
totalChangeValue: number
/**
 * Array containing total costs information.
 */
totals: {
/**
 * Changing price type, for example the item price or shipping costs.
 */
id?: string
/**
 * Changing price name.
 */
name?: string
/**
 * Changing price value in cents.
 */
value?: number
}[]
/**
 * Array with information about the `add` operation, when applicable. The schema will correspond to the object `to` inside the `replace` array.
 */
add: (null | string[])
/**
 * Array with information about the `remove` operation, when applicable. The schema will correspond to the object `from` inside the `replace` array.
 */
remove: (null | string[])
/**
 * Array with information about the `replace` operation, when applicable.
 */
replace: {
from: From2
to: To2
}[]
/**
 * Date and time of the request in UTC ISO 8601 format, as in `yyyy-mm-ddThh:mm:ss.sssZ`.
 */
date: string
origin: OriginV2
settings: Settings
}
}
/**
 * This endpoint makes a new attempt to perform an order modification previously made using the [Create order modifications](https://developers.vtex.com/docs/api-reference/orders-api#patch-/api/order-system/orders/-changeOrderId-/changes) endpoint that, for some reason, was not completely processed.
 * 
 * To make this request, you need the `changeRequestId`, a unique change identification code that you get when you make a [Create order modifications](https://developers.vtex.com/docs/api-reference/orders-api#patch-/api/order-system/orders/-changeOrderId-/changes) request. When you retry to modify an order using the `changeRequestId`, instead of creating a new modification, you avoid duplications.
 * 
 * This endpoint's successful response status code is `204 No Content`, therefore with no response body.
 * 
 * ## Permissions
 * 
 * Any user or [application key](https://developers.vtex.com/docs/guides/authentication-overview#application-keys) must have at least one of the appropriate [License Manager resources](https://help.vtex.com/en/tutorial/license-manager-resources--3q6ztrC8YynQf6rdc6euk3) to be able to successfully run this request. Otherwise they will receive a status code `403` error. These are the applicable resources for this endpoint:
 * 
 * | **Product** | **Category** | **Resource** |
 * | --------------- | ----------------- | ----------------- |
 * | Checkout | CheckoutResources | **Orders Full Access** |
 * | OMS | OMS access | **Cancel order** |
 * | OMS | OMS access | **Change order** |
 * 
 * You can [create a custom role](https://help.vtex.com/en/tutorial/roles--7HKK5Uau2H6wxE1rH5oRbc#creating-a-role) with that resource or use one of the following [predefined roles](https://help.vtex.com/en/tutorial/predefined-roles--jGDurZKJHvHJS13LnO7Dy):
 * 
 * | **Role** | **Resource** | 
 * | --------------- | ----------------- | 
 * | Checkout Admin | Orders Full Access |
 * | OMS - Full access | <p>Cancel order</p><p>Change order</p> |
 * | IntegrationProfile - Fulfillment Oms | <p>Cancel order</p><p>Change order</p> |
 * | IntegrationProfile - Fulfillment Gateway | Cancel order |
 * | IntegrationProfile - Fulfillment Gateway Oms | <p>Cancel order</p><p>Change order</p> |
 * | inStore Sales Person | <p>Cancel order</p><p>Change order</p> |
 * 
 * >❗ Assigning a [predefined role](https://help.vtex.com/en/tutorial/predefined-roles--jGDurZKJHvHJS13LnO7Dy) to users or application keys usually grants permission to multiple [License Manager resources](https://help.vtex.com/en/tutorial/license-manager-resources--3q6ztrC8YynQf6rdc6euk3). If some of these permissions are not necessary, consider creating a custom role instead. For more information regarding security, see [Best practices for using application keys](https://help.vtex.com/en/tutorial/best-practices-application-keys--7b6nD1VMHa49aI5brlOvJm).
 * 
 * To learn more about machine authentication at VTEX, see [Authentication overview](https://developers.vtex.com/docs/guides/authentication-overview#machine-authentication).
 */
"POST /api/order-system/orders/:changeOrderId/changes/:changeRequestId/retry": {
searchParams: {
/**
 * Name of the VTEX account that created the order.
 */
an: string
}
body: Createchange
}
/**
 * This endpoint cancels an [order modification](https://developers.vtex.com/docs/api-reference/orders-api#patch-/api/order-system/orders/-changeOrderId-/changes). It is meant for when, due to an error, a modification was not completely processed, and you do not wish to [retry](https://developers.vtex.com/docs/api-reference/orders-api#post-/api/order-system/orders/-changeOrderId-/changes/-changeRequestId-/retry) it. For this request, you need the order's `changeRequestId`, the unique identification code generated by the [Create order modifications](https://developers.vtex.com/docs/api-reference/orders-api#patch-/api/order-system/orders/-changeOrderId-/changes) endpoint.
 * 
 * >⚠️ Once an order modification has been successfully processed, canceling it is no longer possible. If you wish to revert the modifications made to an order, you will have to [create a new order modification](https://developers.vtex.com/docs/api-reference/orders-api#patch-/api/order-system/orders/-changeOrderId-/changes).
 * 
 * ## Permissions
 * 
 * Any user or [application key](https://developers.vtex.com/docs/guides/authentication-overview#application-keys) must have at least one of the appropriate [License Manager resources](https://help.vtex.com/en/tutorial/license-manager-resources--3q6ztrC8YynQf6rdc6euk3) to be able to successfully run this request. Otherwise they will receive a status code `403` error. These are the applicable resources for this endpoint:
 * 
 * | **Product** | **Category** | **Resource** |
 * | --------------- | ----------------- | ----------------- |
 * | Checkout | CheckoutResources | **Orders Full Access** |
 * | OMS | OMS access | **Cancel order** |
 * | OMS | OMS access | **Change order** |
 * 
 * You can [create a custom role](https://help.vtex.com/en/tutorial/roles--7HKK5Uau2H6wxE1rH5oRbc#creating-a-role) with that resource or use one of the following [predefined roles](https://help.vtex.com/en/tutorial/predefined-roles--jGDurZKJHvHJS13LnO7Dy):
 * 
 * | **Role** | **Resource** | 
 * | --------------- | ----------------- | 
 * | Checkout Admin | Orders Full Access |
 * | OMS - Full access | <p>Cancel order</p><p>Change order</p> |
 * | IntegrationProfile - Fulfillment Oms | <p>Cancel order</p><p>Change order</p> |
 * | IntegrationProfile - Fulfillment Gateway | Cancel order |
 * | IntegrationProfile - Fulfillment Gateway Oms | <p>Cancel order</p><p>Change order</p> |
 * | inStore Sales Person | <p>Cancel order</p><p>Change order</p> |
 * 
 * >❗ Assigning a [predefined role](https://help.vtex.com/en/tutorial/predefined-roles--jGDurZKJHvHJS13LnO7Dy) to users or application keys usually grants permission to multiple [License Manager resources](https://help.vtex.com/en/tutorial/license-manager-resources--3q6ztrC8YynQf6rdc6euk3). If some of these permissions are not necessary, consider creating a custom role instead. For more information regarding security, see [Best practices for using application keys](https://help.vtex.com/en/tutorial/best-practices-application-keys--7b6nD1VMHa49aI5brlOvJm).
 * 
 * To learn more about machine authentication at VTEX, see [Authentication overview](https://developers.vtex.com/docs/guides/authentication-overview#machine-authentication).
 */
"POST /api/order-system/orders/:changeOrderId/changes/:changeRequestId/cancel": {
searchParams: {
/**
 * Name of the VTEX account that created the order.
 */
an: string
}
body: {
/**
 * Reason why you wish to cancel the order modification. The customer will not view the value inserted in this field.
 */
reason: string
}
}
/**
 * Retrieves the [Order modifications settings](https://developers.vtex.com/docs/api-reference/orders-api#put-/api/order-system/orders/changes/settings) from a store.
 * 
 * >ℹ️ To know more about **Order modifications**, see [How Order modifications works](https://help.vtex.com/en/tutorial/how-change-order-works-beta--56TO0bOFXsfmpc7YZ3wIUZ).
 * 
 * ## Permissions
 * 
 * Any user or [application key](https://developers.vtex.com/docs/guides/api-authentication-using-application-keys) must have at least one of the appropriate [License Manager resources](https://help.vtex.com/en/tutorial/license-manager-resources--3q6ztrC8YynQf6rdc6euk3) to be able to successfully run this request. Otherwise they will receive a status code `403` error. These are the applicable resources for this endpoint:
 * 
 * | **Product** | **Category** | **Resource** |
 * | --------------- | ----------------- | ----------------- |
 * | OMS | OMS access | **View order** |
 * | Checkout         | CheckoutResources | **Orders Full Access** |
 * 
 * You can [create a custom role](https://help.vtex.com/en/tutorial/roles--7HKK5Uau2H6wxE1rH5oRbc#creating-a-role) with that resource or use one of the following [predefined roles](https://help.vtex.com/en/tutorial/predefined-roles--jGDurZKJHvHJS13LnO7Dy):
 * 
 * | **Role** | **Resource** | 
 * | --------------- | ----------------- | 
 * | OMS - Full access | View order |
 * | Checkout Admin | View order |
 * | IntegrationProfile - Fulfillment Oms | View order |
 * | OMS - Full access | Orders Full Access |
 * | Checkout Admin | Orders Full Access |
 * | IntegrationProfile - Fulfillment Oms | Orders Full Access |
 * 
 * >❗ Assigning a [predefined role](https://help.vtex.com/en/tutorial/predefined-roles--jGDurZKJHvHJS13LnO7Dy) to users or application keys usually grants permission to multiple [License Manager resources](https://help.vtex.com/en/tutorial/license-manager-resources--3q6ztrC8YynQf6rdc6euk3). If some of these permissions are not necessary, consider creating a custom role instead. For more information regarding security, see [Best practices for using application keys](https://help.vtex.com/en/tutorial/best-practices-application-keys--7b6nD1VMHa49aI5brlOvJm). To learn more about machine authentication at VTEX, see [Authentication overview](https://developers.vtex.com/docs/guides/authentication).
 */
"GET /api/order-system/orders/changes/settings": {
searchParams: {
/**
 * VTEX [account name](https://help.vtex.com/en/tutorial/what-is-an-account-name--i0mIGLcg3QyEy8OCicEoC).
 */
an: string
}
response: ChangeOrderSettingsResponse
}
/**
 * Updates the [Order modifications](https://developers.vtex.com/docs/api-reference/orders-api#patch-/api/order-system/orders/-changeOrderId-/changes) settings from a store.
 * 
 * >ℹ️ To know more about **Order modifications**, see [How Order modifications works](https://help.vtex.com/en/tutorial/how-change-order-works-beta--56TO0bOFXsfmpc7YZ3wIUZ).
 * 
 * ## Permissions
 * 
 * Any user or [application key](https://developers.vtex.com/docs/guides/authentication-overview#application-keys) must have at least one of the appropriate [License Manager resources](https://help.vtex.com/en/tutorial/license-manager-resources--3q6ztrC8YynQf6rdc6euk3) to be able to successfully run this request. Otherwise they will receive a status code `403` error. These are the applicable resources for this endpoint:
 * 
 * | **Product** | **Category** | **Resource** |
 * | --------------- | ----------------- | ----------------- |
 * | Checkout | CheckoutResources | **Orders Full Access** |
 * | OMS | OMS access | **Cancel order** |
 * | OMS | OMS access | **Change order** |
 * 
 * You can [create a custom role](https://help.vtex.com/en/tutorial/roles--7HKK5Uau2H6wxE1rH5oRbc#creating-a-role) with that resource or use one of the following [predefined roles](https://help.vtex.com/en/tutorial/predefined-roles--jGDurZKJHvHJS13LnO7Dy):
 * 
 * | **Role** | **Resource** | 
 * | --------------- | ----------------- | 
 * | Checkout Admin | Orders Full Access |
 * | OMS - Full access | <p>Cancel order</p><p>Change order</p> |
 * | IntegrationProfile - Fulfillment Oms | <p>Cancel order</p><p>Change order</p> |
 * | IntegrationProfile - Fulfillment Gateway | Cancel order |
 * | IntegrationProfile - Fulfillment Gateway Oms | <p>Cancel order</p><p>Change order</p> |
 * | inStore Sales Person | <p>Cancel order</p><p>Change order</p> |
 * 
 * >❗ Assigning a [predefined role](https://help.vtex.com/en/tutorial/predefined-roles--jGDurZKJHvHJS13LnO7Dy) to users or application keys usually grants permission to multiple [License Manager resources](https://help.vtex.com/en/tutorial/license-manager-resources--3q6ztrC8YynQf6rdc6euk3). If some of these permissions are not necessary, consider creating a custom role instead. For more information regarding security, see [Best practices for using application keys](https://help.vtex.com/en/tutorial/best-practices-application-keys--7b6nD1VMHa49aI5brlOvJm). To learn more about machine authentication at VTEX, see [Authentication overview](https://developers.vtex.com/docs/guides/authentication-overview#machine-authentication).
 */
"PUT /api/order-system/orders/changes/settings": {
searchParams: {
/**
 * VTEX [account name](https://help.vtex.com/en/tutorial/what-is-an-account-name--i0mIGLcg3QyEy8OCicEoC).
 */
an: string
}
body: {
/**
 * [Order modifications](https://help.vtex.com/en/tutorial/how-change-order-works-beta--56TO0bOFXsfmpc7YZ3wIUZ) payment configurations.
 */
paymentConfiguration?: {
/**
 * List of custom payment system IDs configured for the VTEX account.
 */
customPaymentSystemsAllowed?: string[]
}
/**
 * **Order modifications** settings regarding VTEX Admin, [Orders API](https://developers.vtex.com/docs/api-reference/orders-api#patch-/api/order-system/orders/-changeOrderId-/changes?endpoint=patch-/api/order-system/orders/-changeOrderId-/changes) and **My Account** feature.
 */
rolloutConfiguration?: {
/**
 * Defines if the account enabled the [Order modifications API](https://developers.vtex.com/docs/api-reference/orders-api#patch-/api/order-system/orders/-changeOrderId-/changes) (`true`) or not (`false`). The account can only use the [Order modifications via VTEX Admin](https://help.vtex.com/en/tutorial/how-to-change-orders-beta--7btlG91rb6sHpW1dkd2kBw) or [via API](https://developers.vtex.com/docs/api-reference/orders-api#patch-/api/order-system/orders/-changeOrderId-/changes) if this field is set to `true`.
 */
enableApi?: boolean
/**
 * Object about enabling the [Order modifications feature via VTEX Admin](https://help.vtex.com/en/tutorial/how-to-change-orders-beta--7btlG91rb6sHpW1dkd2kBw).
 */
enableAdminOrders?: {
/**
 * List with the workspaces' names that have the **Order modifications** feature enabled via VTEX Admin.
 */
enabledWorkspaces?: string[]
}
/**
 * Object about enabling the **Order modifications** feature via [My Account](https://help.vtex.com/en/tutorial/how-my-account-works--2BQ3GiqhqGJTXsWVuio3Xh).
 */
enableMyOrders?: {
/**
 * List with the workspaces' names that have the **Order modifications** feature enabled via **My Account**.
 */
enabledWorkspaces?: string[]
}
}
/**
 * **Order modifications** settings related to taxes and shipping calculation.
 */
pipelineConfiguration?: {
/**
 * Defines if the tax calculation is enabled for **Order modifications** (`true`) or not (`false`).
 */
enableTaxHubRecalculation?: boolean
/**
 * Defines if the orders modified will have zero shipping cost (`true`) or not (`false`). Merchants can enable this configuration to modify only items and prices, without impacting the orders' original freight costs.
 */
compensateShippingChanges?: boolean
}
}
response: ChangeOrderSettingsResponse
}
}
/**
 * Information about the customer preferences.
 */
export interface ClientPreferencesDataUpdated {
/**
 * Language code of the customer preferred language while accessing the store.
 */
locale?: string
/**
 * Defines if the customer receives the store's newsletter (`true`) or not (`false`).
 */
optinNewsLetter?: boolean
}
/**
 * Order taxes information.
 */
export interface TaxDataUpdated {
/**
 * Defines if the taxes were applied by the marketplace (`true`) or not (`false`).
 */
areTaxesDesignatedByMarketplace: boolean
/**
 * Order taxes details.
 */
taxInfoCollection: {
/**
 * Item indexing number.
 */
itemIndex: number
/**
 * SKU ID.
 */
sku: string
/**
 * Price tags information.
 */
priceTags: {
/**
 * Price tag identifier code.
 */
identifier?: string
/**
 * Indicates whether price tag value is applied through a percentage (`true`) or not (`false`).
 */
isPercentual?: boolean
/**
 * Price tag name.
 */
name?: string
/**
 * Price tag value in cents.
 */
value?: number
/**
 * Price tag raw value that can contain up to five decimals, separated by a period.
 */
rawValue?: number
}[]
}[]
}
/**
 * Information about the marketplace related to the order.
 */
export interface MarketplaceUpdated {
/**
 * Marketplace base URL.
 */
baseURL?: string
/**
 * Defines if the marketplace is a [VTEX certified marketplace](https://help.vtex.com/en/tutorial/marketplace-strategies-at-vtex--tutorials_402#integrating-with-certified-marketplaces) (`true`) or not (`false`).
 */
isCertified?: boolean
/**
 * Marketplace name.
 */
name?: string
}
/**
 * Store preferences in the [Account settings](https://help.vtex.com/en/tutorial/account-details-page--2vhUVOKfCaswqLguT2F9xq) page.
 */
export interface StorePreferencesDataUpdated {
/**
 * Country code in three-digit [ISO 3166 ALPHA-3](https://www.iban.com/country-codes) format.
 */
countryCode?: string
/**
 * Currency code in [ISO 4217](https://www.iban.com/currency-codes) format.
 */
currencyCode?: string
/**
 * Currency format settings.
 */
currencyFormatInfo?: {
/**
 * Number of currency decimal digits.
 */
CurrencyDecimalDigits?: number
/**
 * Character for currency decimal separation.
 */
CurrencyDecimalSeparator?: string
/**
 * Character for currency group separation.
 */
CurrencyGroupSeparator?: string
/**
 * Limit of characters that can be grouped for currency groups.
 */
CurrencyGroupSize?: number
/**
 * Defines if the prices displayed for customers start with the currency symbol (`true`) or not (`false`).
 */
StartsWithCurrencySymbol?: boolean
}
/**
 * Currency locale code in [LCID](https://learn.microsoft.com/en-us/openspecs/office_standards/ms-oe376/6c085406-a698-4e12-9d4d-c3b0ee3dbc4a) format.
 */
currencyLocale?: number
/**
 * Currency symbol characters.
 */
currencySymbol?: string
/**
 * Time zone considered for the store orders.
 */
timeZone?: string
}
/**
 * Order invoices information.
 */
export interface InvoiceDataUpdated {
/**
 * Invoice address information.
 */
address?: {
/**
 * Invoice address type, which can be `residential`, when the customer gives an address for delivery, or `pickup`, when the customer picks the order at a pickup point.
 */
addressType?: ("residential" | "pickup")
/**
 * Full name of the order receiver.
 */
receiverName?: string
/**
 * Invoice address ID.
 */
addressId?: string
/**
 * Invoice address version ID.
 */
versionId?: string
/**
 * Invoice address entity ID.
 */
entityId?: string
/**
 * Invoice address postal code.
 */
postalCode?: string
/**
 * Invoice address city.
 */
city?: string
/**
 * Invoice address state.
 */
state?: string
/**
 * Invoice address three-digit country code in [ISO 3166 ALPHA-3](https://www.iban.com/country-codes) format.
 */
country?: string
/**
 * Invoice address street.
 */
street?: string
/**
 * Invoice address number.
 */
number?: string
/**
 * Invoice address neighborhood.
 */
neighborhood?: string
/**
 * Invoice address complement.
 */
complement?: string
/**
 * Invoice address additional information.
 */
reference?: string
/**
 * Invoice address pair of geolocation coordinates, first longitude then latitude.
 */
geoCoordinates?: number[]
/**
 * Contact unique identifier.
 */
contactId?: string
}
/**
 * Invoice information regarding payment method.
 */
userPaymentInfo?: {
/**
 * List of the payment methods used by the customer in the purchase.
 */
paymentMethods?: string[]
}
/**
 * Information about the invoice subject.
 */
invoiceSubject?: {
/**
 * Invoice subject ID.
 */
id?: string
/**
 * Invoice subject email address.
 */
email?: string
/**
 * Invoice subject first name.
 */
firstName?: string
/**
 * Invoice subject last name.
 */
lastName?: string
/**
 * Invoice subject phone number.
 */
phone?: string
}
}
/**
 * Information about changes in the order.
 */
export interface ChangesAttachmentUpdated {
/**
 * Order changes ID.
 */
id: string
/**
 * Information about changes in the order.
 */
changesData: {
/**
 * Text explaining why the order was changed. This information may be shown to the customer in the storefront or transactional emails.
 */
reason: string
/**
 * Order change discount value in cents.
 */
discountValue: number
/**
 * Order change increment value in cents.
 */
incrementValue: number
/**
 * Information about items added to the order, when applicable.
 */
itemsAdded: {
/**
 * Added item SKU ID.
 */
id?: string
/**
 * Added item SKU name.
 */
name?: string
/**
 * Quantity of items added.
 */
quantity?: number
/**
 * Added item price in cents.
 */
price?: number
/**
 * Added item unit multiplier.
 */
unitMultiplier?: string
}[]
/**
 * Information about items removed from the order, when applicable.
 */
itemsRemoved: {
/**
 * Removed item SKU ID.
 */
id: string
/**
 * Removed item name.
 */
name: string
/**
 * Quantity of removed items.
 */
quantity: number
/**
 * Removed item price in cents.
 */
price: number
/**
 * Removed item unit multiplier.
 */
unitMultiplier: string
}[]
/**
 * Order changes receipt information.
 */
receipt: {
/**
 * Receipt creation date in [ISO 8601 time zone offset format](https://learn.microsoft.com/en-us/rest/api/storageservices/formatting-datetime-values), as in `YYYY-MM-DDThh:mm:ssZ`.
 */
date: string
/**
 * Order ID.
 */
orderId: string
/**
 * Receipt unique identifier code.
 */
receipt: string
}
}[]
}
/**
 * Information about the call center operator responsible for the order.
 */
export interface CallCenterOperatorDataUpdated {
/**
 * Call center operator identification code.
 */
id?: string
/**
 * Call center operator email.
 */
email?: string
/**
 * Call center operator user name.
 */
userName?: string
}
/**
 * Item dimensions.
 */
export interface Dimension {
/**
 * Item cubic weight.
 */
cubicweight: number
/**
 * Item height.
 */
height: number
/**
 * Item length.
 */
length: number
/**
 * Item weight.
 */
weight: number
/**
 * Item width.
 */
width: number
}
/**
 * Information about the customer profile.
 */
export interface ClientProfileDataUpdated {
/**
 * Object ID, the expected value is `clientProfileData`.
 */
id?: string
/**
 * Customer email.
 */
email?: string
/**
 * Customer first name.
 */
firstName?: string
/**
 * Customer last name.
 */
lastName?: string
/**
 * Type of the document informed by the customer.
 */
documentType?: string
/**
 * Document identification code informed by the customer.
 */
document?: string
/**
 * Customer phone number.
 */
phone?: string
/**
 * If the customer is a legal entity, this field includes the corporate name.
 */
corporateName?: string
/**
 * If the customer is a legal entity, this field includes the trade name.
 */
tradeName?: string
/**
 * If the customer is a legal entity, this field includes the corporate document.
 */
corporateDocument?: string
/**
 * If the customer is a legal entity, this field includes the state inscription.
 */
stateInscription?: string
/**
 * If the customer is a legal entity, this field includes the company's phone number.
 */
corporatePhone?: string
/**
 * Defines if the customer is a legal entity (`true`) or not (`false`).
 */
isCorporate?: boolean
/**
 * Customer user profile ID.
 */
userProfileId?: string
/**
 * Customer user profile version.
 */
userProfileVersion?: string
/**
 * Customer class identification.
 */
customerClass?: string
/**
 * Customer code.
 */
customerCode?: string
}
/**
 * [Gift list](https://developers.vtex.com/docs/guides/creating-gift-lists) information.
 */
export interface GiftRegistryDataUpdated {
/**
 * Gift list ID.
 */
giftRegistryId?: string
/**
 * [Gift list type](https://help.vtex.com/en/tutorial/creating-a-type-of-list).
 */
giftRegistryType?: string
/**
 * Gift list type name.
 */
giftRegistryTypeName?: string
/**
 * Gift list shipping address ID.
 */
addressId?: string
/**
 * Gift list description.
 */
description?: string
}
/**
 * Information about marketing and promotions, such as coupon code and [Urchin Tracking Module (UTM)](https://help.vtex.com/en/tutorial/what-are-utm-source-utm-campaign-and-utm-medium--2wTz7QJ8KUG6skGAoAQuii).
 */
export interface MarketingDataUpdated {
/**
 * Object ID. The expected value is `marketingData`.
 */
id?: string
/**
 * A UTM is an Urchin Tracking Module used to track traffic related to your store. This field is an UTM for tracking the traffic source, to know from which site, advertiser, or publication the customer came before reaching your site.
 */
utmSource?: string
/**
 * UTM for tracking the partner.
 */
utmPartner?: string
/**
 * UTM for tracking the advertising or marketing media used to reach your site, such as banners and newsletters.
 */
utmMedium?: string
/**
 * UTM for tracking the marketing campaign context.
 */
utmCampaign?: string
/**
 * Coupon code used by the customer.
 */
coupon?: string
/**
 * Internal UTM for tracking the marketing campaign context.
 */
utmiCampaign?: string
/**
 * A `utmi` is an internal Urchin Tracking Module (UTM) used to track traffic inside your site. This field is an internal UTM for tracking pages.
 */
utmipage?: string
/**
 * Internal UTM for tracking the partner.
 */
utmiPart?: string
/**
 * List of marketing tags valid for the item.
 */
marketingTags?: string[]
}
/**
 * Information on promotions and taxes that apply to the order.
 */
export interface RatesAndBenefitsDataUpdated {
/**
 * Object ID. The expected value is `ratesAndBenefitsData`.
 */
id?: string
/**
 * Information about order's promotions and taxes identifiers.
 */
rateAndBenefitsIdentifiers?: {
/**
 * Promotion or tax description.
 */
description?: string
/**
 * Defines if the [target audience](https://help.vtex.com/en/tutorial/creating-a-campaign-audience--6cnuDZJzIkIeocewAQQK4K) is featured (`true`) or not (`false`).
 */
featured?: boolean
/**
 * Promotion or tax ID.
 */
id?: string
/**
 * Promotion or tax name.
 */
name?: string
/**
 * Informs the criteria and conditions fulfilled so the promotion became valid.
 */
matchedParameters?: {
/**
 * Promotion or tax criteria content.
 */
[k: string]: string
}
/**
 * Object containing the promotion or tax additional information.
 */
additionalInfo?: {
/**
 * Additional information.
 */
[k: string]: string
}
}[]
}
/**
 * Order shipping information.
 */
export interface ShippingDataUpdated {
/**
 * Object ID. The expected value is `shippingData`.
 */
id?: string
/**
 * Shipping address details.
 */
address?: {
/**
 * Shipping address type.
 */
addressType: ("residential" | "pickup")
/**
 * Full name of the order receiver.
 */
receiverName: string
/**
 * Shipping address ID.
 */
addressId: string
/**
 * Shipping address version ID.
 */
versionId?: string
/**
 * Shipping address entity ID.
 */
entityId?: string
/**
 * Shipping address postal code.
 */
postalCode: string
/**
 * Shipping address city.
 */
city: string
/**
 * Shipping address state.
 */
state: string
/**
 * Shipping address three-digit country code in [ISO 3166 ALPHA-3](https://www.iban.com/country-codes) format.
 */
country: string
/**
 * Shipping address street.
 */
street: string
/**
 * Shipping address number.
 */
number: string
/**
 * Shipping address neighborhood.
 */
neighborhood: string
/**
 * Shipping address complement.
 */
complement: string
/**
 * Shipping address additional information.
 */
reference: string
/**
 * Shipping address pair of geolocation coordinates, first longitude then latitude.
 */
geoCoordinates: number[]
}
/**
 * Logistics information regarding order items.
 */
logisticsInfo?: {
/**
 * Each item in the order is identified by an index. The position starts in `0`, followed by `1`, `2`, and so on.
 */
itemIndex?: number
/**
 * SKU ID.
 */
itemId?: string
/**
 * Service Level Agreement (SLA), which corresponds to the shipping method selected by the customer, usually like normal or express.
 */
selectedSla?: string
/**
 * Logistics [reservation](https://help.vtex.com/en/tutorial/how-does-reservation-work--tutorials_92) waiting time.
 */
lockTTL?: string
/**
 * Item shipping price in cents. This value does not correspond to the order total shipping price.
 */
price?: number
/**
 * Item [list price](https://help.vtex.com/en/tracks/prices-101--6f8pwCns3PJHqMvQSugNfP/3XcXp0r5WrJvogB8KIX4Kx#list-price) in cents.
 */
listPrice?: number
/**
 * Item selling price in cents.
 */
sellingPrice?: number
/**
 * [Scheduled delivery](https://help.vtex.com/tutorial/scheduled-delivery--22g3HAVCGLFiU7xugShOBi) window information, when applicable.
 */
deliveryWindow?: string
/**
 * [Carrier](https://help.vtex.com/en/tutorial/carriers-on-vtex--7u9duMD5UQa2QQwukAWMcE) company name.
 */
deliveryCompany?: string
/**
 * Shipping estimate time in days. For instance, three business days is represented `3bd`.
 */
shippingEstimate?: string
/**
 * Shipping estimate date, defined after order confirmation, in [ISO 8601 time zone offset format](https://learn.microsoft.com/en-us/rest/api/storageservices/formatting-datetime-values), as in `YYYY-MM-DDThh:mm:ssZ`.
 */
shippingEstimateDate?: string
/**
 * Service Level Agreements (SLA) corresponding to [shipping policies](https://help.vtex.com/en/tutorial/shipping-policy--tutorials_140).
 */
slas?: {
/**
 * ID of the shipping method used in the [shipping policy](https://help.vtex.com/en/tutorial/shipping-policy--tutorials_140).
 */
id?: string
/**
 * [Shipping policy](https://help.vtex.com/en/tutorial/shipping-policy--tutorials_140) name.
 */
name?: string
/**
 * Shipping estimate time in days. For instance, three business days is represented `3bd`.
 */
shippingEstimate?: string
/**
 * SLA shipping estimate date in [ISO 8601 time zone offset format](https://learn.microsoft.com/en-us/rest/api/storageservices/formatting-datetime-values), as in `YYYY-MM-DDThh:mm:ssZ`.
 */
shippingEstimateDate?: string
/**
 * [Delivery window](https://help.vtex.com/tutorial/scheduled-delivery--22g3HAVCGLFiU7xugShOBi) information, when applicable.
 */
deliveryWindow?: string
/**
 * Available delivery windows information, when applicable.
 */
availableDeliveryWindows?: string[]
/**
 * SLA delivery IDs information.
 */
deliveryIds?: {
/**
 * Carrier ID.
 */
courierId?: string
/**
 * Carrier name.
 */
courierName?: string
/**
 * [Loading dock](https://help.vtex.com/en/tutorial/loading-dock--5DY8xHEjOLYDVL41Urd5qj) ID.
 */
dockId?: string
/**
 * Quantity of items being delivered.
 */
quantity?: number
/**
 * [Warehouse](https://help.vtex.com/en/tutorial/warehouse--6oIxvsVDTtGpO7y6zwhGpb) ID.
 */
warehouseId?: string
/**
 * Account carrier name.
 */
accountCarrierName?: string
/**
 * Information about [kit](https://help.vtex.com/tutorial/what-is-a-kit--5ov5s3eHM4AqAAgqWwoc28) items, when applicable.
 */
kitItemDetails?: string[]
}[]
/**
 * SLA shipping list price in cents.
 */
listPrice?: number
/**
 * SLA shipping price in cents. Does not account for the order total shipping price.
 */
price?: number
/**
 * Defines if the delivery channel is delivery or [pickup point](https://help.vtex.com/en/tutorial/pickup-points--2fljn6wLjn8M4lJHA6HP3R).
 */
selectedDeliveryChannel?: ("delivery" | "pickup-in-point")
pickupStoreInfo?: PickupStoreInfoUpdated
/**
 * Name of the [polygon](https://help.vtex.com/en/tutorial/registering-geolocation/) associated with the shipping policy.
 */
polygonName?: string
/**
 * Logistics [reservation](https://help.vtex.com/en/tutorial/how-does-reservation-work--tutorials_92) waiting time related to the SLA.
 */
lockTTL?: string
/**
 * [Pickup point](https://help.vtex.com/en/tutorial/pickup-points--2fljn6wLjn8M4lJHA6HP3R) ID related to the SLA.
 */
pickupPointId?: string
/**
 * Number of days the carrier takes in transit to deliver the order. For instance, three business days is represented `3bd`.
 */
transitTime?: string
/**
 * Distance in kilometers between the pickup point and the customer address. The distance is measured as a straight line.
 */
pickupDistance?: number
}[]
/**
 * List of shipping address countries.
 */
shipsTo?: string[]
/**
 * Order delivery IDs information.
 */
deliveryIds?: {
/**
 * Carrier ID.
 */
courierId?: string
/**
 * Carrier name.
 */
courierName?: string
/**
 * [Loading dock](https://help.vtex.com/en/tutorial/loading-dock--5DY8xHEjOLYDVL41Urd5qj) ID.
 */
dockId?: string
/**
 * Quantity of items being delivered.
 */
quantity?: number
/**
 * [Warehouse](https://help.vtex.com/en/tutorial/warehouse--6oIxvsVDTtGpO7y6zwhGpb) ID.
 */
warehouseId?: string
/**
 * Account carrier name.
 */
accountCarrierName?: string
/**
 * Information about [kit](https://help.vtex.com/tutorial/what-is-a-kit--5ov5s3eHM4AqAAgqWwoc28) items, when applicable.
 */
kitItemDetails?: string[]
}[]
/**
 * Delivery channels associated with the sales channel (or [trade policy](https://help.vtex.com/tutorial/how-trade-policies-work--6Xef8PZiFm40kg2STrMkMV)).
 */
deliveryChannels?: {
/**
 * Delivery channel shipping type.
 */
id?: ("delivery" | "pickup-in-point")
/**
 * Stock check for SKU availability.
 */
stockBalance?: number
}[]
/**
 * @deprecated
 * Defines if the delivery channel is delivery or pickup. This field is deprecated and was replaced by the `deliveryChannels` field.
 */
deliveryChannel?: ("delivery" | "pickup-in-point")
pickupStoreInfo?: PickupStoreInfoUpdated
/**
 * Shipping address ID.
 */
addressId?: string
/**
 * Shipping address version ID.
 */
versionId?: string
/**
 * Shipping address entity ID.
 */
entityId?: string
/**
 * Name of the [polygon](https://help.vtex.com/en/tutorial/registering-geolocation/) associated with the [shipping policy](https://help.vtex.com/en/tutorial/shipping-policy--tutorials_140).
 */
polygonName?: string
/**
 * [Pickup point](https://help.vtex.com/en/tutorial/pickup-points--2fljn6wLjn8M4lJHA6HP3R) ID, when applicable.
 */
pickupPointId?: string
/**
 * Number of days the carrier takes in transit to deliver the order. For instance, three business days is represented `3bd`.
 */
transitTime?: string
}[]
/**
 * List containing order shipping label information.
 */
trackingHints?: {
/**
 * Order tracking ID.
 */
trackingId?: string
/**
 * [Carrier](https://help.vtex.com/en/tutorial/carriers-on-vtex--7u9duMD5UQa2QQwukAWMcE) name.
 */
courierName?: string
/**
 * Order tracking URL.
 */
trackingUrl?: string
/**
 * Order tracking label.
 */
trackingLabel?: string
}[]
/**
 * Selected adresses information.
 */
selectedAddresses?: {
/**
 * Selected address ID.
 */
addressId?: string
/**
 * Selected address version ID.
 */
versionId?: string
/**
 * Selected address entity ID.
 */
entityId?: string
/**
 * Selected adress shipping type.
 */
addressType?: ("residential" | "pickup")
/**
 * Full name of the order receiver.
 */
receiverName?: string
/**
 * Selected address street.
 */
street?: string
/**
 * Selected address number.
 */
number?: string
/**
 * Selected address complement.
 */
complement?: string
/**
 * Selected address neighborhood.
 */
neighborhood?: string
/**
 * Selected address postal code.
 */
postalCode?: string
/**
 * Selected address city.
 */
city?: string
/**
 * Selected address state.
 */
state?: string
/**
 * Selected address three-digit country code in [ISO 3166 ALPHA-3](https://www.iban.com/country-codes) format.
 */
country?: string
/**
 * Selected address additional information.
 */
reference?: string
/**
 * Selected address pair of geolocation coordinates, first longitude then latitude.
 */
geoCoordinates?: number[]
}[]
/**
 * Available adresses information.
 */
availableAddresses?: {
/**
 * Available address ID.
 */
addressId?: string
/**
 * Available address version ID.
 */
versionId?: string
/**
 * Available address entity ID.
 */
entityId?: string
/**
 * Available adress shipping type.
 */
addressType?: ("residential" | "pickup")
/**
 * Full name of the order receiver.
 */
receiverName?: string
/**
 * Available address street.
 */
street?: string
/**
 * Available address number.
 */
number?: string
/**
 * Available address complement.
 */
complement?: string
/**
 * Available address neighborhood.
 */
neighborhood?: string
/**
 * Available address postal code.
 */
postalCode?: string
/**
 * Available address city.
 */
city?: string
/**
 * Available address state.
 */
state?: string
/**
 * Available address three-digit country code in [ISO 3166 ALPHA-3](https://www.iban.com/country-codes) format.
 */
country?: string
/**
 * Available address additional information.
 */
reference?: string
/**
 * Available address pair of geolocation coordinates, first longitude then latitude.
 */
geoCoordinates?: number[]
}[]
/**
 * Order contact information.
 */
contactInformation?: {
/**
 * Contact ID.
 */
id?: string
/**
 * Contact email.
 */
email?: string
/**
 * Contact first name.
 */
firstName?: string
/**
 * Contact last name.
 */
lastName?: string
/**
 * Contact document number.
 */
document?: string
/**
 * Contact phone number.
 */
phone?: string
/**
 * Contact document type.
 */
documentType?: string
}[]
}
/**
 * Information about a [loading dock](https://help.vtex.com/en/tutorial/loading-dock--5DY8xHEjOLYDVL41Urd5qj) that was transformed into a [pickup point](https://help.vtex.com/en/tutorial/pickup-points--2fljn6wLjn8M4lJHA6HP3R).
 */
export interface PickupStoreInfoUpdated {
/**
 * Defines if the shipping type was pickup (`true`) or not (`false`).
 */
isPickupStore: boolean
/**
 * Name of the pickup point displayed at checkout.
 */
friendlyName: string
/**
 * Pickup point address information.
 */
address: {
/**
 * Pickup point address postal code.
 */
postalCode?: string
/**
 * Three-digit country code of the pickup point address in [ISO 3166 ALPHA-3](https://www.iban.com/country-codes) format.
 */
country?: string
/**
 * Pickup point address city.
 */
city?: string
/**
 * Pickup point address state.
 */
state?: string
/**
 * Pickup point address neighborhood.
 */
neighborhood?: string
/**
 * Pickup point address street.
 */
street?: string
/**
 * Pickup point address number.
 */
number?: string
/**
 * Pickup point address complement.
 */
complement?: string
/**
 * Pickup point address reference.
 */
reference?: string
/**
 * Pickup point geolocation coordinates.
 */
location?: {
/**
 * Latitude coordinate.
 */
latitude?: number
/**
 * Longitude coordinate.
 */
longitude?: number
}
}
/**
 * Additional information.
 */
additionalInfo: string
/**
 * ID of the loading dock related to the pickup point.
 */
dockId: string
}
/**
 * Payments information.
 */
export interface PaymentDataUpdated {
/**
 * [Gift cards](https://developers.vtex.com/docs/guides/gift-card-integration-guide) information, when applicable.
 */
giftCards?: {
/**
 * Gift card identification.
 */
id?: string
/**
 * Gift card code used by the customer at checkout.
 */
redemptionCode?: string
/**
 * Gift card name.
 */
name?: string
/**
 * Gift card loyalty program, when applicable.
 */
caption?: string
/**
 * Gift card value in cents.
 */
value?: number
/**
 * Gift card current balance. For newly created gift cards, the balance will be `0.0`.
 */
balance?: number
/**
 * Gift card provider name.
 */
provider?: string
/**
 * Gift card group name.
 */
groupName?: string
/**
 * Defines if the gift card is in use (`true`) or not (`false`).
 */
inUse?: boolean
/**
 * Defines if the gift card is a special card (`true`) or not (`false`).
 */
isSpecialCard?: boolean
}[]
/**
 * Information about the order financial transactions.
 */
transactions?: {
/**
 * Defines of the transaction is active (`true`) or inactive (`false`).
 */
isActive?: boolean
/**
 * Transaction ID.
 */
transactionId?: string
/**
 * Merchant name.
 */
merchantName?: string
/**
 * Payments information.
 */
payments?: {
/**
 * Payment unique identifier.
 */
id?: string
/**
 * Payment system ID.
 */
paymentSystem?: string
/**
 * Payment system name.
 */
paymentSystemName?: string
/**
 * Order total payment value in cents.
 */
value?: number
/**
 * Number of payment installments.
 */
installments?: number
/**
 * Total payment reference value in cents.
 */
referenceValue?: number
/**
 * Name of the card owner.
 */
cardHolder?: string
/**
 * Card number.
 */
cardNumber?: string
/**
 * Card first four digits.
 */
firstDigits?: string
/**
 * Card last four digits.
 */
lastDigits?: string
/**
 * Card Verification Value (CVV2) is a security code used by payment processors to reduce fraudulent credit and debit card transactions.
 */
cvv2?: string
/**
 * Card expiration month in 2-digit format.
 */
expireMonth?: string
/**
 * Card expiration year in 4-digit format.
 */
expireYear?: string
/**
 * Payment URL.
 */
url?: string
/**
 * Gift card ID.
 */
giftCardId?: string
/**
 * Gift card name.
 */
giftCardName?: string
/**
 * Gift card caption.
 */
giftCardCaption?: string
/**
 * Gift card code used by the customer at checkout.
 */
redemptionCode?: string
/**
 * Transaction payment method, which can be credit card, debid card, bank invoice, promissory, gift card or pix (`instantPayment`).
 */
group?: ("creditCard" | "debitCard" | "bankInvoice" | "promissory" | "giftCard" | "instantPayment")
/**
 * Provider unique identifier for the transaction.
 */
tid?: string
/**
 * Payment due date in `MM/YY` format.
 */
dueDate?: string
/**
 * Payment provider (connector) responses. The fields within this object can vary according to the order payment provider.
 */
connectorResponses?: {
/**
 * Provider operational message or error to be logged.
 */
Message?: string
/**
 * Provider unique identifier for the transaction.
 */
tid?: string
/**
 * Provider authorization ID.
 */
authorizationId?: string
/**
 * Order payment status in the [transaction flow](https://help.vtex.com/en/tracks/payments--6GAS7ZzGAm7AGoEAwDbwJG/1xjzgJZvqwaI1rfxLMCC3Y).
 */
status?: string
/**
 * Total time (in seconds) before the auto settle, when the platform makes an automatic call to `/settlements`, regardless if the payment was approved by the merchant's anti-fraud provider. The maximum value allowed is `604800` seconds (7 days).
 */
delayToAutoSettle?: number
/**
 * Provider operational return code or error to be logged.
 */
ReturnCode?: string
/**
 * Provider unique sequential number for the transaction.
 */
nsu?: string
/**
 * Provider operational code or error to be logged.
 */
code?: string
/**
 * Provider operational message or error to be logged.
 */
message?: string
/**
 * Provider unique identifier for the transaction.
 */
Tid?: string
/**
 * [Acquirer](https://help.vtex.com/en/tracks/payments--6GAS7ZzGAm7AGoEAwDbwJG/kdPbEIWf8Xq8tESQvViMB#acquirer) name (mostly used for card payments).
 */
acquirer?: string
/**
 * Authorization identification.
 */
authId?: string
/**
 * Payment ID.
 */
paymentId?: string
/**
 * Total time (in seconds) before the auto settle, when the platform makes an automatic call to `/settlements`. This happens only after the payment was approved by the merchant's anti-fraud provider.
 */
delayToAutoSettleAfterAntifraud?: string
}
/**
 * Gift card provider ID.
 */
giftCardProvider?: string
/**
 * Defines if the payment has a gift card discount (`true`) or not (`false`).
 */
giftCardAsDiscount?: boolean
/**
 * Koin connector URL.
 */
koinUrl?: string
/**
 * Identification code of the account where the payment was made.
 */
accountId?: string
/**
 * When the payment was made in a subaccount, this field retrieves the main account ID.
 */
parentAccountId?: string
/**
 * Bank issued invoice numeric sequence.
 */
bankIssuedInvoiceIdentificationNumber?: string
/**
 * Bank issued invoice numeric sequence formatted as customers see.
 */
bankIssuedInvoiceIdentificationNumberFormatted?: string
/**
 * Bank issued invoice bar code number.
 */
bankIssuedInvoiceBarCodeNumber?: string
/**
 * Bank issued invoice bar code type.
 */
bankIssuedInvoiceBarCodeType?: string
/**
 * Billing address information.
 */
billingAddress?: {
/**
 * Billing address postal code.
 */
postalCode?: string
/**
 * Billing address city.
 */
city?: string
/**
 * Billing address state.
 */
state?: string
/**
 * Billing address three-digit country code in [ISO 3166 ALPHA-3](https://www.iban.com/country-codes) format.
 */
country?: string
/**
 * Billing address street.
 */
street?: string
/**
 * Billing address number.
 */
number?: string
/**
 * Billing address neighborhood.
 */
neighborhood?: string
/**
 * Billing address complement.
 */
complement?: string
/**
 * Billing address additional information.
 */
reference?: string
/**
 * Billing address pair of geolocation coordinates, first longitude then latitude.
 */
geoCoordinates?: number[]
}
/**
 * Type of [wallet](https://help.vtex.com/en/tutorial/what-is-an-e-wallet--4v5wcOe4A0SiaimWM2cU60) used in the payment.
 */
paymentOrigin?: string
}[]
}[]
}
/**
 * Information about shipping packages, which are created after order invoicing.
 */
export interface PackageAttachmentUpdated {
/**
 * List with packages' information.
 */
packages?: {
/**
 * Name of the [carrier](https://help.vtex.com/en/tutorial/carriers-on-vtex--7u9duMD5UQa2QQwukAWMcE) responsible for the package shipping.
 */
courier?: string
/**
 * Package description.
 */
description?: string
/**
 * Unique identification code of the package invoice.
 */
invoiceNumber?: string
/**
 * Package invoice value in cents.
 */
invoiceValue?: number
/**
 * Package invoice URL.
 */
invoiceUrl?: string
/**
 * Package invoice issuance date in [ISO 8601 time zone offset format](https://learn.microsoft.com/en-us/rest/api/storageservices/formatting-datetime-values), as in `YYYY-MM-DDThh:mm:ssZ`.
 */
issuanceDate?: string
/**
 * Package [tracking number](https://developers.vtex.com/docs/api-reference/orders-api#patch-/api/oms/pvt/orders/-orderId-/invoice/-invoiceNumber-).
 */
trackingNumber?: string
/**
 * Package invoice key.
 */
invoiceKey?: string
/**
 * Package tracking URL.
 */
trackingUrl?: string
/**
 * Package invoice text in [xml format](https://help.vtex.com/en/tutorial/configuring-xml--tutorials_242). This field is important for stores integrated with [external marketplaces](https://developers.vtex.com/docs/guides/external-marketplace-integration-guide).
 */
embeddedInvoice?: string
/**
 * Package invoice type, which can be:
 * - `Output`: Selling order invoice.
 * - `Input`: Returning items invoice.
 */
type?: ("Output" | "Input")
/**
 * Information on each item in the package.
 */
items?: {
/**
 * Item index of the item position whithin the `items` array. The count starts at `0`.
 */
itemIndex?: number
/**
 * SKU ID.
 */
id?: string
/**
 * Package item quantity.
 */
quantity?: number
/**
 * Package item price in cents.
 */
price?: number
/**
 * Package item description.
 */
description?: string
/**
 * Package item unit multiplier.
 */
unitMultiplier?: number
}[]
/**
 * [Carrier](https://help.vtex.com/en/tutorial/carriers-on-vtex--7u9duMD5UQa2QQwukAWMcE) shipping information.
 */
courierStatus?: {
/**
 * Package delivery date in [ISO 8601 time zone offset format](https://learn.microsoft.com/en-us/rest/api/storageservices/formatting-datetime-values), as in `YYYY-MM-DDThh:mm:ssZ`.
 */
deliveredDate?: string
/**
 * Defines if a carrier was assigned for order shipping (`ok`) or not (`null`).
 */
status?: string
/**
 * Defines if the carrier has already delivered the package (`true`) or not (`false`).
 */
finished?: boolean
/**
 * Package tracking information.
 */
data?: {
/**
 * Date since package tracking last change in [ISO 8601 time zone offset format](https://learn.microsoft.com/en-us/rest/api/storageservices/formatting-datetime-values), as in `YYYY-MM-DDThh:mm:ssZ`.
 */
lastChange?: string
/**
 * Package tracking city.
 */
city?: string
/**
 * Package tracking state in two-digit code format.
 */
state?: string
/**
 * Package tracking description.
 */
description?: string
/**
 * Package tracking creation date in [ISO 8601 time zone offset format](https://learn.microsoft.com/en-us/rest/api/storageservices/formatting-datetime-values), as in `YYYY-MM-DDThh:mm:ssZ`.
 */
createDate?: string
}[]
}
/**
 * [CFOP](https://www.gov.br/receitafederal/pt-br/acesso-a-informacao/acoes-e-programas/facilitacao/anexo-ecf-cfop) (_Código Fiscal de Operação e Prestação_) is a Brazilian fiscal code of operations and services that classifies business transaction types.
 */
cfop?: string
/**
 * Date since package tracking last change in [ISO 8601 time zone offset format](https://learn.microsoft.com/en-us/rest/api/storageservices/formatting-datetime-values), as in `YYYY-MM-DDThh:mm:ssZ`.
 */
lastChange?: string
/**
 * Information about a value being returned to the customer. This field applies only to invoices with the `Input` type because it relates to returning items.
 */
restitutions?: {
/**
 * Customer refund details.
 */
refund?: {
/**
 * Refund value in cents.
 */
value?: number
/**
 * Refund involving a [gift card](https://developers.vtex.com/docs/guides/gift-card-integration-guide).
 */
giftCardData?: string
/**
 * Information about the items being returned.
 */
items?: {
/**
 * Defines if the refund includes freight values (`true`) or not (`false`).
 */
useFreight?: boolean
/**
 * Defines if there are compensated unit tags in the package (`true`) or not (`false`).
 */
isCompensation?: boolean
/**
 * Compensational refund value in cents.
 */
compensationValue?: number
/**
 * SKU ID of the returned item.
 */
id?: string
/**
 * Number of items being returned.
 */
quantity?: number
/**
 * Returned item price in cents.
 */
price?: number
/**
 * Customer reason for returning the item.
 */
description?: string
}[]
}
}
/**
 * Indicates the number of boxes (volumes) needed to contain the package items. For example, two refrigerators do not fit in a single volume, so this field would have value `2`.
 */
volumes?: number
}[]
}
/**
 * Metadata information about items.
 */
export interface ItemMetadataUpdated {
/**
 * Metadata details about items.
 */
Items?: {
/**
 * SKU ID.
 */
Id?: string
/**
 * Seller ID.
 */
Seller?: string
/**
 * Item name as displayed to customers in the storefront.
 */
Name?: string
/**
 * SKU name.
 */
SkuName?: string
/**
 * Product ID.
 */
ProductId?: string
/**
 * SKU reference ID.
 */
RefId?: string
/**
 * European Article Number (EAN) of the item.
 */
Ean?: string
/**
 * SKU image URL.
 */
ImageUrl?: string
/**
 * SKU slug.
 */
DetailUrl?: string
/**
 * [Assembly options](https://help.vtex.com/en/tutorial/assembly-options--5x5FhNr4f5RUGDEGWzV1nH) information related to the item, when applicable.
 */
AssemblyOptions?: {
/**
 * Assembly option ID.
 */
Id?: string
/**
 * Assembly option name.
 */
Name?: string
/**
 * Defines if sending the attachment for the item purchased is required(`true`) or optional (`false`).
 */
Required?: boolean
/**
 * Assembly option content.
 */
InputValues?: {
/**
 * Assembly option value.
 */
[k: string]: string
}
/**
 * Assembly option composition.
 */
Composition?: {
/**
 * Assembly option composition value.
 */
[k: string]: string
}
}[]
}[]
}
/**
 * Information about [subscriptions](https://help.vtex.com/en/tutorial/how-subscriptions-work--frequentlyAskedQuestions_4453), when applicable.
 */
export interface SubscriptionDataUpdated {
/**
 * Subscription group ID. If this field returns `null` and the `executionCount` is `0`, the order is the first subscription order.
 */
subscriptionGroupId?: string
/**
 * List with subscriptions details.
 */
subscriptions?: {
/**
 * Position of the order in the subscription cycle. The first order will have the value `0`, the second will have the value `1`, and so on.
 */
executionCount?: number
/**
 * @deprecated
 * Value of the order when the customer subscribed. Subscriptions created via VTEX Admin or [Subscriptions API](https://developers.vtex.com/docs/api-reference/subscriptions-api-v3) do not have an original order, so this field returns `0.0`.
 */
priceAtSubscriptionDate?: number
/**
 * Each item in the subscription order is identified by an index. The position starts in `0`, followed by `1`, `2`, and so on.
 */
itemIndex?: number
/**
 * Information about the [subscription plan](https://help.vtex.com/en/tutorial/subscription-plans-beta--5kczKRqHEsrs1tYtRcY8wR).
 */
plan?: {
/**
 * Plan type.
 */
type?: string
/**
 * Information about the subscription recurrence.
 */
frequency?: {
/**
 * Defines the subscription recurrence period.
 */
periodicity?: ("DAILY" | "WEEKLY" | "MONTHLY" | "YEARLY")
/**
 * Time interval configured between subscription orders, which depends on the frequency. For a `DAY` frequency, the value will be days, for `MONTH` it will be months, and so on.
 */
interval?: number
}
/**
 * Information about the period during which the subscription will be valid.
 */
validity?: {
/**
 * Subscription plan beginning date and time in [ISO 8601 time zone offset format](https://learn.microsoft.com/en-us/rest/api/storageservices/formatting-datetime-values), as in `YYYY-MM-DDThh:mm:ssZ`.
 */
begin?: string
/**
 * Subscription plan ending date and time in [ISO 8601 time zone offset format](https://learn.microsoft.com/en-us/rest/api/storageservices/formatting-datetime-values), as in `YYYY-MM-DDThh:mm:ssZ`.
 */
end?: string
}
}
}[]
}
/**
 * Information about [order cancellation](https://developers.vtex.com/docs/guides/order-canceling-improvements), when applicable.
 */
export interface CancellationDataUpdated {
/**
 * Defines if the order cancellation was requested by the customer (`true`) or not (`false`).
 */
requestedByUser?: boolean
/**
 * Defines if the order cancellation was made by the system (`true`) or not (`false`). This type of order cancellation happens in [incomplete orders](https://help.vtex.com/en/tutorial/how-incomplete-orders-work--tutorials_294), for example.
 */
requestedBySystem?: boolean
/**
 * Defines if the order cancellation was requested by the seller (`true`) or not (`false`).
 */
requestedBySellerNotification?: boolean
/**
 * Defines if the order cancellation was requested by the payment gateway (`true`) or not (`false`).
 */
requestedByPaymentNotification?: boolean
/**
 * Reason why the order was canceled.
 */
reason?: string
/**
 * Order cancellation date in [ISO 8601 time zone offset format](https://learn.microsoft.com/en-us/rest/api/storageservices/formatting-datetime-values), as in `YYYY-MM-DDThh:mm:ssZ`.
 */
cancellationDate?: string
/**
 * ID that identifies the cancellation operation.
 */
cancellationRequestId?: string
}
export interface UpdatepartialinvoiceSendTrackingNumberRequest {
/**
 * The number code that identifies the order tracking.
 */
trackingNumber: string
/**
 * Package tracking URL.
 */
trackingUrl: string
/**
 * Date when the package was dispatched. For example, 2023-01-08T13:16:13.4617653+00:00.
 */
dispatchedDate: string
/**
 * The name of the carrier responsible for delivering the order.
 */
courier: string
}
export interface UpdatepartialinvoiceSendTrackingNumber {
date: string
orderId: string
receipt: string
}
export interface UpdateTrackingStatusRequest {
/**
 * When set as `true`, it means the order got to its final shipping address, whether by delivery or pickup shipping type. When set as `false`, the order is still in transit to its shipping address.
 */
isDelivered: boolean
/**
 * Date and time of when the package was delivered. Note that it is different from the tracking date parameter. The `deliveredDate` format is `yyyy-mm-dd hh:mm`.
 */
deliveredDate: string
/**
 * Array containing events information.
 */
events: Event[]
}
export interface Event {
city: string
state: string
description: string
date: string
}
export interface GetPaymenttransaction {
/**
 * Transaction status.
 */
status: string
/**
 * If it is an active transaction (`true`) or not (`false`).
 */
isActive: boolean
/**
 * Transaction ID.
 */
transactionId: string
/**
 * Transaction merchant's name.
 */
merchantName: string
/**
 * Payments' details object.
 */
payments: Payment1[]
}
export interface Payment1 {
/**
 * Payment ID.
 */
id: string
/**
 * Payment system ID.
 */
paymentSystem: string
/**
 * Payment system name.
 */
paymentSystemName: string
/**
 * Payment value.
 */
value: number
/**
 * Payment Installments quantity.
 */
installments: number
/**
 * Payment reference Value.
 */
referenceValue: number
/**
 * Payment card holder.
 */
cardHolder: string
/**
 * Payment card number.
 */
cardNumber: string
/**
 * Payment card first digits.
 */
firstDigits: string
/**
 * Payment card last digits.
 */
lastDigits: string
/**
 * Card Verification Value (CVV2) is a security code used by payment processors to reduce fraudulent credit and debit card transactions.
 */
cvv2: string
/**
 * Payment card expire month.
 */
expireMonth: string
/**
 * Payment card expire year.
 */
expireYear: string
/**
 * Payment URL.
 */
url: string
/**
 * Gift Card ID.
 */
giftCardId: string
/**
 * Gift Card name.
 */
giftCardName: string
/**
 * Gift Card caption.
 */
giftCardCaption: string
/**
 * Code for the customer to use the Gift Card.
 */
redemptionCode: string
/**
 * It represents the payment method. For each method, it can have the following values: 
 * 
 * - **Credit card:** `creditCard` 
 * 
 * - **Debid card:** `debitCard`
 * 
 * - **Bank invoice:** `bankInvoice`
 * 
 * - **Promissory:** `promissory` 
 * 
 * - **Gift card:** `giftCard` 
 * 
 * - **Pix:** `instantPayment`.
 */
group: string
/**
 * Payment transaction ID.
 */
tid: string
/**
 * Payment due date.
 */
dueDate: string
connectorResponses: ConnectorResponses
}
export interface ConnectorResponses {
/**
 * Connector transaction ID.
 */
Tid: string
/**
 * Connector return code.
 */
ReturnCode: string
/**
 * Information about the connector's responses.
 */
Message: string
/**
 * Connector authorization ID.
 */
authId: string
}
export interface Getfeedorderstatus {
eventId: string
handle: string
domain: string
state: string
lastState: string
orderId: string
lastChange: string
currentChange: string
}
export interface HookConfigurationRequest {
filter: Filter
hook: Hook
}
export interface Filter {
/**
 * Determines what orders appear in the hook and how they are filtered. As shown in the examples above, there are two ways:
 * 
 *  - `FromWorkflow`: the hook will receive order updates only when there is a change or update in the [order status](https://help.vtex.com/en/tutorial/order-flow-and-status--tutorials_196). You must send at least one value for the `status` field to determine by which status the orders will be filtered.
 * 
 *  - `FromOrders`: the hook will receive order updates when there is a change in the order. In this case, orders can be filtered by any property, according to JSONata expressions passed in the `expression` field. You must send the request with values for the `expression` and `disableSingleFire` fields.
 */
type: string
/**
 * List of order statuses that should be included in the hook. This should only be used in case `type` is `FromWorkflow`.
 */
status?: string[]
/**
 * JSONata query expression that defines what conditions must be met for an order to be included in the hook. This should only be used in case `type` is `FromOrders`.
 */
expression?: string
/**
 * Sets a limit to how many times a specific order shows on the hook, after it first meets filtering conditions. Using the `FromOrders` type configuration with JSONata filtering expressions might cause orders to appear more than once on a feed, whenever changes are made to that order. If this field is `false` orders will appear in the hook only once. Send this field if you want to filter `FromOrders`.
 */
disableSingleFire?: boolean
}
export interface Hook {
url: string
headers: Headers
}
export interface Headers {
key: string
}
export interface HookConfiguration {
Domain: string
OrderId: string
State: string
LastState: string
LastChange: string
CurrentChange: string
Origin: Origin2
}
export interface Origin2 {
Account: string
Key: string
}
/**
 * Order list object.
 */
export interface Userorderslist {
/**
 * List with user's orders details.
 */
list: List1[]
/**
 * Array containing facets information.
 */
facets: string[]
paging: Paging
stats: Stats2
}
export interface List1 {
/**
 * Order ID is a unique code that identifies an order.
 */
orderId: string
/**
 * Order's creation date.
 */
creationDate: string
/**
 * Order's customer name.
 */
clientName: string
/**
 * @deprecated
 * Information about order's items.
 */
items: Item2[]
/**
 * Total value amount.
 */
totalValue: number
/**
 * Payment system name.
 */
paymentNames: string
/**
 * Order [status](https://help.vtex.com/en/tutorial/order-flow-and-status--tutorials_196).
 */
status: string
/**
 * @deprecated
 * Status description which is displayed on the Admin panel. This field is deprecated and may not return any value.
 */
statusDescription: string
/**
 * Marketplace order ID.
 */
marketPlaceOrderId: string
/**
 * Six-digit string that follows the order ID. For example, in order `1268540501456-01 (501456)`, the sequence is `501456`.
 */
sequence: string
/**
 * Sales channel (or [trade policy](https://help.vtex.com/tutorial/how-trade-policies-work--6Xef8PZiFm40kg2STrMkMV)) ID related to the order.
 */
salesChannel: string
/**
 * Corresponds to the three-digits [affiliate](https://help.vtex.com/en/tutorial/configuring-affiliates--tutorials_187) identification code of the seller responsible for the order.
 */
affiliateId: string
/**
 * Order's [origin in the order flow](https://developers.vtex.com/docs/guides/orders-overview#understanding-order-flow-types), which can be `Marketplace`, `Fulfillment` or `Chain`.
 */
origin: string
/**
 * If there is a work flow error (`true`) or not (`false`).
 */
workflowInErrorState: boolean
/**
 * If the order is in a work flow retry (`true`) or not (`false`).
 */
workflowInRetry: boolean
/**
 * Last sent transactional message.
 */
lastMessageUnread: string
/**
 * Estimate shipping date.
 */
ShippingEstimatedDate: string
/**
 * The most extended shipping estimation possible.
 */
ShippingEstimatedDateMax: string
/**
 * The least extended shipping estimation possible.
 */
ShippingEstimatedDateMin: string
/**
 * If it is a completed order (`true`) or not (`false`). For more information, see [Order flow and status](https://help.vtex.com/en/tutorial/order-flow-and-status--tutorials_196).
 */
orderIsComplete: boolean
/**
 * Related Gift List ID.
 */
listId: string
/**
 * Related Gift list type.
 */
listType: string
/**
 * Authorized order date.
 */
authorizedDate: string
/**
 * Call center operator responsible for the order.
 */
callCenterOperatorName: string
/**
 * Order's total amount of items.
 */
totalItems: number
/**
 * Currency code in ISO 4217. For example, `BRL`.
 */
currencyCode: string
minItems?: 0
}
export interface Item2 {
/**
 * Seller related to the order.
 */
seller: string
/**
 * Quantity of SKUs.
 */
quantity: number
/**
 * Description of items.
 */
description: string
/**
 * EAN of the SKU.
 */
ean: string
/**
 * Item's reference ID.
 */
refId: string
/**
 * Item's SKU ID, which is a unique numerical identifier.
 */
id: string
/**
 * ID of the Product associated with the item.
 */
productId: string
/**
 * Details on item's selling price.
 */
sellingPrice: number
/**
 * Item's price.
 */
price: number
}
/**
 * Pagination information.
 */
export interface Paging {
/**
 * Total number of orders.
 */
total: number
/**
 * Total number of pages.
 */
pages: number
/**
 * Number of the current page.
 */
currentPage: number
/**
 * Number of orders per page.
 */
perPage: number
}
export interface Stats2 {
stats: Stats3
}
export interface Stats3 {
totalValue: TotalValue1
totalItems: TotalItems1
}
export interface TotalValue1 {
Count: number
Max: number
Mean: number
Min: number
Missing: number
StdDev: number
Sum: number
SumOfSquares: number
Facets: {

}
}
export interface TotalItems1 {
Count: number
Max: number
Mean: number
Min: number
Missing: number
StdDev: number
Sum: number
SumOfSquares: number
Facets: {

}
}
export interface Userorderdetails {
/**
 * Order ID is a unique code that identifies an order.
 */
orderId: string
/**
 * Sequence is a six-digit string that follows the order ID. For example, in order `1268540501456-01 (501456)`, the sequence is `501456`.
 */
sequence: string
/**
 * Marketplace order ID.
 */
marketplaceOrderId: string
/**
 * Marketplace services endpoint.
 */
marketplaceServicesEndpoint: string
/**
 * ID of the seller related to the order. It can be a VTEX seller or an external seller.
 */
sellerOrderId: string
/**
 * Order's [origin in the order flow](https://developers.vtex.com/docs/guides/orders-overview#understanding-order-flow-types), which can be `Marketplace`, `Fulfillment` or `Chain`.
 */
origin: string
/**
 * Corresponds to the three-digit [affiliate](https://help.vtex.com/en/tutorial/configuring-affiliates--tutorials_187) identification code of the seller responsible for the order.
 */
affiliateId: string
/**
 * Sales channel (or [trade policy](https://help.vtex.com/tutorial/how-trade-policies-work--6Xef8PZiFm40kg2STrMkMV)) ID related to the order.
 */
salesChannel: string
/**
 * Name of the merchant.
 */
merchantName: string
/**
 * Order [status](https://help.vtex.com/en/tutorial/order-flow-and-status--tutorials_196).
 */
status: string
/**
 * @deprecated
 * `Deprecated`. Status description which is displayed on the Admin panel. This field is obsolete and may not return any value.
 */
statusDescription: string
/**
 * Order's total amount.
 */
value: number
/**
 * Order's creation date.
 */
creationDate: string
/**
 * Order's last change date.
 */
lastChange: string
/**
 * Order's group ID.
 */
orderGroup: string
/**
 * List with details about orders' totals.
 */
totals: Total[]
/**
 * Information about order's items.
 */
items: Item[]
/**
 * Marketplace details object.
 */
marketplaceItems: string[]
clientProfileData: ClientProfileData
/**
 * Information about gift list, when it applies.
 */
giftRegistryData: string
/**
 * Information about promotions and marketing. For example, coupon tracking information and internal or external UTMs.
 */
marketingData: {
/**
 * Object ID which expected value is `marketingData`.
 */
id: string
/**
 * Value of the `utm_source` parameter of the URL that led to the request.
 */
utmSource: string
/**
 * UTM Source Parameters.
 */
utmPartner: string
/**
 * Value of the `utm_medium` parameter of the URL that led to the request.
 */
utmMedium: string
/**
 * Value of the `utm_campaign` parameter of the URL that led to the request.
 */
utmCampaign: string
/**
 * Coupon's code information.
 */
coupon: string
/**
 * Internal UTM value `utmi_cp`.
 */
utmiCampaign: string
/**
 * Internal UTM value `utmi_p`.
 */
utmipage: string
/**
 * Internal UTM value `utmi_pc`.
 */
utmiPart: string
/**
 * Marketing tags information. This field can be used to register campaign data or informative tags regarding promotions.
 */
marketingTags: string[]
}
ratesAndBenefitsData: RatesAndBenefitsData
shippingData: ShippingData
paymentData: PaymentData
packageAttachment: PackageAttachment
/**
 * List of all sellers associated with the order.
 */
sellers: Seller[]
/**
 * Call center operator responsible for the order.
 */
callCenterOperatorData: string
/**
 * Email of the store's employee responsible for managing the order.
 */
followUpEmail: string
/**
 * Last sent transactional message.
 */
lastMessage: string
/**
 * Account Hostname registered in License Manager.
 */
hostname: string
/**
 * Information pertinent to the order's invoice.
 */
invoiceData: {

}
changesAttachment: ChangesAttachment
/**
 * Optional field with order's additional information. This field must be filled in using the following format: 
 * ```
 * {
 *     "fieldExample": "ValueExample"
 *   }
 * ```
 * .
 */
openTextField: string
/**
 * Rounding error total amount, if it applies. For example, in orders with a discount over non-integer multiplier items, the rounding price is performed per item, not after the sum of all items. That can cause a difference in the total discount amount, which is informed in this field.
 */
roundingError: number
/**
 * [Order form](https://developers.vtex.com/docs/guides/orderform-fields) ID.
 */
orderFormId: string
/**
 * Information about commercial conditions.
 */
commercialConditionData: string
/**
 * When set as `true`, the order's payment has been settled, and when set as `false`, it has not been settled yet.
 */
isCompleted: boolean
/**
 * Custom information in the order. This field is useful for storing data not included in other fields, for example, a message for a gift or a name to be printed in a shirt.
 */
customData: string
storePreferencesData: StorePreferencesData
/**
 * When set as `true`, the order can be canceled, and when set as `false`, it is no longer possible to cancel the order.
 */
allowCancellation: boolean
/**
 * When set as `true`, the order can be edited, and when set as `false`, it is no longer possible to edit the order.
 */
allowEdition: boolean
/**
 * This field is set `true` when the order was made via inStore and `false` when it was not.
 */
isCheckedIn: boolean
marketplace: Marketplace
/**
 * Authorized order date.
 */
authorizedDate: string
/**
 * Order's invoice date.
 */
invoicedDate: string
/**
 * Reason for order cancellation.
 */
cancelReason: string
/**
 * Metadata information about the order's items.
 */
itemMetadata: {
/**
 * Metadata items.
 */
Items: {
/**
 * Item's SKU ID, which is a unique numerical identifier.
 */
Id: string
/**
 * Seller ID that identifies the seller the item belongs to.
 */
Seller: string
/**
 * Name of the item as displayed to customers in the storefront.
 */
Name: string
/**
 * Name of the SKU corresponding to the item.
 */
SkuName: string
/**
 * ID of the Product associated with the item.
 */
ProductId: string
/**
 * Item's reference ID.
 */
RefId: string
/**
 * EAN of the item.
 */
Ean: string
/**
 * Item's SKU image URL.
 */
ImageUrl: string
/**
 * URL slug of the item.
 */
DetailUrl: string
/**
 * Displays information about [assembly options](https://help.vtex.com/en/tutorial/assembly-options--5x5FhNr4f5RUGDEGWzV1nH) related to the item, if there are any.
 */
AssemblyOptions: {
/**
 * ID of the attachment related to the order.
 */
Id: string
/**
 * Name of the attachment related to the order.
 */
Name: string
/**
 * If this field is set as `true`, when the customer purchases the item sending the attachment is required, and when set as `false`, sending the attachment is optional.
 */
Required: boolean
/**
 * Displays the attachment's content.
 */
InputValues: {

}
/**
 * Displays the attachment's composition.
 */
Composition: {

}
}[]
}[]
}
/**
 * Information about [subscriptions](https://help.vtex.com/tutorial/how-subscriptions-work--frequentlyAskedQuestions_4453).
 */
subscriptionData: {
/**
 * ID of the subscription's group. If this field returns `null` and the `executionCount` is `0`, the order is the first one with subscriptions.
 */
SubscriptionGroupId: string
/**
 * List with subscriptions and their details.
 */
Subscriptions: {
/**
 * Position of the order in the subscription cycle. The first order will have the value `0`, the second will have the value `1`, and so on.
 */
ExecutionCount: number
/**
 * @deprecated
 * Price of the order when the customer signed up for subscriptions. Subscriptions created from Admin UI or APIs do not have an original order, so the field returns `0.0`. This field was valid only for Subscriptions v2 and is deprecated in Subscriptions v3.
 */
PriceAtSubscriptionDate: number
/**
 * Each item in the subscriptions' order is identified by an index. The position starts in`0`, followed by `1`, `2`, and so on.
 */
ItemIndex: number
/**
 * Information about the subscription's validility and frequency.
 */
Plan: {
/**
 * Type of plan.
 */
type: string
/**
 * Information about subscriptions' recurrence.
 */
frequency: {
/**
 * Defines the subscriptions recurrence period. The possible values are `DAILY`,`WEEKLY`, `MONTHLY` and `YEARLY`.
 */
periodicity: string
/**
 * Number of the time interval configured between subscription orders, which depends on the periodicity. For a `DAILY` periodicity, the field's value will correspond to days, for `MONTHLY` to months, and so on.
 */
interval: number
}
/**
 * Information about the period during which the subscription will be valid.
 */
validity: {
/**
 * Subscriptions' beginning date with the format `yyyy-mm-ddThh:mm:ss`.
 */
begin: string
/**
 * Subscriptions' ending date with the format `yyyy-mm-ddThh:mm:ss`.
 */
end: string
}
}
}[]
}
/**
 * Order's tax information.
 */
taxData: {
/**
 * If the taxes were designated by the marketplace (`true`) or not (`false`).
 */
areTaxesDesignatedByMarketplace: boolean
/**
 * Array with taxes' details.
 */
taxInfoCollection: {
/**
 * Item's indexing number.
 */
itemIndex: number
/**
 * Alphanumeric sequence that identifies an SKU.
 */
sku: string
/**
 * Price tag information.
 */
priceTags: {
/**
 * If the tax is a percentage (`true`) or note (`false`).
 */
isPercentual: boolean
/**
 * Name that identifies the tax.
 */
name: string
/**
 * The amount that corresponds to the tax.
 */
rawValue: string
}[]
}[]
}
/**
 * If the field `isCheckedIn` is set as `true`, the `checkedInPickupPointId` will retrieve the ID of the physical store where the order was made.
 */
checkedInPickupPointId: string
/**
 * Information about order cancellation, when it applies.
 */
cancellationData: {
/**
 * If the order cancellation was requested by the costumer (`true`) or not (`false`).
 */
RequestedByUser: boolean
/**
 * If the order cancellation was made by the system (`true`) or not (`false`). This type of order cancellation happens in [incomplete orders](https://help.vtex.com/en/tutorial/how-incomplete-orders-work--tutorials_294), for example.
 */
RequestedBySystem: boolean
/**
 * If the order cancellation was requested by the seller (`true`) or not (`false`).
 */
RequestedBySellerNotification: boolean
/**
 * If the order cancellation was requested by the payment gateway (`true`) or not (`false`).
 */
RequestedByPaymentNotification: boolean
/**
 * The reason why the order was cancelled.
 */
Reason: string
/**
 * The date when the order was cancelled.
 */
CancellationDate: string
}
/**
 * Information about customer's preferences.
 */
clientPreferencesData: {
/**
 * Customer's prefered language while accessing the store.
 */
locale: string
/**
 * When set as `true`, this field indicates customers opted to receive the newsletters, and when set as `false`, it means they did not.
 */
optinNewsLetter: boolean
}
minItems?: 0
}
/**
 * Object about order's totals.
 */
export interface Total {
/**
 * Code that identifies if the information is about `Items`, `Discounts`, `Shipping`, `Tax` or `Change`.
 */
id: string
/**
 * Name of `Items`, `Discounts`, `Shipping`, `Tax` or `Change`.
 */
name: string
/**
 * Total amount of `Items`, `Discounts`, `Shipping`, `Tax` or `Change`.
 */
value: number
}
/**
 * Item details.
 */
export interface Item {
/**
 * Unique ID is an alphanumeric sequence that identifies an SKU in a given order.
 */
uniqueId: string
/**
 * Item's SKU ID, which is a unique numerical identifier.
 */
id: string
/**
 * ID of the Product associated with the item.
 */
productId: string
/**
 * EAN of the SKU.
 */
ean: string
/**
 * Reservation ID.
 */
lockId: string
itemAttachment: ItemAttachment
/**
 * Array containing information on attachments.
 */
attachments: string[]
/**
 * Quantity of items.
 */
quantity: number
/**
 * Seller related to the order.
 */
seller: string
/**
 * Item's name.
 */
name: string
/**
 * Product referencial code associated with the item.
 */
refId: string
/**
 * Item's price.
 */
price: number
/**
 * Item's list price.
 */
listPrice: number
/**
 * Item's manual price.
 */
manualPrice: string
/**
 * List of objects with item's price modifiers.
 */
priceTags: string[]
/**
 * Item's SKU image URL.
 */
imageUrl: string
/**
 * URL slug of the item.
 */
detailUrl: string
/**
 * Item's components.
 */
components: string[]
/**
 * This field groups offerings (services) related to the item and displays their ID and quantity. A gift package is an example of an offering.
 */
bundleItems: string[]
/**
 * Information about params.
 */
params: string[]
/**
 * Item's offerings, which are services related to the item. For example, guarantee or installation.
 */
offerings: string[]
/**
 * List of attachments details.
 */
attachmentOfferings: {
/**
 * Name of the attachment.
 */
name: string
/**
 * If the attachment is required (`true`) or not (`false`).
 */
required: boolean
/**
 * Schema of the content declared in the field `attachmentOfferings`.
 */
schema: {

}
}[]
/**
 * SKU ID from the seller perspective.
 */
sellerSku: string
/**
 * Date until when the price is going to be valid if there is a promotion.
 */
priceValidUntil: string
/**
 * Commission value registered for the seller.
 */
commission: number
/**
 * Item's tax.
 */
tax: number
/**
 * Item's pre sale date.
 */
preSaleDate: string
additionalInfo: AdditionalInfo
/**
 * Item's measurement unit.
 */
measurementUnit: string
/**
 * Item's unit multiplier.
 */
unitMultiplier: number
/**
 * Item's selling price.
 */
sellingPrice: number
/**
 * This field is `true` when the item is a gift in order context and `false` when it is not.
 */
isGift: boolean
/**
 * Item's shipping price.
 */
shippingPrice: string
/**
 * Item's reward value.
 */
rewardValue: number
/**
 * Value of the freight commission.
 */
freightCommission: number
/**
 * Item's price information.
 */
priceDefinitions: {
/**
 * Details on item's selling price.
 */
sellingPrices: {
/**
 * Total value of items in cents.
 */
value: number
/**
 * Quantity of items.
 */
quantity: number
}[]
/**
 * Item's calculated unitary selling price in cents.
 */
calculatedSellingPrice: number
/**
 * Total value of all item's units in cents.
 */
total: number
}
/**
 *  Item's tax code.
 */
taxCode: string
/**
 * Parent item index.
 */
parentItemIndex: string
/**
 * Parent assembly binding.
 */
parentAssemblyBinding: string
/**
 * Call center operator responsible for the order.
 */
callCenterOperator: string
/**
 * @deprecated
 * This field identifies the order in the `handling` status in the workflow, and it was used for VTEX internal control.
 */
serialNumbers: string
/**
 * Retrieves information about orders item's customizations.
 */
assemblies: string[]
/**
 * Item's cost price.
 */
costPrice: number
}
/**
 * Information about attachments, if it applies.
 */
export interface ItemAttachment {
/**
 * Attachment's custom field for content.
 */
content: {

}
/**
 * Attachment's name.
 */
name: string
}
/**
 * Additional information about the item.
 */
export interface AdditionalInfo {
/**
 * Item's brand name.
 */
brandName: string
/**
 * Item's brand ID.
 */
brandId: string
/**
 * Item's category ID.
 */
categoriesIds: string
/**
 * All product clusters related to the item.
 */
productClusterId: string
/**
 * Commercial conditions ID.
 */
commercialConditionId: string
dimension: Dimension
/**
 * Information about services related to the item. For example: guarantee or installation.
 */
offeringInfo: string
/**
 * Offering type.
 */
offeringType: string
/**
 * Offering type ID.
 */
offeringTypeId: string
}
/**
 * Object with information on the client's profile.
 */
export interface ClientProfileData {
/**
 * Object ID, the expected value is `clientProfileData`.
 */
id: string
/**
 * Customer's email.
 */
email: string
/**
 * Customer's first name.
 */
firstName: string
/**
 * Customer's last name.
 */
lastName: string
/**
 * Type of the document informed by the customer.
 */
documentType: string
/**
 * Document identification code informed by the customer.
 */
document: string
/**
 * Customers's phone number.
 */
phone: string
/**
 * If the customer is a legal entity, here goes the corporate name.
 */
corporateName: string
/**
 * If the customer is a legal entity, here goes the trade name.
 */
tradeName: string
/**
 * If the customer is a legal entity, here goes the corporate document.
 */
corporateDocument: string
/**
 * If the customer is a legal entity, here goes the state inscription.
 */
stateInscription: string
/**
 * If the customer is a legal entity, here goes the corpany's phone number.
 */
corporatePhone: string
/**
 * The value is `true` when the customer is a legal entity and `false` when not.
 */
isCorporate: boolean
/**
 * Customer user profile ID.
 */
userProfileId: string
/**
 * Identification of the class the customer belongs to.
 */
customerClass: string
}
/**
 * Information on promotions and taxes that apply to the order.
 */
export interface RatesAndBenefitsData {
/**
 * ID of the rate or benefit.
 */
id: string
/**
 * Information about order's promotions and taxes identifiers.
 */
rateAndBenefitsIdentifiers: string[]
}
/**
 * Object containing shipping data.
 */
export interface ShippingData {
/**
 * Object ID, the expected value is `shippingData`.
 */
id: string
address: Address
/**
 * Array of objects containing item's logistics information.
 */
logisticsInfo: LogisticsInfo[]
/**
 * List containing order shipping label information.
 */
trackingHints: string
/**
 * Information about selected adresses.
 */
selectedAddresses: SelectedAddress[]
}
/**
 * Shipping address details.
 */
export interface Address {
/**
 * Type of address. For example, `Residential` or `Pickup`, among others.
 */
addressType: string
/**
 * Name of the person who is going to receive the order.
 */
receiverName: string
/**
 * Shipping address ID.
 */
addressId: string
/**
 * Shipping address version ID.
 */
versionId: string
/**
 * Shipping address entity ID.
 */
entityId: string
/**
 * Postal code of the shipping address.
 */
postalCode: string
/**
 * City of the shipping address.
 */
city: string
/**
 * State of the shipping address.
 */
state: string
/**
 * Three letters ISO code of the country of the shipping address (ISO 3166 ALPHA-3).
 */
country: string
/**
 * Street of the shipping address.
 */
street: string
/**
 * Number of the building, house or apartment in the shipping address.
 */
number: string
/**
 * Neighborhood of the shipping address.
 */
neighborhood: string
/**
 * Complement to the shipping address when it applies.
 */
complement: string
/**
 * Complement to help locate the shipping address, in case of delivery.
 */
reference: string
/**
 * Array with two numbers with geocoordinates, first longitude then latitude.
 */
geoCoordinates: number[]
}
export interface LogisticsInfo {
/**
 * Index of the item starting from 0.
 */
itemIndex: number
/**
 * Selected shipping option.
 */
selectedSla: string
/**
 * Logistics [reservation](https://help.vtex.com/en/tutorial/how-does-reservation-work--tutorials_92) waiting time.
 */
lockTTL: string
/**
 * Shipping price for the item in cents. Does not account for the whole order's shipping price.
 */
price: number
/**
 * SKU's optional price for a specific trade policy.
 */
listPrice: number
/**
 * Item's selling price.
 */
sellingPrice: number
/**
 * [Scheduled delivery](https://help.vtex.com/tutorial/scheduled-delivery--22g3HAVCGLFiU7xugShOBi) window information, if it applies to the item.
 */
deliveryWindow: string
/**
 * [Carrier](https://help.vtex.com/en/tutorial/transportadoras-na-vtex--7u9duMD5UQa2QQwukAWMcE) company's name.
 */
deliveryCompany: string
/**
 * Total shipping estimate time in days. For instance, three business days is represented `3bd`.
 */
shippingEstimate: string
/**
 * Shipping estimate date. It is defined only after the confirmation of the order.
 */
shippingEstimateDate: string
/**
 * Information on Service Level Agreement (SLA), corresponding to [shipping policies](https://help.vtex.com/tutorial/shipping-policy--tutorials_140).
 */
slas: Sla[]
/**
 * Three letters ISO code of the country of the shipping address (ISO 3166 ALPHA-3).
 */
shipsTo: string[]
/**
 * Information about delivery IDs.
 */
deliveryIds: DeliveryId[]
/**
 * List of delivery channels associated with the trade policy.
 */
deliveryChannels: {
/**
 * Delivery channel's shipping type, which can be `delivery` or `pickup-in-point`.
 */
id: string
/**
 * Stock check for an SKU availability.
 */
stockBalance: number
}[]
/**
 * If the delivery channel is `delivery` or `pickup-in-point`.
 */
deliveryChannel: string
pickupStoreInfo: PickupStoreInfo
/**
 * Address ID.
 */
addressId: string
/**
 * Shipping address version ID.
 */
versionId: string
/**
 * Shipping address entity ID.
 */
entityId: string
/**
 * Name of the [polygon](https://help.vtex.com/en/tutorial/registering-geolocation/) associated with the shipping policy.
 */
polygonName: string
/**
 * [Pickup point](https://help.vtex.com/en/tutorial/pickup-points--2fljn6wLjn8M4lJHA6HP3R)'s ID.
 */
pickupPointId: string
/**
 * Duration in business days of the time the carrier takes in transit to fulfill the order. For example, three business days is represented `3bd`.
 */
transitTime: string
}
export interface Sla {
/**
 * ID of the shipping method used in the [shipping policy](https://help.vtex.com/en/tutorial/shipping-policy--tutorials_140).
 */
id: string
/**
 * Name of the shipping policy.
 */
name: string
/**
 * Total shipping estimate time in days. For instance, three business days is represented `3bd`.
 */
shippingEstimate: string
/**
 * [Scheduled delivery window](https://help.vtex.com/tutorial/scheduled-delivery--22g3HAVCGLFiU7xugShOBi) information, if it applies to the item.
 */
deliveryWindow: string
/**
 * Shipping price for the item in cents. Does not account for the whole order's shipping price.
 */
price: number
/**
 * If the delivery channel is `delivery` or `pickup-in-point`.
 */
deliveryChannel: string
pickupStoreInfo: PickupStoreInfo
/**
 * Name of the [polygon](https://help.vtex.com/en/tutorial/registering-geolocation/) associated with the shipping policy.
 */
polygonName: string
/**
 * Logistics [reservation](https://help.vtex.com/en/tutorial/how-does-reservation-work--tutorials_92) waiting time of the SLA.
 */
lockTTL: string
/**
 * [Pickup point](https://help.vtex.com/en/tutorial/pickup-points--2fljn6wLjn8M4lJHA6HP3R) ID related to the SLA.
 */
pickupPointId: string
/**
 * Duration in business days of the time the carrier takes in transit to fulfill the order. For example, three business days is represented `3bd`.
 */
transitTime: string
/**
 * Distance in kilometers between the pickup point and the customer's address. The distance is measured as a straight line.
 */
pickupDistance: number
}
/**
 * Detailed information about a [pickup point](https://help.vtex.com/en/tutorial/pickup-points--2fljn6wLjn8M4lJHA6HP3R).
 */
export interface PickupStoreInfo {
/**
 * Additional information about the pickup point.
 */
additionalInfo: string
/**
 * Pickup point's address.
 */
address: string
/**
 * ID of the [loading dock](https://help.vtex.com/pt/tutorial/doca--5DY8xHEjOLYDVL41Urd5qj) related to the delivery or the pickup point.
 */
dockId: string
/**
 * Name of the pickup point displayed at checkout.
 */
friendlyName: string
/**
 * If this field is set `true`, it means the type of shipping is pickup, and if set as `false`, it is not.
 */
isPickupStore: boolean
}
/**
 * Information about delivery IDs.
 */
export interface DeliveryId {
/**
 * [Carrier](https://help.vtex.com/en/tutorial/transportadoras-na-vtex--7u9duMD5UQa2QQwukAWMcE)'s ID.
 */
courierId: string
/**
 * Carrier's name.
 */
courierName: string
/**
 * ID of the [loading dock](https://help.vtex.com/pt/tutorial/doca--5DY8xHEjOLYDVL41Urd5qj).
 */
dockId: string
/**
 * Quantity of items.
 */
quantity: number
/**
 * ID of the [warehouse](https://help.vtex.com/tutorial/warehouse--6oIxvsVDTtGpO7y6zwhGpb).
 */
warehouseId: string
/**
 * Name of the account's [carrier](https://help.vtex.com/en/tutorial/transportadoras-na-vtex--7u9duMD5UQa2QQwukAWMcE).
 */
accountCarrierName: string
/**
 * Information about [kits](https://help.vtex.com/tutorial/what-is-a-kit--5ov5s3eHM4AqAAgqWwoc28), if there are any.
 */
kitItemDetails: string[]
}
export interface SelectedAddress {
/**
 * Selected address ID.
 */
addressId: string
/**
 * Shipping address version ID of the selected address.
 */
versionId: string
/**
 * Shipping address entity ID  of the selected address.
 */
entityId: string
/**
 * Selected adress's shipping type, which can be `pickup`, `residential`, `invoice`, `search`, `inStore`, `commercial` or `giftRegistry`.
 */
addressType: string
/**
 * Name of the person who is going to receive the order in the selected address.
 */
receiverName: string
/**
 * Street of the selected address.
 */
street: string
/**
 * Number of the building, house or apartment of the selected address.
 */
number: string
/**
 * Complement to the selected address if it applies.
 */
complement: string
/**
 * Neighborhood of the selected address.
 */
neighborhood: string
/**
 * Postal code of the selected address.
 */
postalCode: string
/**
 * City of the selected address.
 */
city: string
/**
 * State of the selected address.
 */
state: string
/**
 * Three letters ISO code of the country of the selected address (ISO 3166 ALPHA-3).
 */
country: string
/**
 * Complement to help locate the selected address.
 */
reference: string
/**
 * Array with two numbers with the selected address's geocoordinates, first longitude then latitude.
 */
geoCoordinates: number[]
}
/**
 * Object with information about the payment.
 */
export interface PaymentData {
/**
 * Array with information about Gift Cards.
 */
giftCards?: string[]
/**
 * Information about financial transactions.
 */
transactions: Transaction[]
}
/**
 * Financial transaction details.
 */
export interface Transaction {
/**
 * When this field is set as `true`, the payment is active, and when it is `false`, the payment is inactive.
 */
isActive: boolean
/**
 * ID of the transaction.
 */
transactionId: string
/**
 * Name of the merchant that will receive the payment.
 */
merchantName: string
/**
 * Detailed information about payment.
 */
payments: Payment[]
}
/**
 * Payment details.
 */
export interface Payment {
/**
 * VTEX payment ID that can be used as unique identifier.
 */
id: string
/**
 * Payment system's ID.
 */
paymentSystem: string
/**
 * Payment system's name.
 */
paymentSystemName: string
/**
 * Payment's final amount in cents.
 */
value: number
/**
 * Number of payment installments.
 */
installments: number
/**
 * Payment's reference value in cents.
 */
referenceValue: number
/**
 * Name of the person who owns the card.
 */
cardHolder: string
/**
 * Numeric sequence of the card used in the transaction.
 */
cardNumber: string
/**
 * Fist digits of the card used in the transaction.
 */
firstDigits: string
/**
 * Last digits of the card used in the transaction.
 */
lastDigits: string
/**
 * Card Verification Value (CVV2) is a security code used by payment processors to reduce fraudulent credit and debit card transactions.
 */
cvv2: string
/**
 * Expire month of the card used in the transaction (2-digits).
 */
expireMonth: string
/**
 * Expire year of the card used in the transaction (4-digits).
 */
expireYear: string
/**
 * Payment's URL.
 */
url: string
/**
 * Gift Card's ID.
 */
giftCardId: string
/**
 * Gift Card's name.
 */
giftCardName: string
/**
 * Gift Card's caption.
 */
giftCardCaption: string
/**
 * Code for the customer to use the Gift Card.
 */
redemptionCode: string
/**
 * Name of the collection the Gift Card belongs to.
 */
group: string
/**
 * Provider's unique identifier for the transaction.
 */
tid: string
/**
 * Payment due date, with the format `yyyy-mm-dd`.
 */
dueDate: string
/**
 * Information about the connector responses.
 */
connectorResponses: {
/**
 * Provider's unique identifier for the transaction.
 */
Tid: string
/**
 * Provider's operation/error code to be logged.
 */
ReturnCode: string
/**
 * Provider's operation/error message to be logged.
 */
Message: string
/**
 * Connector's authorization ID.
 */
authId: string
}
/**
 * Gift Card provider's ID.
 */
giftCardProvider: string
/**
 * When this field is set as `true`, the Gift Card is a discount over the price, and when set as `false`, it is not a discount.
 */
giftCardAsDiscount: boolean
/**
 * Payment's account ID.
 */
koinUrl: string
/**
 * Payment's account ID.
 */
accountId: string
/**
 * This field retrieves the main account if the payment was made in a subaccount.
 */
parentAccountId: string
/**
 * Numeric sequence that identifies the bank issued invoice.
 */
bankIssuedInvoiceIdentificationNumber: string
/**
 * Bank issued invoice ID formatted.
 */
bankIssuedInvoiceIdentificationNumberFormatted: string
/**
 * Number of the bank issued invoice bar code.
 */
bankIssuedInvoiceBarCodeNumber: string
/**
 * Type of the bank issued invoice bar code.
 */
bankIssuedInvoiceBarCodeType: string
/**
 * Billing address information.
 */
billingAddress: {

}
}
/**
 * Package object populated after order invoiced.
 */
export interface PackageAttachment {
/**
 * Packages details.
 */
packages: string[]
}
/**
 * Information about the seller associated with the order.
 */
export interface Seller {
/**
 * Seller ID that identifies the seller.
 */
id: string
/**
 * Seller's name.
 */
name: string
/**
 * URL of the seller's logo.
 */
logo: string
/**
 * URL of the endpoint for fulfillment of seller's orders.
 */
fulfillmentEndpoint: string
}
/**
 * Information about changes in the order.
 */
export interface ChangesAttachment {
/**
 * Object ID, the expect value is `changeAttachment`.
 */
id: string
/**
 * Order change details.
 */
changesData: ChangesDatum[]
}
export interface ChangesDatum {
/**
 * Text explaining why there was a change in the order. This information may be shown to the customer in the UI or transactional emails.
 */
reason: string
/**
 * Order change discount value.
 */
discountValue: number
/**
 * Order change increment value.
 */
incrementValue: number
/**
 * List of items added to the order.
 */
itemsAdded: string[]
/**
 * List of items removed from the order.
 */
itemsRemoved: ItemsRemoved[]
receipt: Receipt
}
export interface ItemsRemoved {
/**
 * SKU ID of the item removed from the order.
 */
id: string
/**
 * Name of the item removed from the order.
 */
name: string
/**
 * Quantity of items removed from the order.
 */
quantity: number
/**
 * Total amount of items removed from the order.
 */
price: number
/**
 * Unit multiplier of the item removed from the order.
 */
unitMultiplier: string
}
/**
 * Information about the receipt for modified orders.
 */
export interface Receipt {
/**
 * Date when the receipt was created.
 */
date: string
/**
 * ID of the order.
 */
orderId: string
/**
 * Receipt's unique identifier code.
 */
receipt: string
}
/**
 * Object with data from the store's configuration - stored in VTEX's License Manager.
 */
export interface StorePreferencesData {
/**
 * Three letters ISO code of the country (ISO 3166 ALPHA-3).
 */
countryCode: string
/**
 * Currency code in ISO 4217. For example, `BRL`.
 */
currencyCode: string
currencyFormatInfo: CurrencyFormatInfo
/**
 * Currency Locale Code in LCID in decimal.
 */
currencyLocale: number
/**
 * Currency symbol.
 */
currencySymbol: string
/**
 * Time zone from where the order was made.
 */
timeZone: string
}
/**
 * Object with currency format details.
 */
export interface CurrencyFormatInfo {
/**
 * Quantity of currency decimal digits.
 */
CurrencyDecimalDigits: number
/**
 * Defines what currency decimal separator will be applied.
 */
CurrencyDecimalSeparator: string
/**
 * Defines what currency group separator will be applied.
 */
CurrencyGroupSeparator: string
/**
 * Defines how many characters will be grouped.
 */
CurrencyGroupSize: number
/**
 * Defines if all prices will be initiated with the currency symbol (`true`) or not (`false`).
 */
StartsWithCurrencySymbol: boolean
}
/**
 * Details about the marketplace related to the order.
 */
export interface Marketplace {
/**
 * Marketplace base URL.
 */
baseURL: string
/**
 * If is a certified marketplace.
 */
isCertified: string
/**
 * Name of the marketplace.
 */
name: string
}
/**
 * What the order is changing from.
 */
export interface From2 {
paymentData: PaymentDataV2
/**
 * Items information from before the order change.
 */
items: Item4[]
shippingData: ShippingData3
minItems?: 0
}
/**
 * Payment data object.
 */
export interface PaymentDataV2 {
/**
 * Information about financial transactions.
 */
transactions: string[]
}
export interface Item4 {
/**
 * SKU ID of the item.
 */
id: string
/**
 * Quantity of items been replaced.
 */
quantity: number
/**
 * Item's shipping price. It does not account for the whole order's shipping price and is presented in cents.
 */
price: string
/**
 * Item's measurement unit. For example, `kg` for kilograms or `un` for unitary items.
 */
measurementUnit: string
/**
 * Item's unit multiplier.
 */
unitMultiplier: number
/**
 * Item's selling price.
 */
sellingPrice: string
/**
 * Item's name.
 */
name: string
/**
 * Item's URL slug.
 */
detailUrl: string
/**
 * Item's image URL slug.
 */
imageUrl: string
}
export interface ShippingData3 {
/**
 * Array with shipping information.
 */
logisticsInfo: LogisticsInfo2[]
}
export interface LogisticsInfo2 {
/**
 * Index that identifies the position of the replacing item in the array, starting from `0`.
 */
itemIndex: number
/**
 * Shipping method of the [shipping policy](https://help.vtex.com/en/tutorial/shipping-policy--tutorials_140) used in the replacing order.
 */
selectedSla: string
/**
 * Shipping address ID.
 */
addressId: string
/**
 * Information on Service Level Agreement (SLA) of the order modifications.
 */
slas: SlaV2[]
/**
 * List of countries of the order modifications shipping address.
 */
shipsTo: string[]
/**
 * Replacing item's SKU ID, which is a unique numerical identifier.
 */
itemId: string
/**
 * Array with the delivery channels associated with the trade policy.
 */
deliveryChannels: DeliveryChannel[]
/**
 * Item's final price, calculated in cents.
 */
price: number
/**
 * Item's price list, calculated in cents.
 */
listPrice: number
/**
 * Item's shipping estimate date. The value is in UTC ISO 8601 format `yyyy-mm-ddThh:mm:ss.sssZ`.
 */
shippingEstimate: string
/**
 * Item's estimate duration of the [loading dock](https://help.vtex.com/en/tutorial/loading-dock--5DY8xHEjOLYDVL41Urd5qj) time. For instance, one business day is represented as `1bd`.
 */
dockEstimate: string
/**
 * Replacing item's total shipping duration estimated in days. For instance, three business days are represented as `3bd`.
 */
shippingEstimateDate: string
/**
 * Logistics [reservation](https://help.vtex.com/en/tutorial/how-does-reservation-work--tutorials_92) waiting time of the SLA. For instance, one business day is represented as `1bd`.
 */
lockTTL: string
/**
 * [Carrier](https://help.vtex.com/en/tutorial/carriers-on-vtex--7u9duMD5UQa2QQwukAWMcE) company's name.
 */
deliveryCompany: string
/**
 * Name of the [polygon](https://help.vtex.com/en/tutorial/registering-geolocation/) associated with the shipping policy.
 */
polygonName: string
/**
 * Duration in business days of the time the [carrier](https://help.vtex.com/en/tutorial/carriers-on-vtex--7u9duMD5UQa2QQwukAWMcE) takes in transit to fulfill the order. For example, three business days are represented as `3bd`.
 */
transitTime: string
/**
 * Item's selling price.
 */
sellingPrice: number
/**
 * Array with delivery information.
 */
deliveryIds: DeliveryIdV2[]
/**
 * Order modifications [scheduled delivery](https://help.vtex.com/en/tutorial/scheduled-delivery--22g3HAVCGLFiU7xugShOBi) information, when applicable.
 */
deliveryWindow: string
/**
 * ID of the [pickup point](https://help.vtex.com/en/tutorial/pickup-points--2fljn6wLjn8M4lJHA6HP3R).
 */
pickupPointId: string
pickupStoreInfo: PickupStoreInfoV2
/**
 * Distance in kilometers between the pickup point and the customer's address. The distance is measured as a straight line.
 */
pickupDistance: number
}
/**
 * Service Level Agreement (SLA) object.
 */
export interface SlaV2 {
/**
 * Shipping method of the [shipping policy](https://help.vtex.com/en/tutorial/shipping-policy--tutorials_140) used in the order delivery or pickup.
 */
id: string
/**
 * Order shipping type, which can be `pickup-in-point` for [pickup point](https://help.vtex.com/en/tutorial/pickup-points--2fljn6wLjn8M4lJHA6HP3R), and `delivery` for delivery.
 */
deliveryChannel: string
/**
 * Shipping method of the [shipping policy](https://help.vtex.com/en/tutorial/shipping-policy--tutorials_140) used in the order delivery or pickup. It corresponds to the `id` value.
 */
name: string
/**
 * Information about delivery IDs.
 */
deliveryIds: DeliveryIdV2[]
/**
 * Total shipping duration estimated in days. For instance, three business days is represented as `3bd`.
 */
shippingEstimate: string
/**
 * Shipping estimate date. The value is in UTC ISO 8601 format `yyyy-mm-ddThh:mm:ss.sssZ`.
 */
shippingEstimateDate: string
/**
 * Logistics [reservation](https://help.vtex.com/en/tutorial/how-does-reservation-work--tutorials_92) waiting time of the SLA. For instance, one business day is represented as `1bd`.
 */
lockTTL: string
/**
 * Available [scheduled delivery](https://help.vtex.com/en/tutorial/scheduled-delivery--22g3HAVCGLFiU7xugShOBi) information, for when the shipping policy has shipping windows configurations.
 */
availableDeliveryWindows: string[]
/**
 * [Scheduled delivery](https://help.vtex.com/en/tutorial/scheduled-delivery--22g3HAVCGLFiU7xugShOBi) information, when applicable.
 */
deliveryWindow: {
/**
 * Delivery window starting date and time in [UTC ISO 8601 format](https://learn.microsoft.com/en-us/rest/api/storageservices/formatting-datetime-values), as in `YYYY-MM-DDThh:mm:ssZ`.
 */
startDateUtc?: string
/**
 * Delivery window ending date and time in [UTC ISO 8601 format](https://learn.microsoft.com/en-us/rest/api/storageservices/formatting-datetime-values), as in `YYYY-MM-DDThh:mm:ssZ`.
 */
endDateUtc?: string
}
/**
 * Shipping price for the item in cents. Does not account for the whole order's shipping price.
 */
price: number
/**
 * Item's price list for a specific trade policy.
 */
listPrice: number
/**
 * Tax in cents, when applicable.
 */
tax: number
pickupStoreInfo: PickupStoreInfoV2
/**
 * Pickup point ID is the unique identifier of the [pickup point](https://help.vtex.com/en/tutorial/pickup-points--2fljn6wLjn8M4lJHA6HP3R) related to the SLA.
 */
pickupPointId: string
/**
 * Distance in kilometers between the pickup point and the customer's address. The distance is measured as a straight line.
 */
pickupDistance: number
/**
 * Name of the [polygon](https://help.vtex.com/en/tutorial/registering-geolocation/) associated with the shipping policy.
 */
polygonName: string
/**
 * Duration in business days of the time the [carrier](https://help.vtex.com/en/tutorial/carriers-on-vtex--7u9duMD5UQa2QQwukAWMcE) takes in transit to fulfill the order. For example, three business days is represented as `3bd`.
 */
transitTime: string
}
export interface DeliveryIdV2 {
/**
 * ID of the [shipping policy](https://help.vtex.com/en/tutorial/shipping-policy--tutorials_140).
 */
courierId: string
/**
 * ID of the [warehouse](https://help.vtex.com/tutorial/warehouse--6oIxvsVDTtGpO7y6zwhGpb).
 */
warehouseId: string
/**
 * ID of the [loading dock](https://help.vtex.com/pt/tutorial/doca--5DY8xHEjOLYDVL41Urd5qj).
 */
dockId: string
/**
 * Name of the [shipping policy](https://help.vtex.com/en/tutorial/shipping-policy--tutorials_140).
 */
courierName: string
/**
 * Quantity of items.
 */
quantity: number
kitItemDetails: string[]
/**
 * Name of the account's [carrier](https://help.vtex.com/en/tutorial/carriers-on-vtex--7u9duMD5UQa2QQwukAWMcE).
 */
accountCarrierName: string
}
/**
 * @deprecated
 * Information about a loading dock that was transformed into a [pickup point](https://help.vtex.com/en/tutorial/pickup-points--2fljn6wLjn8M4lJHA6HP3R).
 */
export interface PickupStoreInfoV2 {
/**
 * @deprecated
 * This field is related to converting a loading dock into a pickup point. It should always correspond to `false` because it has been deprecated.
 */
isPickupStore: boolean
/**
 * @deprecated
 * Name of the loading dock converted to pickup point to be displayed at checkout. This field has been deprecated.
 */
friendlyName: string
/**
 * @deprecated
 * Address of the loading dock converted to pickup point. This field has been deprecated.
 */
address: string
/**
 * @deprecated
 * Additional information about the loading dock converted to pickup point. This field has been deprecated.
 */
additionalInfo: string
/**
 * @deprecated
 * ID of the loading dock converted to pickup point. This field has been deprecated.
 */
dockId: string
}
export interface DeliveryChannel {
/**
 * Order modifications shipping type, which can be `pickup-in-point` for [pickup point](https://help.vtex.com/en/tutorial/pickup-points--2fljn6wLjn8M4lJHA6HP3R), and `delivery` for delivery.
 */
id: string
}
export interface To2 {
/**
 * Array containing information about the item replacing the previous one.
 */
items: Item3[]
paymentData: PaymentDataV2
/**
 * Information about the receipt after order modifications.
 */
receiptData: {

}
shippingData: ShippingData3
minItems?: 0
}
/**
 * Object with item details.
 */
export interface Item3 {
/**
 * Item's unique ID in the order modifications request.
 */
uniqueId: string
/**
 * SKU ID of the item replacing the previous one.
 */
id: string
/**
 * Product ID of the item replacing the previous one.
 */
productId: string
/**
 * Product Ref ID of the item replacing the previous one.
 */
productRefId: string
/**
 * Reference ID of the item replacing the previous one.
 */
refId: string
/**
 * European Article Number (EAN) of the item replacing the previous one.
 */
ean: string
/**
 * Name of the Product associated with the item replacing the previous one.
 */
name: string
/**
 * Name of the SKU replacing the previous one.
 */
skuName: string
/**
 * A [modal](https://help.vtex.com/en/tutorial/how-does-the-modal-work--tutorials_125) attaches an unusual product, such as meat or glass, to a carrier specialized in shipping it.
 */
modalType: string
/**
 * Parent item index of the item replacing the previous one.
 */
parentItemIndex: number
/**
 * Parent assembly binding of the item replacing the previous one.
 */
parentAssemblyBinding: string
/**
 * Array with information about services that may be offered for the item replacing the previous one. For example, the assembly of a piece of furniture or warranty.
 */
assemblies: string[]
/**
 * Price expiration date of item replacing the previous one. The value is in the format `yyyy-mm-ddThh:mm:ss.sss`.
 */
priceValidUntil: string
/**
 * Tax in cents of the item replacing the previous one, when applicable.
 */
tax: number
/**
 * Final price of the item replacing the previous one, calculated in cents.
 */
price: number
/**
 * Item's price list for the item replacing the previous one.
 */
listPrice: number
/**
 * Manual price of the item replacing the previous one. It is calculated in cents.
 */
manualPrice: number
/**
 * User ID or appKey that made the manual price modification of the item replacing the previous one.
 */
manualPriceAppliedBy: string
/**
 * Selling price of the item replacing the previous one. It is calculated in cents.
 */
sellingPrice: number
/**
 * Reward value of the item replacing the previous one. It is calculated in cents.
 */
rewardValue: number
/**
 * This field is `true` when the replacing item is a gift in the order context and `false` when it is not.
 */
isGift: boolean
additionalInfo: AdditionalInfoV2
/**
 * Pre sale date of the item replacing the previous one.
 */
preSaleDate: string
/**
 * Replacing item's category path composed of category IDs separated by `/`. For example: `/3/15/`.
 */
productCategoryIds: string
/**
 * Object containing product categories of the replacing item. Structure: `{CategoryID}: {CategoryName}`. Both the key and the value are strings.
 */
productCategories: {

}
/**
 * Quantity of replacing items.
 */
quantity: number
/**
 * Seller ID that identifies the seller the replacing item belongs to.
 */
seller: string
/**
 * Array containing information about sellers involved in the chain. The list should contain only one seller, unless it is a [Multilevel Omnichannel Inventory](https://developers.vtex.com/docs/guides/multilevel-omnichannel-inventory) order.
 */
sellerChain: string[]
/**
 * Image URL slug of the replacing item.
 */
imageUrl: string
/**
 * URL slug of the replacing item.
 */
detailUrl: string
/**
 * Array with information about replacing item's components.
 */
components: string[]
/**
 * Array with information about services sold along with the replacing item, such as a gift package.
 */
bundleItems: string[]
/**
 * Array containing information on attachments.
 */
attachments: string[]
/**
 * Array with the properties of the content declared in the field `attachments`.
 */
attachmentOfferings: string[]
/**
 * Array with replacing items Item's offerings.
 */
offerings: string[]
/**
 * Array containing objects with replacing item's price modifiers.
 */
priceTags: string[]
/**
 * Availability to fulfill the order with the item.
 */
availability: string
/**
 * Replacing item's measurement unit.
 */
measurementUnit: string
/**
 * Replacing item's unit multiplier.
 */
unitMultiplier: number
/**
 * Provided by the manufacturers to identify their product. This field must be completed if the replacing item has a manufacturer's code.
 */
manufacturerCode: string
/**
 * Replacing item's price information.
 */
priceDefinition: string
}
/**
 * Additional information object.
 */
export interface AdditionalInfoV2 {
/**
 * Replacing item's dimensions in the measure unit configured in the catalog.
 */
dimension: string
/**
 * Replacing item's brand name.
 */
brandName: string
/**
 * Replacing item's brand ID.
 */
brandId: string
/**
 * Offering information.
 */
offeringInfo: string
/**
 * Offering type.
 */
offeringType: string
/**
 * Offering type ID.
 */
offeringTypeId: string
/**
 * ID of the replacing item product category.
 */
categoriesIds: string
/**
 * All product clusters related to the replacing item.
 */
productClusterId: string
/**
 * Replacing item commercial conditions ID.
 */
commercialConditionId: string
}
/**
 * Object containing information about the order origin.
 */
export interface OriginV2 {
/**
 * Name of the account where the order was made.
 */
account: string
/**
 * Order ID is a unique code that identifies an order.
 */
orderId: string
/**
 * Component information.
 */
component: string
}
/**
 * Object with account settings information, such as custom payment.
 */
export interface Settings {
/**
 * Store's [custom payment](https://help.vtex.com/tutorial/how-to-configure-a-custom-payment--tutorials_451) information. Applicable only for stores that configured custom payment options.
 */
customPaymentSystemsAllowed: string[]
}
export interface Createchange {
/**
 * Reason why you wish to modify order. Since you can make several modifications to an order, filling this field with a clear explanation helps organize the order modifications history. The shopper can view this field value in [transactional emails](https://help.vtex.com/en/tutorial/order-transactional-email-templates--3g2S2kqBOoSGcCaqMYK2my) and [My Account](https://help.vtex.com/en/tutorial/how-my-account-works--2BQ3GiqhqGJTXsWVuio3Xh).
 */
reason: string
/**
 * Array containing `replace` change information. Besides `replace`, you can `add` or `remove` items from an order.
 * 
 * - `add`: the schema will correspond to the object `to` inside the `replace` array.
 * 
 * - `remove`: the schema will correspond to the object `from` inside the `replace` array.
 * 
 * You will find request body examples of both cases in the endpoint description on the top of the page. The successful response `202 - Accepted` schema is the same for all three operations, whether they are used separately or combined in the same request.
 */
replace?: Replace[]
}
/**
 * Replacing operation object.
 */
export interface Replace {
/**
 * Object with information about the items been replaced. If instead of an order `replace` you wish to `remove` items, you will use the same schema naming the object `remove` instead of `from`. For a complete example, see the description at the top of the page.
 */
from: {
/**
 * Array with information about the item to be replaced.
 */
items: {
/**
 * SKU ID of the item that will be modified.
 */
id: string
/**
 * Unique ID of the item being modified. This field is mandatory when modifying an order that contains items with the same `id`.
 */
uniqueId?: string
/**
 * Quantity of the item being modified. Must be greater than 0.
 */
quantity: number
/**
 * Price of the item being changed in cents. Must be 0 or greater.
 */
price?: number
}[]
minItems?: 0
}
/**
 * Object with information about the new replacing items. If instead of an order `replace` you wish to `add` items, you will use the same schema naming the object `add` instead of `to`. For a complete example, see the description at the top of the page.
 */
to: {
/**
 * Array with information about the replacing items.
 */
items: {
/**
 * SKU ID of the item that will replace the previous one. If you only wish to replace the product weight, you will repeat the SKU ID used in `from`.
 */
id: string
/**
 * Unique ID of the item being modified. This field is mandatory when modifying an order that contains items with the same `id`.
 */
uniqueId?: string
/**
 * Updated quantity of the item being modified. Must be greater than 0.
 */
quantity: number
/**
 * Measurement unit of the new item. The values accepted are the measurement units registered in the store's catalog. For example, `kg` for kilograms or `un` for unitary items. When you don't specify a value, the request gets the information from the Catalog.
 */
measurementUnit?: string
/**
 * Unit multiplier for item update. For example, if you wish to increase an order with three times more items than a single one, you would fill in with `3.0`.
 */
unitMultiplier?: number
/**
 * This field shows if a manual price was applied to the total order amount. The value is in cents. Must be 0 or greater.
 */
manualDiscountValue?: number
/**
 * This field shows if an increment value was applied to the total order amount. The value is in cents. Must be 0 or greater.
 */
manualIncrementValue?: number
clientProfileData?: {
/**
 * Customer's first name.
 */
firstName?: string
/**
 * Customer's last name.
 */
lastName?: string
/**
 * Type of the document informed by the customer.
 */
documentType?: string
/**
 * Document number informed by the customer.
 */
document?: string
/**
 * Customer's phone number.
 */
phone?: string
/**
 * If it's a legal entity, here goes the company name.
 */
corporateName?: string
/**
 * If it's a legal entity, here goes the trade name.
 */
tradeName?: string
/**
 * If it's a legal entity, here goes the corporate document.
 */
corporateDocument?: string
/**
 * If it's a legal entity, here goes the state inscription.
 */
stateInscription?: string
/**
 * If it's a legal entity, here goes the company phone.
 */
corporatePhone?: string
/**
 * It has the value `true` if it's a legal entity.
 */
isCorporate?: boolean
}[]
}[]
/**
 * Shipping data object.
 */
shippingData?: {
/**
 * Array containing information about the shipping address of the modified order. This field is optional, when you don't send it the request body, the system assumes there were no modifications in shipping.
 */
logisticsInfo: {
/**
 * Index that identifies the position of this item in the original array, starting from `0`.
 */
itemIndex: number
/**
 * Shipping method of the [shipping policy](https://help.vtex.com/en/tutorial/shipping-policy--tutorials_140) used in the order.
 */
selectedSla: string
/**
 * Order shipping type, which can be `pickup-in-point` for [pickup point](https://help.vtex.com/en/tutorial/pickup-points--2fljn6wLjn8M4lJHA6HP3R), and `delivery` for delivery.
 */
selectedDeliveryChannel: ("delivery" | "pickup-in-point")
/**
 * Shipping address ID.
 */
addressId: string
/**
 * Shipping price for the item in cents. Does not account for the whole order's shipping price.
 */
price: number
}[]
}
minItems?: 0
}
}
/**
 * Details about what will be replaced.
 */
export interface Replace1 {
/**
 * Information about what items were replaced.
 */
from: {
paymentData: PaymentDataV2
/**
 * Array with items information.
 */
items: {
/**
 * SKU ID of the item being replaced.
 */
id: string
/**
 * Quantity of items been replaced.
 */
quantity: number
/**
 * Shipping price for the replaced item, in cents. It does not account for the whole order's shipping price.
 */
price: number
/**
 * Measurement unit of the item being replaced. For example, `kg` for kilograms or `un` for unitary items.
 */
measurementUnit: string
/**
 * Unit multiplier for item being updated.
 */
unitMultiplier: number
/**
 * Selling price of the item being replaced.
 */
sellingPrice: string
/**
 * Name of the item being replaced.
 */
name: string
/**
 * URL slug of the item being replaced.
 */
detailUrl: string
/**
 * Image URL slug of the item being replaced.
 */
imageUrl: string
}[]
shippingData: ShippingData1
minItems?: 0
}
/**
 * Information about items that replaced the previous one.
 */
to: {
/**
 * Array containing information about the item replacing the previous one.
 */
items: Item3[]
paymentData: PaymentDataV2
/**
 * Information about the receipt after order modifications.
 */
receiptData: {

}
/**
 * Shipping data object.
 */
shippingData: {
/**
 * Array with shipping information.
 */
logisticsInfo: LogisticsInfo1[]
}
clientProfileData?: {
/**
 * Customer's first name.
 */
firstName?: string
/**
 * Customer's last name.
 */
lastName?: string
/**
 * Type of the document informed by the customer.
 */
documentType?: string
/**
 * Document number informed by the customer.
 */
document?: string
/**
 * Customer's phone number.
 */
phone?: string
/**
 * If it's a legal entity, here goes the company name.
 */
corporateName?: string
/**
 * If it's a legal entity, here goes the trade name.
 */
tradeName?: string
/**
 * If it's a legal entity, here goes the corporate document.
 */
corporateDocument?: string
/**
 * If it's a legal entity, here goes the state inscription.
 */
stateInscription?: string
/**
 * If it's a legal entity, here goes the company phone.
 */
corporatePhone?: string
/**
 * It has the value `true` if it's a legal entity.
 */
isCorporate?: boolean
}[]
minItems?: 0
}
}
/**
 * Shipping data object.
 */
export interface ShippingData1 {
/**
 * Array with logistics information about the order been replaced. If not sent in the original request, it will be an empty array in the response.
 */
logisticsInfo: string[]
}
/**
 * Logistics information object.
 */
export interface LogisticsInfo1 {
/**
 * Index that identifies the position of the replacing item in the array, starting from `0`.
 */
itemIndex: number
/**
 * Shipping method of the [shipping policy](https://help.vtex.com/en/tutorial/shipping-policy--tutorials_140) used in the replacing order.
 */
selectedSla: string
/**
 * Shipping address ID of the replacing item.
 */
addressId: string
/**
 * Information on Service Level Agreement (SLA) of the order modifications shipping policy.
 */
slas: SlaV2[]
/**
 * List of countries of the order modification shipping address.
 */
shipsTo: string[]
/**
 * Replacing item's SKU ID, which is a unique numerical identifier.
 */
itemId: string
/**
 * Array with the delivery channels associated with the trade policy.
 */
deliveryChannels: DeliveryChannel[]
/**
 * Replacing item's final price, calculated in cents.
 */
price: number
/**
 * Replacing item's price list, calculated in cents.
 */
listPrice: number
/**
 * Replacing item's shipping estimate date. The value is in UTC ISO 8601 format `yyyy-mm-ddThh:mm:ss.sssZ`.
 */
shippingEstimate: string
/**
 * Replacing item's estimate duration of the [loading dock](https://help.vtex.com/en/tutorial/loading-dock--5DY8xHEjOLYDVL41Urd5qj) time. For instance, one business day is represented as `1bd`.
 */
dockEstimate: string
/**
 * Replacing item's total shipping duration estimated in days. For instance, three business days are represented as `3bd`.
 */
shippingEstimateDate: string
/**
 * Logistics [reservation](https://help.vtex.com/en/tutorial/how-does-reservation-work--tutorials_92) waiting time of the SLA. For instance, one business day is represented as `1bd`.
 */
lockTTL: string
/**
 * [Carrier](https://help.vtex.com/en/tutorial/carriers-on-vtex--7u9duMD5UQa2QQwukAWMcE) company's name.
 */
deliveryCompany: string
/**
 * Name of the [polygon](https://help.vtex.com/en/tutorial/registering-geolocation/) associated with the shipping policy.
 */
polygonName: string
/**
 * Duration in business days of the time the [carrier](https://help.vtex.com/en/tutorial/carriers-on-vtex--7u9duMD5UQa2QQwukAWMcE) takes in transit to fulfill the order. For example, three business days are represented as `3bd`.
 */
transitTime: string
/**
 * Change item's selling price.
 */
sellingPrice: number
/**
 * Array with delivery information.
 */
deliveryIds: DeliveryIdV2[]
/**
 * Order modification [scheduled delivery](https://help.vtex.com/en/tutorial/scheduled-delivery--22g3HAVCGLFiU7xugShOBi) information, when applicable.
 */
deliveryWindow: string
/**
 * ID of the [pickup point](https://help.vtex.com/en/tutorial/pickup-points--2fljn6wLjn8M4lJHA6HP3R).
 */
pickupPointId: string
pickupStoreInfo: PickupStoreInfoV2
/**
 * Distance in kilometers between the pickup point and the customer's address. The distance is measured as a straight line.
 */
pickupDistance: number
}
/**
 * Object with all VTEX account settings related to the **Order modifications** feature.
 */
export interface ChangeOrderSettingsResponse {
/**
 * [Order modifications](https://help.vtex.com/en/tutorial/how-change-order-works-beta--56TO0bOFXsfmpc7YZ3wIUZ) payment configurations.
 */
paymentConfiguration?: {
/**
 * List of custom payment system IDs configured for the VTEX account.
 */
customPaymentSystemsAllowed?: string[]
}
/**
 * **Order modifications** settings regarding VTEX Admin, [Orders API](https://developers.vtex.com/docs/api-reference/orders-api#patch-/api/order-system/orders/-changeOrderId-/changes?endpoint=patch-/api/order-system/orders/-changeOrderId-/changes) and **My Account** feature.
 */
rolloutConfiguration?: {
/**
 * Defines if the **Order modifications** configurations are the default behaviour (`true`) or if the account made customizations to it (`false`). Subaccounts will have the same configurations as the main account.
 */
usingDefaultBehavior?: boolean
/**
 * Defines if the account enabled the [Order modifications API](https://developers.vtex.com/docs/api-reference/orders-api#patch-/api/order-system/orders/-changeOrderId-/changes) (`true`) or not (`false`). The account can only use the [Order modifications via VTEX Admin](https://help.vtex.com/en/tutorial/how-to-change-orders-beta--7btlG91rb6sHpW1dkd2kBw) or [via API](https://developers.vtex.com/docs/api-reference/orders-api#patch-/api/order-system/orders/-changeOrderId-/changes) if this field is set to `true`.
 */
enableApi?: boolean
/**
 * Object about enabling the [Order modifications feature via VTEX Admin](https://help.vtex.com/en/tutorial/how-to-change-orders-beta--7btlG91rb6sHpW1dkd2kBw).
 */
enableAdminOrders?: {
/**
 * List with the workspaces' names that have the **Order modifications** feature enabled via VTEX Admin.
 */
enabledWorkspaces?: string[]
}
/**
 * Object about enabling the **Order modifications** feature via [My Account](https://help.vtex.com/en/tutorial/how-my-account-works--2BQ3GiqhqGJTXsWVuio3Xh).
 */
enableMyOrders?: {
/**
 * List with the workspace names that have the **Order modifications** feature enabled via **My Account**.
 */
enabledWorkspaces?: string[]
}
}
/**
 * **Order modifications** settings related to taxes and shipping calculation.
 */
pipelineConfiguration?: {
/**
 * Defines if the tax calculation is enabled for **Order modifications** (`true`) or not (`false`).
 */
enableTaxHubRecalculation?: boolean
/**
 * Defines if orders changed will have zero shipping cost (`true`) or not (`false`). Merchants usually enable this configuration to change only items and prices, without impacting the orders original freight costs.
 */
compensateShippingChanges?: boolean
}
}
