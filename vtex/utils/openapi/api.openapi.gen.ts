
// deno-fmt-ignore-file
// deno-lint-ignore-file no-explicit-any ban-types ban-unused-ignore
//
// DO NOT EDIT. This file is generated by deco.
// This file SHOULD be checked into source version control.
// To generate this file: deno task start
//        


export interface OpenAPI {
/**
 * Retrieves price data given a specific SKU ID. Within the `fixedPrices` object, there might be a list of prices for specific Trade Policies and Minimium Quantities of the SKU. Fixed Prices may also be scheduled.
 * 
 *  ## Response body example
 * 
 * ```json
 * {
 *     "itemId": "1",
 *     "listPrice": 50,
 *     "costPrice": 90,
 *     "markup": 30,
 *     "basePrice": 117,
 *     "fixedPrices": [
 *         {
 *             "tradePolicyId": "1",
 *             "value": 50.5,
 *             "listPrice": 50.5,
 *             "minQuantity": 2,
 *             "dateRange": {
 *                 "from": "2021-12-31T01:00:00Z",
 *                 "to": "2022-12-31T01:00:00Z"
 *             }
 *         },
 *         {
 *             "tradePolicyId": "2",
 *             "value": 30,
 *             "listPrice": 50,
 *             "minQuantity": 2
 *         }
 *     ]
 * }
 * ```
 */
"GET /pricing/prices/:itemId": {
response: Getprice
}
/**
 * Creates or updates an SKU Base Price or Fixed Prices. The **base price** is the basic selling price of a product, it comprises the cost price and the markup wanted in the sale of the product. The **fixed price** is an optional price of the SKU for a specific trade policy with a specific minimum quantity to be activated.
 * 
 *  <p> You may optionally set a list price. Additionally, you may set either a cost price or a markup value. By defining either one of them, the other will be calculated to conform to the formula <code>costPrice * (1 + markup) = basePrice</code>.</p> <h2>Request body example</h2>
 * 
 * ```json
 * {
 *     "markup": 30,
 *     "basePrice": 100,
 *     "listPrice": 35,
 *     "fixedPrices": [
 *         {
 *             "tradePolicyId": "1",
 *             "value": 31,
 *             "listPrice": 32,
 *             "minQuantity": 1,
 *             "dateRange": {
 *                 "from": "2022-05-21T22:00:00Z",
 *                 "to": "2023-05-28T22:00:00Z"
 *             }
 *         },
 *         {
 *             "tradePolicyId": "1",
 *             "value": 31.5,
 *             "listPrice": 33,
 *             "minQuantity": 2
 *         }
 *     ]
 * }
 * ```
 */
"PUT /pricing/prices/:itemId": {
body: {
/**
 * The profit percentage that is to be obtained from the sale of that SKU. If you decide to fill the `markup` item, you must also fill the `costPrice`. The `basePrice` will be automatically generated based on both values.
 */
markup: number
/**
 * SKU's suggested selling price.
 */
listPrice: number
/**
 * SKU selling base price. If you decide to fill only the `basePrice` item, the `markup` and `costPrice` will be automatically generated to adapt to the number inserted in `basePrice`.
 */
basePrice: number
/**
 * SKU selling cost price. If you decide to fill the `costPrice` item, you must also fill the `markup` and `basePrice` will be automatically generated based on both values.
 */
costPrice?: number
fixedPrices?: {
/**
 * Trade policy name or ID that will have the fixed price configured.
 */
tradePolicyId: string
/**
 * Fixed price value.
 */
value: number
/**
 * SKU List Fixed Price.
 */
listPrice?: number
/**
 * Minimum quantity of the SKU for the fixed price to be applied.
 */
minQuantity: number
/**
 * Period of time when the fixed price will be applied to the SKU.
 */
dateRange?: {
/**
 * Start date of the price.
 */
from: string
/**
 * End date of the price.
 */
to: string
}
}[]
}
}
/**
 * Deletes the Base Price and all available Fixed Prices for an SKU in all trade policies.
 */
"DELETE /pricing/prices/:itemId": {

}
/**
 * The **fixed price** is an optional price of the SKU for a specific trade policy with a specific minimum quantity to be activated. This method retrieves an array of Fixed Prices for an SKU in a Trade Policy with Minimum Quantities.
 * 
 *  The default value for a Minimum Quantity is `1`. This means a Fixed Price will be valid for a SKU in a Trade Policy for orders containing the specified number of Minimum Quantity or above, unless a higher Minimum Quantity is specified.
 * 
 *  Fixed prices may, optionally, be scheduled. If so, these objects will contain the `dateRange` object with `from` and `to` properties, indicating the start and end time of the scheduled fixed price in the RFC3339 timestamp format (`YYYY-MM-DDT23:59:60Z`).
 * 
 *  Note that the 'Z', at the end, represents the UTC time (GMT+00:00). If it was in GMT-03:00, for example, it would be (`YYYY-MM-DDT23:59:60-03:00`).
 * 
 *  ## Response body example
 * 
 * ```json
 * [
 *     {
 *         "tradePolicyId": "6",
 *         "value": 20.9,
 *         "listPrice": 22.9,
 *         "minQuantity": 1,
 *         "dateRange": {
 *             "from": "2021-12-30T22:00:00-03:00",
 *             "to": "2021-12-30T22:00:00-03:00"
 *         }
 *     },
 *     {
 *         "tradePolicyId": "1",
 *         "value": 18.9,
 *         "listPrice": null,
 *         "minQuantity": 1,
 *         "dateRange": {
 *             "from": "2021-12-30T22:00:00-03:00",
 *             "to": "2021-12-30T22:00:00-03:00"
 *         }
 *     }
 * ]
 * ```
 */
"GET /pricing/prices/:itemId/fixed": {

}
/**
 * Retrieves all Fixed Prices on a price table or trade policy. 
 * 
 * ## Response body example
 * 
 * ```json
 * [
 *     {
 *         "tradePolicyId": "6",
 *         "value": 20.9,
 *         "listPrice": 22.9,
 *         "minQuantity": 1,
 *         "dateRange": {
 *             "from": "2021-12-30T22:00:00-03:00",
 *             "to": "2021-12-30T22:00:00-04:00"
 *         }
 *     },
 *     {
 *         "tradePolicyId": "1",
 *         "value": 18.9,
 *         "listPrice": null,
 *         "minQuantity": 1
 *     }
 * ]
 * ```
 */
"GET /pricing/prices/:itemId/fixed/:priceTableId": {

}
/**
 * Creates or updates the fixed prices of an SKU for a specific price table or trade policy. You can add one or multiple fixed prices per SKU.
 * 
 *  ## Request body example
 * 
 * ```json
 * [
 *   {
 *     "value": 50.5,
 *     "listPrice": 50.5,
 *     "minQuantity": 2,
 *     "dateRange": {
 *       "from": "2021-12-30T22:00:00-03:00",
 *       "to": "2021-12-30T22:00:00-04:00"
 *     }
 *   }
 * ]
 * ```
 */
"POST /pricing/prices/:itemId/fixed/:priceTableId": {
body: {
/**
 * Fixed price value.
 */
value: number
/**
 * SKU List Fixed Price.
 */
listPrice?: number
/**
 * The minimum SKU quantity for the fixed price to be applied.
 */
minQuantity: number
/**
 * Period of time when the fixed price will be applied to the SKU.
 */
dateRange?: {
/**
 * Start date of the price.
 */
from: string
/**
 * End date of the price.
 */
to: string
}
}[]
}
/**
 * Deletes all Fixed Prices of an SKU in a specific Price Table or Trade Policy.
 */
"DELETE /pricing/prices/:itemId/fixed/:priceTableId": {

}
/**
 * Gets the Computed Price, which is the price after all the steps in the Pricing pipeline, for an SKU in a specific price table or trade policy. 
 * 
 * ## Response body example
 * 
 * ```json
 * {
 *     "tradePolicyId": "1",
 *     "listPrice": 30,
 *     "costPrice": 76.92,
 *     "sellingPrice": 18.9,
 *     "priceValidUntil": "2018-12-20T18:12:14Z"
 * }
 * ```
 */
"GET /pricing/prices/:itemId/computed/:priceTableId": {
searchParams: {
/**
 * Category ID.
 */
categoryIds: number
/**
 * Brand ID.
 */
brandId: number
/**
 * SKU quantity.
 */
quantity: number
}
}
/**
 * Retrieves Pricing Configuration.
 * ## Response body example
 * 
 * ```json
 * {
 *     "hasMigrated": true,
 *     "migrationStatus": "Completed",
 *     "defaultMarkup": 100,
 *     "priceVariation": {
 *         "upperLimit": null,
 *         "lowerLimit": null
 *     },
 *     "minimumMarkups": {
 *         "1": 100,
 *         "2": 90
 *     },
 *     "tradePolicyConfigs": [],
 *     "sellersToOverride": [],
 *     "hasPriceInheritance": false,
 *     "priceInheritance": "never",
 *     "hasOptionalBasePrice": false,
 *     "blockAccount": false,
 *     "blockedRoutes": null,
 *     "priceTableSelectionStrategy": "first",
 *     "priceTableLimit": null
 * }
 * ```
 */
"GET /pricing/config": {

}
/**
 * Retrieves Pricing v2 Status. 
 * ## Response body example
 * 
 * ```json
 * {
 *     "isActive": true,
 *     "hasMigrated": true
 * }
 * ```
 */
"GET /pricing/migration": {

}
/**
 * This method will retrieve the rules from a specific Price Table.
 * 
 * ## Response body example
 * 
 * ```json
 * {
 *     "tradePolicyId": "b2c",
 *     "rules": [{
 *         "id": 0,
 *         "context": {
 *             "categories": {},
 *             "brands": {
 *                 "2000009": "Whiskas"
 *             },
 *             "stockStatuses": null,
 *             "internalCategories": null,
 *             "markupRange": null,
 *             "dateRange": null
 *         },
 *         "percentualModifier": 15
 *     }]
 * }
 * ```
 */
"GET /pricing/pipeline/catalog/:priceTableId": {
response: {
/**
 * Trade Policy ID (Price Table ID).
 */
tradePolicyId?: string
/**
 * Array of rules for the price table.
 */
rules?: {
/**
 * Rule ID.
 */
id?: number
/**
 * Rule Context is a group of filters to be checked at an item level when applying the rule. If all those filters check out, the rule will be applied for that item, unless there is a fixed price for that item.
 */
context?: {
/**
 * Categories that an item should have to be eligible for the rule. Format: key: `categoryId`, value: `categoryName`.
 */
categories?: {
/**
 * Category ID.
 */
[k: string]: string
}
/**
 * Brands that an item should have to be eligible for the rule. Format: key: `brandId`, value: `brandName`.
 */
brands?: {
/**
 * Brand ID.
 */
[k: string]: string
}
/**
 * Stock statuses.
 */
stockStatuses?: (null | {

})
/**
 * Internal Categories.
 */
internalCategories?: (null | {

})
/**
 * For an item to be eligible to the rule, it's markup should be in this Markup Range.
 */
markupRange?: (null | {
/**
 * Item markup should be greater than or equal to this value.
 */
from?: number
/**
 * Item markup should be less than or equal to this value.
 */
to?: number
})
/**
 * The rule will be active during this time range.
 */
dateRange?: (null | {
/**
 * Date when rule will be activated. Date format: `RFC3339`.
 */
from?: string
/**
 * Date when the rule will be deactivated. Date format: `RFC3339`.
 */
to?: string
})
}
}[]
/**
 * Percentual modifier.
 */
percentualModifier?: number
}
}
/**
 * This method will update the rules from a specific Price Table. It will delete all the rules from the requested Price Table and create new rules based on the content of the request.
 * 
 * ## Request body example
 * 
 * ```json
 * {
 *     "rules": [
 *           {
 *                "id": 1,
 *                "context": {
 *                     "categories": {
 *                          "Category ID": "1",
 *                          "Category Name": "Alimentação"
 *                     },
 *                     "brands": {
 *                          "Brand ID": "2000002",
 *                          "Brand Name": "Whiskas"
 *                     },
 *                     "markupRange": {
 *                          "from": 0,
 *                          "to": 200
 *                     },
 *                     "dateRange": {
 *                          "from": "2022-01-23T19:00:00.000Z",
 *                          "to": "2023-10-26T00:00:00.000Z"
 *                     }
 *                },
 *                "percentualModifier": 0
 *           }
 *     ]
 * }
 * ```
 */
"PUT /pricing/pipeline/catalog/:priceTableId": {
body: {
/**
 * Array of rules for the price table.
 */
rules: {
/**
 * Rule ID.
 */
id: number
/**
 * Rule Context is a group of filters to be checked at an item level when applying the rule. If all those filters check out, the rule will be applied for that item, unless there is a fixed price for that item.
 */
context: {
/**
 * Categories that an item should have to be eligible for the rule. Format: key: `categoryId`, value: `categoryName`.
 */
categories: {
/**
 * Category ID.
 */
[k: string]: string
}
/**
 * Brands that an item should have to be eligible for the rule. Format: key: `brandId`, value: `brandName`.
 */
brands: {
/**
 * Brand ID.
 */
[k: string]: string
}
/**
 * Stock statuses.
 */
stockStatuses?: (null | {

})
/**
 * Internal Categories.
 */
internalCategories?: (null | {

})
/**
 * For an item to be eligible to the rule, it's markup should be in this Markup Range.
 */
markupRange: (null | {
/**
 * Item markup should be greater than or equal to this value.
 */
from: number
/**
 * Item markup should be less than or equal to this value.
 */
to: number
})
/**
 * The rule will be active during this time range.
 */
dateRange: {
/**
 * Date when rule will be activated. Date format: `RFC3339`.
 */
from: string
/**
 * Date when the rule will be deactivated. Date format: `RFC3339`.
 */
to: string
}
}
/**
 * Percentual modifier.
 */
percentualModifier: number
}[]
}
}
/**
 * This method will retrieve all price tables and their rules.
 * 
 * ## Response body example
 * 
 * ```json
 * [
 *     {
 *         "tradePolicyId": "2",
 *         "rules": [
 *             {
 *                 "id": 0,
 *                 "context": {
 *                     "categories": {},
 *                     "brands": {},
 *                     "stockStatuses": null,
 *                     "internalCategories": null,
 *                     "markupRange": null,
 *                     "dateRange": null
 *                 },
 *                 "percentualModifier": 20
 *             }
 *         ]
 *     },
 *     {
 *         "tradePolicyId": "b2c",
 *         "rules": [
 *             {
 *                 "id": 0,
 *                 "context": {
 *                     "categories": {},
 *                     "brands": {
 *                         "2000009": "Whiskas"
 *                     },
 *                     "stockStatuses": null,
 *                     "internalCategories": null,
 *                     "markupRange": null,
 *                     "dateRange": null
 *                 },
 *                 "percentualModifier": 15
 *             }
 *         ]
 *     }
 * ]
 * ```
 */
"GET /pricing/pipeline/catalog": {
response: {
/**
 * Trade Policy ID (Price Table ID).
 */
tradePolicyId?: string
/**
 * Array of rules for the price table.
 */
rules?: {
/**
 * Rule ID.
 */
id?: number
/**
 * Rule Context is a group of filters to be checked at an item level when applying the rule. If all those filters check out, the rule will be applied for that item, unless there is a fixed price for that item.
 */
context?: {
/**
 * Categories that an item should have to be eligible for the rule. Format: key: `categoryId`, value: `categoryName`.
 */
categories?: {
/**
 * Category ID.
 */
[k: string]: string
}
/**
 * Brands that an item should have to be eligible for the rule. Format: key: `brandId`, value: `brandName`.
 */
brands?: {
/**
 * Brand ID.
 */
[k: string]: string
}
/**
 * Stock statuses.
 */
stockStatuses?: (null | {

})
/**
 * Internal Categories.
 */
internalCategories?: (null | {

})
/**
 * For an item to be eligible to the rule, it's markup should be in this Markup Range.
 */
markupRange?: (null | {
/**
 * Item markup should be greater than or equal to this value.
 */
from?: number
/**
 * Item markup should be less than or equal to this value.
 */
to?: number
})
/**
 * The rule will be active during this time range.
 */
dateRange?: (null | {
/**
 * Date when rule will be activated. Date format: `RFC3339`.
 */
from?: string
/**
 * Date when the rule will be deactivated. Date format: `RFC3339`.
 */
to?: string
})
}
}[]
/**
 * Percentual modifier.
 */
percentualModifier?: number
}[]
}
/**
 * This method will list all price tables.
 * 
 * ## Response body example
 * 
 * ```json
 * [
 *     "1",
 *     "2",
 *     "3",
 *     "b2c",
 *     "b2b",
 *     "gold"
 * ]
 * ```
 */
"GET /pricing/tables": {
/**
 * Array of price tables.
 */
response: string[]
}
}
export interface Getprice {
/**
 * SKU ID.
 */
itemId: string
/**
 * Suggested retail price for the SKU.
 */
listPrice: number
/**
 * SKU's cost price.
 */
costPrice: number
/**
 * Desired profit margin with the SKU's sale.
 */
markup: number
/**
 * SKU's reference price.
 */
basePrice: number
/**
 * The fixed price is a price that overlaps all other existing price configurations of a price table.
 */
fixedPrices: FixedPrice[]
}
export interface FixedPrice {
/**
 * Trade Policy ID.
 */
tradePolicyId: string
/**
 * Trade Policy Fixed Price Value.
 */
value: number
/**
 * Trade Policy List Price Value.
 */
listPrice: number
/**
 * Trade Policy Fixed Price Minimum Item Quantity.
 */
minQuantity: number
dateRange?: DateRange
}
/**
 * Trade Policy Fixed Price Validity Period Object.
 */
export interface DateRange {
/**
 * Indicates the date and time when the fixed price will start to be valid.
 */
from: string
/**
 * Indicates the date and time from which the fixed price will no longer be valid.
 */
to: string
}
